/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IArbTokenBridgeInterface extends ethers.utils.Interface {
  functions: {
    "calculateL2TokenAddress(address)": FunctionFragment;
    "customTokenRegistered(address,address)": FunctionFragment;
    "migrate(address,address,address,uint256)": FunctionFragment;
    "mintFromL1(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "withdraw(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateL2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customTokenRegistered",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromL1",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateL2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customTokenRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFromL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CustomTokenRegistered(address,address)": EventFragment;
    "MintAndCallTriggered(bool,address,address,uint256,bytes)": EventFragment;
    "TokenCreated(address,address)": EventFragment;
    "TokenMigrated(address,address,uint256)": EventFragment;
    "TokenMinted(address,address,address,address,uint256,bool)": EventFragment;
    "WithdrawToken(uint256,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintAndCallTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToken"): EventFragment;
}

export class IArbTokenBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IArbTokenBridgeInterface;

  functions: {
    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateL2TokenAddress(
    l1ERC20: string,
    overrides?: CallOverrides
  ): Promise<string>;

  customTokenRegistered(
    l1Address: string,
    l2Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFromL1(
    l1ERC20: string,
    sender: string,
    dest: string,
    amount: BigNumberish,
    deployData: BytesLike,
    callHookData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    l1ERC20: string,
    sender: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<string>;

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    CustomTokenRegistered(
      l1Address?: string | null,
      l2Address?: string | null
    ): TypedEventFilter<
      [string, string],
      { l1Address: string; l2Address: string }
    >;

    MintAndCallTriggered(
      success?: null,
      sender?: string | null,
      dest?: string | null,
      amount?: null,
      callHookData?: null
    ): TypedEventFilter<
      [boolean, string, string, BigNumber, string],
      {
        success: boolean;
        sender: string;
        dest: string;
        amount: BigNumber;
        callHookData: string;
      }
    >;

    TokenCreated(
      l1Address?: string | null,
      l2Address?: string | null
    ): TypedEventFilter<
      [string, string],
      { l1Address: string; l2Address: string }
    >;

    TokenMigrated(
      l1Address?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { l1Address: string; account: string; amount: BigNumber }
    >;

    TokenMinted(
      l1Address?: null,
      l2Address?: string | null,
      sender?: string | null,
      dest?: string | null,
      amount?: null,
      usedCallHook?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, boolean],
      {
        l1Address: string;
        l2Address: string;
        sender: string;
        dest: string;
        amount: BigNumber;
        usedCallHook: boolean;
      }
    >;

    WithdrawToken(
      withdrawalId?: null,
      l1Address?: string | null,
      amount?: null,
      destination?: string | null,
      exitNum?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        withdrawalId: BigNumber;
        l1Address: string;
        amount: BigNumber;
        destination: string;
        exitNum: BigNumber;
      }
    >;
  };

  estimateGas: {
    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateL2TokenAddress(
      l1ERC20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customTokenRegistered(
      l1Address: string,
      l2Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFromL1(
      l1ERC20: string,
      sender: string,
      dest: string,
      amount: BigNumberish,
      deployData: BytesLike,
      callHookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      l1ERC20: string,
      sender: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
