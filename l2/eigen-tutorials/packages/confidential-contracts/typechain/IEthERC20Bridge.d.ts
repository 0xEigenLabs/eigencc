/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IEthERC20BridgeInterface extends ethers.utils.Interface {
  functions: {
    "calculateL2TokenAddress(address)": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getDepositCalldata(address,address,address,uint256,bytes)": FunctionFragment;
    "hasTriedDeploy(address)": FunctionFragment;
    "registerCustomL2Token(address,uint256,uint256,uint256,address)": FunctionFragment;
    "transferExitAndCall(address,address,uint256,uint256,address,bytes)": FunctionFragment;
    "withdrawFromL2(uint256,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateL2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCalldata",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTriedDeploy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCustomL2Token",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExitAndCall",
    values: [string, string, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromL2",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateL2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTriedDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCustomL2Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExitAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromL2",
    data: BytesLike
  ): Result;

  events: {
    "ActivateCustomToken(uint256,address,address)": EventFragment;
    "DeployToken(uint256,address)": EventFragment;
    "DepositToken(address,address,uint256,uint256,address)": EventFragment;
    "WithdrawExecuted(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawRedirected(address,address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivateCustomToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRedirected"): EventFragment;
}

export class IEthERC20Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IEthERC20BridgeInterface;

  functions: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >;

    hasTriedDeploy(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferExitAndCall(
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateL2TokenAddress(
    erc20: string,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    erc20: string,
    destination: string,
    amount: BigNumberish,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    callHookData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDepositCalldata(
    erc20: string,
    destination: string,
    sender: string,
    amount: BigNumberish,
    callHookData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { isDeployed: boolean; depositCalldata: string }
  >;

  hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<boolean>;

  registerCustomL2Token(
    l2CustomTokenAddress: string,
    maxSubmissionCost: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    refundAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferExitAndCall(
    initialDestination: string,
    erc20: string,
    amount: BigNumberish,
    exitNum: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromL2(
    exitNum: BigNumberish,
    erc20: string,
    initialDestination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        seqNum: BigNumber;
        depositCalldataLength: BigNumber;
      }
    >;

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isDeployed: boolean; depositCalldata: string }
    >;

    hasTriedDeploy(erc20: string, overrides?: CallOverrides): Promise<boolean>;

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferExitAndCall(
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ActivateCustomToken(
      seqNum?: BigNumberish | null,
      l1Address?: string | null,
      l2Address?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { seqNum: BigNumber; l1Address: string; l2Address: string }
    >;

    DeployToken(
      seqNum?: BigNumberish | null,
      l1Address?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { seqNum: BigNumber; l1Address: string }
    >;

    DepositToken(
      destination?: string | null,
      sender?: null,
      seqNum?: BigNumberish | null,
      value?: null,
      tokenAddress?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        destination: string;
        sender: string;
        seqNum: BigNumber;
        value: BigNumber;
        tokenAddress: string;
      }
    >;

    WithdrawExecuted(
      initialDestination?: string | null,
      destination?: string | null,
      erc20?: null,
      amount?: null,
      exitNum?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        initialDestination: string;
        destination: string;
        erc20: string;
        amount: BigNumber;
        exitNum: BigNumber;
      }
    >;

    WithdrawRedirected(
      user?: string | null,
      to?: string | null,
      erc20?: null,
      amount?: null,
      exitNum?: BigNumberish | null,
      madeExternalCall?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, boolean],
      {
        user: string;
        to: string;
        erc20: string;
        amount: BigNumber;
        exitNum: BigNumber;
        madeExternalCall: boolean;
      }
    >;
  };

  estimateGas: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasTriedDeploy(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferExitAndCall(
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateL2TokenAddress(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      erc20: string,
      destination: string,
      amount: BigNumberish,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      callHookData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDepositCalldata(
      erc20: string,
      destination: string,
      sender: string,
      amount: BigNumberish,
      callHookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasTriedDeploy(
      erc20: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerCustomL2Token(
      l2CustomTokenAddress: string,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferExitAndCall(
      initialDestination: string,
      erc20: string,
      amount: BigNumberish,
      exitNum: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromL2(
      exitNum: BigNumberish,
      erc20: string,
      initialDestination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
