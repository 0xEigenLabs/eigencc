/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TesterERC20TokenNoMetadata,
  TesterERC20TokenNoMetadataInterface,
} from "../TesterERC20TokenNoMetadata";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122060c5ca0e848e7ac247b372d6df5bf6c67f09da72edefd6160ab22c2936ee491564736f6c634300060b0033";

export class TesterERC20TokenNoMetadata__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TesterERC20TokenNoMetadata> {
    return super.deploy(overrides || {}) as Promise<TesterERC20TokenNoMetadata>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TesterERC20TokenNoMetadata {
    return super.attach(address) as TesterERC20TokenNoMetadata;
  }
  connect(signer: Signer): TesterERC20TokenNoMetadata__factory {
    return super.connect(signer) as TesterERC20TokenNoMetadata__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TesterERC20TokenNoMetadataInterface {
    return new utils.Interface(_abi) as TesterERC20TokenNoMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TesterERC20TokenNoMetadata {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TesterERC20TokenNoMetadata;
  }
}
