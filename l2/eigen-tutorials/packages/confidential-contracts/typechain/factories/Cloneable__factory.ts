/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Cloneable, CloneableInterface } from "../Cloneable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "isMaster",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060016000806101000a81548160ff0219169083151502179055506099806100386000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f791d2914602d575b600080fd5b6033604d565b604051808215151515815260200191505060405180910390f35b60008060009054906101000a900460ff1690509056fea26469706673582212201aada7e4745a015dfa4be329a5a55ad164c43ca7bf18b3ee92b0c6b8b4bd225564736f6c634300060b0033";

export class Cloneable__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Cloneable> {
    return super.deploy(overrides || {}) as Promise<Cloneable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Cloneable {
    return super.attach(address) as Cloneable;
  }
  connect(signer: Signer): Cloneable__factory {
    return super.connect(signer) as Cloneable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneableInterface {
    return new utils.Interface(_abi) as CloneableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cloneable {
    return new Contract(address, _abi, signerOrProvider) as Cloneable;
  }
}
