/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "ArbAddressTable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbAddressTable__factory>;
    getContractFactory(
      name: "ArbAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbAggregator__factory>;
    getContractFactory(
      name: "ArbBLS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbBLS__factory>;
    getContractFactory(
      name: "ArbFunctionTable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbFunctionTable__factory>;
    getContractFactory(
      name: "ArbGasInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbGasInfo__factory>;
    getContractFactory(
      name: "ArbInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbInfo__factory>;
    getContractFactory(
      name: "ArbosTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbosTest__factory>;
    getContractFactory(
      name: "ArbOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbOwner__factory>;
    getContractFactory(
      name: "ArbRetryableTx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbRetryableTx__factory>;
    getContractFactory(
      name: "ArbStatistics",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbStatistics__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "EigencallDemo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EigencallDemo__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>;
    getContractFactory(
      name: "IMessageProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageProvider__factory>;
    getContractFactory(
      name: "IOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: "ISequencerInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISequencerInbox__factory>;
    getContractFactory(
      name: "Cloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cloneable__factory>;
    getContractFactory(
      name: "ICloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICloneable__factory>;
    getContractFactory(
      name: "ArbTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbTokenBridge__factory>;
    getContractFactory(
      name: "IArbStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbStandardToken__factory>;
    getContractFactory(
      name: "IArbToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbToken__factory>;
    getContractFactory(
      name: "IArbTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbTokenBridge__factory>;
    getContractFactory(
      name: "StandardArbERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardArbERC20__factory>;
    getContractFactory(
      name: "EthERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthERC20Bridge__factory>;
    getContractFactory(
      name: "ICustomToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomToken__factory>;
    getContractFactory(
      name: "IEthERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthERC20Bridge__factory>;
    getContractFactory(
      name: "IExitTransferCallReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExitTransferCallReceiver__factory>;
    getContractFactory(
      name: "IExitLiquidityProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExitLiquidityProvider__factory>;
    getContractFactory(
      name: "AeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AeERC20__factory>;
    getContractFactory(
      name: "ClonableBeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableBeaconProxy__factory>;
    getContractFactory(
      name: "ProxySetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxySetter__factory>;
    getContractFactory(
      name: "ERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Token__factory>;
    getContractFactory(
      name: "IERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677__factory>;
    getContractFactory(
      name: "IERC677Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677Receiver__factory>;
    getContractFactory(
      name: "TokenAddressHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAddressHandler__factory>;
    getContractFactory(
      name: "FastExitMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FastExitMock__factory>;
    getContractFactory(
      name: "PassiveFastExitManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PassiveFastExitManager__factory>;
    getContractFactory(
      name: "TestArbCustomToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestArbCustomToken__factory>;
    getContractFactory(
      name: "TestCustomTokenL1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCustomTokenL1__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TesterERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TesterERC20Token__factory>;
    getContractFactory(
      name: "TesterERC20TokenNoMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TesterERC20TokenNoMetadata__factory>;
    getContractFactory(
      name: "L2Called",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2Called__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
