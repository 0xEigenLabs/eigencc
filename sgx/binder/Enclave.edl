enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_time.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_fd.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_env.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    trusted {
        public uint32_t ecall_ipc_entry_point(uint32_t cmd,
                                              [in, size=in_len] const uint8_t* in_buf,
                                              size_t in_len,
                                              [out, size=out_maxlen] uint8_t* out_buf,
                                              size_t out_maxlen,
                                              [out] size_t *real_out_len);
    };

    include "sgx_quote.h"
    untrusted {
        sgx_status_t ocall_sgx_init_quote([out] sgx_target_info_t *p_target_info,
                                          [out] sgx_epid_group_id_t *p_gid);

        int ocall_sgx_get_ias_socket();

        sgx_status_t ocall_sgx_calc_quote_size([in, size=sig_rl_size] uint8_t * p_sig_rl,
                                               uint32_t sig_rl_size,
                                               [out] uint32_t *p_quote_size);

        sgx_status_t ocall_sgx_get_quote([in] sgx_report_t *p_report,
                                         sgx_quote_sign_type_t quote_type,
                                         [in] sgx_spid_t *p_spid,
                                         [in] sgx_quote_nonce_t *p_nonce,
                                         [in, size=sig_rl_size] uint8_t *p_sig_rl,
                                         uint32_t sig_rl_size,
                                         [out] sgx_report_t *p_qe_report,
                                         [out, size=quote_size] sgx_quote_t *p_quote,
                                         uint32_t quote_size);
    };
};
