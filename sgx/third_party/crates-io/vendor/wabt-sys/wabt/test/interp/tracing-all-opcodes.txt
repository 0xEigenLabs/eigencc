;;; TOOL: run-interp
;;; ARGS*: --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd
;;; ARGS1: --trace --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))
  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) ;; data  -- never executed
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.const") v128.const i32 1 1 1 1 drop)
  (; 0xfd 0x01 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x02 ;) (func (export "v128.store") i32.const 1 v128.const i32 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x03 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x04 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x05 ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x06 ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x07 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x08 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x09 ;) (func (export "i8x16.extract_lane_s") v128.const i32 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x0a ;) (func (export "i8x16.extract_lane_u") v128.const i32 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.extract_lane_s") v128.const i32 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0c ;) (func (export "i16x8.extract_lane_u") v128.const i32 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i64x2.extract_lane") v128.const i32 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x0f ;) (func (export "f32x4.extract_lane") v128.const i32 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x10 ;) (func (export "f64x2.extract_lane") v128.const i32 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i8x16.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x12 ;) (func (export "i16x8.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x13 ;) (func (export "i32x4.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "i64x2.replace_lane") v128.const i32 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x15 ;) (func (export "f32x4.replace_lane") v128.const i32 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.replace_lane") v128.const i32 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "v8x16.shuffle") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v8x16.shuffle 1 1 1 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x19 ;) (func (export "i16x8.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x1a ;) (func (export "i32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x1b ;) (func (export "i64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x1d ;) (func (export "i16x8.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x1e ;) (func (export "i32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x1f ;) (func (export "i64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x21 ;) (func (export "i16x8.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x22 ;) (func (export "i32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x23 ;) (func (export "i8x16.neg") v128.const i32 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.neg") v128.const i32 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x25 ;) (func (export "i32x4.neg") v128.const i32 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x26 ;) (func (export "i64x2.neg") v128.const i32 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x27 ;) (func (export "i8x16.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x28 ;) (func (export "i8x16.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x2b ;) (func (export "i8x16.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x2c ;) (func (export "i8x16.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x2d ;) (func (export "i16x8.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x2e ;) (func (export "i16x8.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x2f ;) (func (export "i8x16.shl") v128.const i32 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x30 ;) (func (export "i16x8.shl") v128.const i32 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.shl") v128.const i32 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x32 ;) (func (export "i64x2.shl") v128.const i32 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x33 ;) (func (export "i8x16.shr_s") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x34 ;) (func (export "i8x16.shr_u") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x35 ;) (func (export "i16x8.shr_s") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x36 ;) (func (export "i16x8.shr_u") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x37 ;) (func (export "i32x4.shr_s") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x38 ;) (func (export "i32x4.shr_u") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x39 ;) (func (export "i64x2.shr_s") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x3a ;) (func (export "i64x2.shr_u") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x3b ;) (func (export "v128.and") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.and drop)
  (; 0xfd 0x3c ;) (func (export "v128.or") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.or drop)
  (; 0xfd 0x3d ;) (func (export "v128.xor") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.xor drop)
  (; 0xfd 0x3e ;) (func (export "v128.not") v128.const i32 1 1 1 1 v128.not drop)
  (; 0xfd 0x3f ;) (func (export "v128.bitselect") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.const i32 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x40 ;) (func (export "i8x16.any_true") v128.const i32 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x41 ;) (func (export "i16x8.any_true") v128.const i32 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x42 ;) (func (export "i32x4.any_true") v128.const i32 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x43 ;) (func (export "i64x2.any_true") v128.const i32 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x44 ;) (func (export "i8x16.all_true") v128.const i32 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x45 ;) (func (export "i16x8.all_true") v128.const i32 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x46 ;) (func (export "i32x4.all_true") v128.const i32 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x47 ;) (func (export "i64x2.all_true") v128.const i32 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x48 ;) (func (export "i8x16.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x49 ;) (func (export "i16x8.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x4a ;) (func (export "i32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x4b ;) (func (export "f32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x4c ;) (func (export "f64x2.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x4d ;) (func (export "i8x16.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x4e ;) (func (export "i16x8.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x4f ;) (func (export "i32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x50 ;) (func (export "f32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x51 ;) (func (export "f64x2.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x54 ;) (func (export "i16x8.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x55 ;) (func (export "i16x8.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x56 ;) (func (export "i32x4.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x57 ;) (func (export "i32x4.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x58 ;) (func (export "f32x4.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x59 ;) (func (export "f64x2.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x5c ;) (func (export "i16x8.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x5d ;) (func (export "i16x8.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x5e ;) (func (export "i32x4.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x5f ;) (func (export "i32x4.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x60 ;) (func (export "f32x4.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x61 ;) (func (export "f64x2.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x62 ;) (func (export "i8x16.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x63 ;) (func (export "i8x16.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x66 ;) (func (export "i32x4.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x67 ;) (func (export "i32x4.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x68 ;) (func (export "f32x4.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x69 ;) (func (export "f64x2.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x6a ;) (func (export "i8x16.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x6b ;) (func (export "i8x16.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x6e ;) (func (export "i32x4.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x6f ;) (func (export "i32x4.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x70 ;) (func (export "f32x4.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x71 ;) (func (export "f64x2.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x72 ;) (func (export "f32x4.neg") v128.const i32 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x73 ;) (func (export "f64x2.neg") v128.const i32 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0x74 ;) (func (export "f32x4.abs") v128.const i32 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x75 ;) (func (export "f64x2.abs") v128.const i32 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0x76 ;) (func (export "f32x4.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x77 ;) (func (export "f64x2.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.min drop)
  (; 0xfd 0x78 ;) (func (export "f32x4.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.max drop)
  (; 0xfd 0x79 ;) (func (export "f64x2.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.max drop)
  (; 0xfd 0x7a ;) (func (export "f32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x7b ;) (func (export "f64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.add drop)
  (; 0xfd 0x7c ;) (func (export "f32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x7d ;) (func (export "f64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0x7e ;) (func (export "f32x4.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x7f ;) (func (export "f64x2.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.div drop)
  (; 0xfd 0x80 ;) (func (export "f32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x81 ;) (func (export "f64x2.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0x82 ;) (func (export "f32x4.sqrt") v128.const i32 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x83 ;) (func (export "f64x2.sqrt") v128.const i32 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0x84 ;) (func (export "f32x4.convert_s/i32x4") v128.const i32 1 1 1 1 f32x4.convert_s/i32x4 drop)
  (; 0xfd 0x85 ;) (func (export "f32x4.convert_u/i32x4") v128.const i32 1 1 1 1 f32x4.convert_u/i32x4 drop)
  (; 0xfd 0x86 ;) (func (export "f64x2.convert_s/i64x2") v128.const i32 1 1 1 1 f64x2.convert_s/i64x2 drop)
  (; 0xfd 0x87 ;) (func (export "f64x2.convert_u/i64x2") v128.const i32 1 1 1 1 f64x2.convert_u/i64x2 drop)
  (; 0xfd 0x88 ;) (func (export "i32x4.trunc_s/f32x4:sat") v128.const i32 1 1 1 1 i32x4.trunc_s/f32x4:sat drop)
  (; 0xfd 0x89 ;) (func (export "i32x4.trunc_u/f32x4:sat") v128.const i32 1 1 1 1 i32x4.trunc_u/f32x4:sat drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.trunc_s/f64x2:sat") v128.const i32 1 1 1 1 i64x2.trunc_s/f64x2:sat drop)
  (; 0xfd 0x8b ;) (func (export "i64x2.trunc_u/f64x2:sat") v128.const i32 1 1 1 1 i64x2.trunc_u/f64x2:sat drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.wake") i32.const 1 i32.const 2 atomic.wake offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8_u.add") i32.const 1 i32.const 2 i32.atomic.rmw8_u.add offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16_u.add") i32.const 1 i32.const 2 i32.atomic.rmw16_u.add offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8_u.add") i32.const 1 i64.const 2 i64.atomic.rmw8_u.add offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16_u.add") i32.const 1 i64.const 2 i64.atomic.rmw16_u.add offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32_u.add") i32.const 1 i64.const 2 i64.atomic.rmw32_u.add offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8_u.sub") i32.const 1 i32.const 2 i32.atomic.rmw8_u.sub offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16_u.sub") i32.const 1 i32.const 2 i32.atomic.rmw16_u.sub offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw8_u.sub offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw16_u.sub offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw32_u.sub offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8_u.and") i32.const 1 i32.const 2 i32.atomic.rmw8_u.and offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16_u.and") i32.const 1 i32.const 2 i32.atomic.rmw16_u.and offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8_u.and") i32.const 1 i64.const 2 i64.atomic.rmw8_u.and offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16_u.and") i32.const 1 i64.const 2 i64.atomic.rmw16_u.and offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32_u.and") i32.const 1 i64.const 2 i64.atomic.rmw32_u.and offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8_u.or") i32.const 1 i32.const 2 i32.atomic.rmw8_u.or offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16_u.or") i32.const 1 i32.const 2 i32.atomic.rmw16_u.or offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8_u.or") i32.const 1 i64.const 2 i64.atomic.rmw8_u.or offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16_u.or") i32.const 1 i64.const 2 i64.atomic.rmw16_u.or offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32_u.or") i32.const 1 i64.const 2 i64.atomic.rmw32_u.or offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8_u.xor") i32.const 1 i32.const 2 i32.atomic.rmw8_u.xor offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16_u.xor") i32.const 1 i32.const 2 i32.atomic.rmw16_u.xor offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw8_u.xor offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw16_u.xor offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw32_u.xor offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8_u.xchg") i32.const 1 i32.const 2 i32.atomic.rmw8_u.xchg offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16_u.xchg") i32.const 1 i32.const 2 i32.atomic.rmw16_u.xchg offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw8_u.xchg offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw16_u.xchg offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw32_u.xchg offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8_u.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16_u.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32_u.cmpxchg offset=3 drop)
)
(;; STDOUT ;;;
>>> running export "unreachable":
#0.    1: V:0  | unreachable
unreachable() => error: unreachable executed
>>> running export "br":
#0.    3: V:0  | br @8
#0.    8: V:0  | return
br() =>
>>> running export "br_table":
#0.    9: V:0  | i32.const $1
#0.   14: V:1  | br_table 1, $#0, table:$28
#0.   37: V:0  | return
br_table() =>
>>> running export "return":
#0.   38: V:0  | return
return() =>
>>> running export "call":
#0.   40: V:0  | call @0
#1.    0: V:0  | return
#0.   45: V:0  | return
call() =>
>>> running export "call_indirect":
#0.   46: V:0  | i32.const $1
#0.   51: V:1  | call_indirect $0, 1
#1.    0: V:0  | return
#0.   60: V:0  | return
call_indirect() =>
>>> running export "drop":
#0.   61: V:0  | i32.const $1
#0.   66: V:1  | drop
#0.   67: V:0  | return
drop() =>
>>> running export "select":
#0.   68: V:0  | i32.const $1
#0.   73: V:1  | i32.const $2
#0.   78: V:2  | i32.const $3
#0.   83: V:3  | select 1, %[-2], %[-1]
#0.   84: V:1  | drop
#0.   85: V:0  | return
select() =>
>>> running export "get_local":
#0.   86: V:0  | alloca $1
#0.   91: V:1  | get_local $1
#0.   96: V:2  | drop
#0.   97: V:1  | drop
#0.   98: V:0  | return
get_local() =>
>>> running export "set_local":
#0.   99: V:0  | alloca $1
#0.  104: V:1  | i32.const $1
#0.  109: V:2  | set_local $1, 1
#0.  114: V:1  | drop
#0.  115: V:0  | return
set_local() =>
>>> running export "tee_local":
#0.  116: V:0  | alloca $1
#0.  121: V:1  | i32.const $1
#0.  126: V:2  | tee_local $2, 1
#0.  131: V:2  | drop
#0.  132: V:1  | drop
#0.  133: V:0  | return
tee_local() =>
>>> running export "get_global":
#0.  134: V:0  | get_global $0
#0.  139: V:1  | drop
#0.  140: V:0  | return
get_global() =>
>>> running export "set_global":
#0.  141: V:0  | i32.const $1
#0.  146: V:1  | set_global $0, 1
#0.  151: V:0  | return
set_global() =>
>>> running export "i32.load":
#0.  152: V:0  | i32.const $1
#0.  157: V:1  | i32.load $0:1+$2
#0.  166: V:1  | drop
#0.  167: V:0  | return
i32.load() =>
>>> running export "i64.load":
#0.  168: V:0  | i32.const $1
#0.  173: V:1  | i64.load $0:1+$2
#0.  182: V:1  | drop
#0.  183: V:0  | return
i64.load() =>
>>> running export "f32.load":
#0.  184: V:0  | i32.const $1
#0.  189: V:1  | f32.load $0:1+$2
#0.  198: V:1  | drop
#0.  199: V:0  | return
f32.load() =>
>>> running export "f64.load":
#0.  200: V:0  | i32.const $1
#0.  205: V:1  | f64.load $0:1+$2
#0.  214: V:1  | drop
#0.  215: V:0  | return
f64.load() =>
>>> running export "i32.load8_s":
#0.  216: V:0  | i32.const $1
#0.  221: V:1  | i32.load8_s $0:1+$2
#0.  230: V:1  | drop
#0.  231: V:0  | return
i32.load8_s() =>
>>> running export "i32.load8_u":
#0.  232: V:0  | i32.const $1
#0.  237: V:1  | i32.load8_u $0:1+$2
#0.  246: V:1  | drop
#0.  247: V:0  | return
i32.load8_u() =>
>>> running export "i32.load16_s":
#0.  248: V:0  | i32.const $1
#0.  253: V:1  | i32.load16_s $0:1+$2
#0.  262: V:1  | drop
#0.  263: V:0  | return
i32.load16_s() =>
>>> running export "i32.load16_u":
#0.  264: V:0  | i32.const $1
#0.  269: V:1  | i32.load16_u $0:1+$2
#0.  278: V:1  | drop
#0.  279: V:0  | return
i32.load16_u() =>
>>> running export "i64.load8_s":
#0.  280: V:0  | i32.const $1
#0.  285: V:1  | i64.load8_s $0:1+$2
#0.  294: V:1  | drop
#0.  295: V:0  | return
i64.load8_s() =>
>>> running export "i64.load8_u":
#0.  296: V:0  | i32.const $1
#0.  301: V:1  | i64.load8_u $0:1+$2
#0.  310: V:1  | drop
#0.  311: V:0  | return
i64.load8_u() =>
>>> running export "i64.load16_s":
#0.  312: V:0  | i32.const $1
#0.  317: V:1  | i64.load16_s $0:1+$2
#0.  326: V:1  | drop
#0.  327: V:0  | return
i64.load16_s() =>
>>> running export "i64.load16_u":
#0.  328: V:0  | i32.const $1
#0.  333: V:1  | i64.load16_u $0:1+$2
#0.  342: V:1  | drop
#0.  343: V:0  | return
i64.load16_u() =>
>>> running export "i64.load32_s":
#0.  344: V:0  | i32.const $1
#0.  349: V:1  | i64.load32_s $0:1+$2
#0.  358: V:1  | drop
#0.  359: V:0  | return
i64.load32_s() =>
>>> running export "i64.load32_u":
#0.  360: V:0  | i32.const $1
#0.  365: V:1  | i64.load32_u $0:1+$2
#0.  374: V:1  | drop
#0.  375: V:0  | return
i64.load32_u() =>
>>> running export "i32.store":
#0.  376: V:0  | i32.const $1
#0.  381: V:1  | i32.const $2
#0.  386: V:2  | i32.store $0:1+$2, 2
#0.  395: V:0  | return
i32.store() =>
>>> running export "i64.store":
#0.  396: V:0  | i32.const $1
#0.  401: V:1  | i64.const $2
#0.  410: V:2  | i64.store $0:1+$2, 2
#0.  419: V:0  | return
i64.store() =>
>>> running export "f32.store":
#0.  420: V:0  | i32.const $1
#0.  425: V:1  | f32.const $2
#0.  430: V:2  | f32.store $0:1+$2, 2
#0.  439: V:0  | return
f32.store() =>
>>> running export "f64.store":
#0.  440: V:0  | i32.const $1
#0.  445: V:1  | f64.const $2
#0.  454: V:2  | f64.store $0:1+$2, 2
#0.  463: V:0  | return
f64.store() =>
>>> running export "i32.store8":
#0.  464: V:0  | i32.const $1
#0.  469: V:1  | i32.const $2
#0.  474: V:2  | i32.store8 $0:1+$2, 2
#0.  483: V:0  | return
i32.store8() =>
>>> running export "i32.store16":
#0.  484: V:0  | i32.const $1
#0.  489: V:1  | i32.const $2
#0.  494: V:2  | i32.store16 $0:1+$2, 2
#0.  503: V:0  | return
i32.store16() =>
>>> running export "i64.store8":
#0.  504: V:0  | i32.const $1
#0.  509: V:1  | i64.const $2
#0.  518: V:2  | i64.store8 $0:1+$2, 2
#0.  527: V:0  | return
i64.store8() =>
>>> running export "i64.store16":
#0.  528: V:0  | i32.const $1
#0.  533: V:1  | i64.const $2
#0.  542: V:2  | i64.store16 $0:1+$2, 2
#0.  551: V:0  | return
i64.store16() =>
>>> running export "i64.store32":
#0.  552: V:0  | i32.const $1
#0.  557: V:1  | i64.const $2
#0.  566: V:2  | i64.store32 $0:1+$2, 2
#0.  575: V:0  | return
i64.store32() =>
>>> running export "current_memory":
#0.  576: V:0  | memory.size $0
#0.  581: V:1  | drop
#0.  582: V:0  | return
current_memory() =>
>>> running export "grow_memory":
#0.  583: V:0  | i32.const $1
#0.  588: V:1  | memory.grow $0:1
#0.  593: V:1  | drop
#0.  594: V:0  | return
grow_memory() =>
>>> running export "i32.const":
#0.  595: V:0  | i32.const $1
#0.  600: V:1  | drop
#0.  601: V:0  | return
i32.const() =>
>>> running export "i64.const":
#0.  602: V:0  | i64.const $1
#0.  611: V:1  | drop
#0.  612: V:0  | return
i64.const() =>
>>> running export "f32.const":
#0.  613: V:0  | f32.const $1
#0.  618: V:1  | drop
#0.  619: V:0  | return
f32.const() =>
>>> running export "f64.const":
#0.  620: V:0  | f64.const $1
#0.  629: V:1  | drop
#0.  630: V:0  | return
f64.const() =>
>>> running export "i32.eqz":
#0.  631: V:0  | i32.const $1
#0.  636: V:1  | i32.eqz 1
#0.  637: V:1  | drop
#0.  638: V:0  | return
i32.eqz() =>
>>> running export "i32.eq":
#0.  639: V:0  | i32.const $1
#0.  644: V:1  | i32.const $2
#0.  649: V:2  | i32.eq 1, 2
#0.  650: V:1  | drop
#0.  651: V:0  | return
i32.eq() =>
>>> running export "i32.ne":
#0.  652: V:0  | i32.const $1
#0.  657: V:1  | i32.const $2
#0.  662: V:2  | i32.ne 1, 2
#0.  663: V:1  | drop
#0.  664: V:0  | return
i32.ne() =>
>>> running export "i32.lt_s":
#0.  665: V:0  | i32.const $1
#0.  670: V:1  | i32.const $2
#0.  675: V:2  | i32.lt_s 1, 2
#0.  676: V:1  | drop
#0.  677: V:0  | return
i32.lt_s() =>
>>> running export "i32.lt_u":
#0.  678: V:0  | i32.const $1
#0.  683: V:1  | i32.const $2
#0.  688: V:2  | i32.lt_u 1, 2
#0.  689: V:1  | drop
#0.  690: V:0  | return
i32.lt_u() =>
>>> running export "i32.gt_s":
#0.  691: V:0  | i32.const $1
#0.  696: V:1  | i32.const $2
#0.  701: V:2  | i32.gt_s 1, 2
#0.  702: V:1  | drop
#0.  703: V:0  | return
i32.gt_s() =>
>>> running export "i32.gt_u":
#0.  704: V:0  | i32.const $1
#0.  709: V:1  | i32.const $2
#0.  714: V:2  | i32.gt_u 1, 2
#0.  715: V:1  | drop
#0.  716: V:0  | return
i32.gt_u() =>
>>> running export "i32.le_s":
#0.  717: V:0  | i32.const $1
#0.  722: V:1  | i32.const $2
#0.  727: V:2  | i32.le_s 1, 2
#0.  728: V:1  | drop
#0.  729: V:0  | return
i32.le_s() =>
>>> running export "i32.le_u":
#0.  730: V:0  | i32.const $1
#0.  735: V:1  | i32.const $2
#0.  740: V:2  | i32.le_u 1, 2
#0.  741: V:1  | drop
#0.  742: V:0  | return
i32.le_u() =>
>>> running export "i32.ge_s":
#0.  743: V:0  | i32.const $1
#0.  748: V:1  | i32.const $2
#0.  753: V:2  | i32.ge_s 1, 2
#0.  754: V:1  | drop
#0.  755: V:0  | return
i32.ge_s() =>
>>> running export "i32.ge_u":
#0.  756: V:0  | i32.const $1
#0.  761: V:1  | i32.const $2
#0.  766: V:2  | i32.ge_u 1, 2
#0.  767: V:1  | drop
#0.  768: V:0  | return
i32.ge_u() =>
>>> running export "i64.eqz":
#0.  769: V:0  | i64.const $1
#0.  778: V:1  | i64.eqz 1
#0.  779: V:1  | drop
#0.  780: V:0  | return
i64.eqz() =>
>>> running export "i64.eq":
#0.  781: V:0  | i64.const $1
#0.  790: V:1  | i64.const $2
#0.  799: V:2  | i64.eq 1, 2
#0.  800: V:1  | drop
#0.  801: V:0  | return
i64.eq() =>
>>> running export "i64.ne":
#0.  802: V:0  | i64.const $1
#0.  811: V:1  | i64.const $2
#0.  820: V:2  | i64.ne 1, 2
#0.  821: V:1  | drop
#0.  822: V:0  | return
i64.ne() =>
>>> running export "i64.lt_s":
#0.  823: V:0  | i64.const $1
#0.  832: V:1  | i64.const $2
#0.  841: V:2  | i64.lt_s 1, 2
#0.  842: V:1  | drop
#0.  843: V:0  | return
i64.lt_s() =>
>>> running export "i64.lt_u":
#0.  844: V:0  | i64.const $1
#0.  853: V:1  | i64.const $2
#0.  862: V:2  | i64.lt_u 1, 2
#0.  863: V:1  | drop
#0.  864: V:0  | return
i64.lt_u() =>
>>> running export "i64.gt_s":
#0.  865: V:0  | i64.const $1
#0.  874: V:1  | i64.const $2
#0.  883: V:2  | i64.gt_s 1, 2
#0.  884: V:1  | drop
#0.  885: V:0  | return
i64.gt_s() =>
>>> running export "i64.gt_u":
#0.  886: V:0  | i64.const $1
#0.  895: V:1  | i64.const $2
#0.  904: V:2  | i64.gt_u 1, 2
#0.  905: V:1  | drop
#0.  906: V:0  | return
i64.gt_u() =>
>>> running export "i64.le_s":
#0.  907: V:0  | i64.const $1
#0.  916: V:1  | i64.const $2
#0.  925: V:2  | i64.le_s 1, 2
#0.  926: V:1  | drop
#0.  927: V:0  | return
i64.le_s() =>
>>> running export "i64.le_u":
#0.  928: V:0  | i64.const $1
#0.  937: V:1  | i64.const $2
#0.  946: V:2  | i64.le_u 1, 2
#0.  947: V:1  | drop
#0.  948: V:0  | return
i64.le_u() =>
>>> running export "i64.ge_s":
#0.  949: V:0  | i64.const $1
#0.  958: V:1  | i64.const $2
#0.  967: V:2  | i64.ge_s 1, 2
#0.  968: V:1  | drop
#0.  969: V:0  | return
i64.ge_s() =>
>>> running export "i64.ge_u":
#0.  970: V:0  | i64.const $1
#0.  979: V:1  | i64.const $2
#0.  988: V:2  | i64.ge_u 1, 2
#0.  989: V:1  | drop
#0.  990: V:0  | return
i64.ge_u() =>
>>> running export "f32.eq":
#0.  991: V:0  | f32.const $1
#0.  996: V:1  | f32.const $2
#0. 1001: V:2  | f32.eq 1, 2
#0. 1002: V:1  | drop
#0. 1003: V:0  | return
f32.eq() =>
>>> running export "f32.ne":
#0. 1004: V:0  | f32.const $1
#0. 1009: V:1  | f32.const $2
#0. 1014: V:2  | f32.ne 1, 2
#0. 1015: V:1  | drop
#0. 1016: V:0  | return
f32.ne() =>
>>> running export "f32.lt":
#0. 1017: V:0  | f32.const $1
#0. 1022: V:1  | f32.const $2
#0. 1027: V:2  | f32.lt 1, 2
#0. 1028: V:1  | drop
#0. 1029: V:0  | return
f32.lt() =>
>>> running export "f32.gt":
#0. 1030: V:0  | f32.const $1
#0. 1035: V:1  | f32.const $2
#0. 1040: V:2  | f32.gt 1, 2
#0. 1041: V:1  | drop
#0. 1042: V:0  | return
f32.gt() =>
>>> running export "f32.le":
#0. 1043: V:0  | f32.const $1
#0. 1048: V:1  | f32.const $2
#0. 1053: V:2  | f32.le 1, 2
#0. 1054: V:1  | drop
#0. 1055: V:0  | return
f32.le() =>
>>> running export "f32.ge":
#0. 1056: V:0  | f32.const $1
#0. 1061: V:1  | f32.const $2
#0. 1066: V:2  | f32.ge 1, 2
#0. 1067: V:1  | drop
#0. 1068: V:0  | return
f32.ge() =>
>>> running export "f64.eq":
#0. 1069: V:0  | f64.const $1
#0. 1078: V:1  | f64.const $2
#0. 1087: V:2  | f64.eq 1, 2
#0. 1088: V:1  | drop
#0. 1089: V:0  | return
f64.eq() =>
>>> running export "f64.ne":
#0. 1090: V:0  | f64.const $1
#0. 1099: V:1  | f64.const $2
#0. 1108: V:2  | f64.ne 1, 2
#0. 1109: V:1  | drop
#0. 1110: V:0  | return
f64.ne() =>
>>> running export "f64.lt":
#0. 1111: V:0  | f64.const $1
#0. 1120: V:1  | f64.const $2
#0. 1129: V:2  | f64.lt 1, 2
#0. 1130: V:1  | drop
#0. 1131: V:0  | return
f64.lt() =>
>>> running export "f64.gt":
#0. 1132: V:0  | f64.const $1
#0. 1141: V:1  | f64.const $2
#0. 1150: V:2  | f64.gt 1, 2
#0. 1151: V:1  | drop
#0. 1152: V:0  | return
f64.gt() =>
>>> running export "f64.le":
#0. 1153: V:0  | f64.const $1
#0. 1162: V:1  | f64.const $2
#0. 1171: V:2  | f64.le 1, 2
#0. 1172: V:1  | drop
#0. 1173: V:0  | return
f64.le() =>
>>> running export "f64.ge":
#0. 1174: V:0  | f64.const $1
#0. 1183: V:1  | f64.const $2
#0. 1192: V:2  | f64.ge 1, 2
#0. 1193: V:1  | drop
#0. 1194: V:0  | return
f64.ge() =>
>>> running export "i32.clz":
#0. 1195: V:0  | i32.const $1
#0. 1200: V:1  | i32.clz 1
#0. 1201: V:1  | drop
#0. 1202: V:0  | return
i32.clz() =>
>>> running export "i32.ctz":
#0. 1203: V:0  | i32.const $1
#0. 1208: V:1  | i32.ctz 1
#0. 1209: V:1  | drop
#0. 1210: V:0  | return
i32.ctz() =>
>>> running export "i32.popcnt":
#0. 1211: V:0  | i32.const $1
#0. 1216: V:1  | i32.popcnt 1
#0. 1217: V:1  | drop
#0. 1218: V:0  | return
i32.popcnt() =>
>>> running export "i32.add":
#0. 1219: V:0  | i32.const $1
#0. 1224: V:1  | i32.const $2
#0. 1229: V:2  | i32.add 1, 2
#0. 1230: V:1  | drop
#0. 1231: V:0  | return
i32.add() =>
>>> running export "i32.sub":
#0. 1232: V:0  | i32.const $1
#0. 1237: V:1  | i32.const $2
#0. 1242: V:2  | i32.sub 1, 2
#0. 1243: V:1  | drop
#0. 1244: V:0  | return
i32.sub() =>
>>> running export "i32.mul":
#0. 1245: V:0  | i32.const $1
#0. 1250: V:1  | i32.const $2
#0. 1255: V:2  | i32.mul 1, 2
#0. 1256: V:1  | drop
#0. 1257: V:0  | return
i32.mul() =>
>>> running export "i32.div_s":
#0. 1258: V:0  | i32.const $1
#0. 1263: V:1  | i32.const $2
#0. 1268: V:2  | i32.div_s 1, 2
#0. 1269: V:1  | drop
#0. 1270: V:0  | return
i32.div_s() =>
>>> running export "i32.div_u":
#0. 1271: V:0  | i32.const $1
#0. 1276: V:1  | i32.const $2
#0. 1281: V:2  | i32.div_u 1, 2
#0. 1282: V:1  | drop
#0. 1283: V:0  | return
i32.div_u() =>
>>> running export "i32.rem_s":
#0. 1284: V:0  | i32.const $1
#0. 1289: V:1  | i32.const $2
#0. 1294: V:2  | i32.rem_s 1, 2
#0. 1295: V:1  | drop
#0. 1296: V:0  | return
i32.rem_s() =>
>>> running export "i32.rem_u":
#0. 1297: V:0  | i32.const $1
#0. 1302: V:1  | i32.const $2
#0. 1307: V:2  | i32.rem_u 1, 2
#0. 1308: V:1  | drop
#0. 1309: V:0  | return
i32.rem_u() =>
>>> running export "i32.and":
#0. 1310: V:0  | i32.const $1
#0. 1315: V:1  | i32.const $2
#0. 1320: V:2  | i32.and 1, 2
#0. 1321: V:1  | drop
#0. 1322: V:0  | return
i32.and() =>
>>> running export "i32.or":
#0. 1323: V:0  | i32.const $1
#0. 1328: V:1  | i32.const $2
#0. 1333: V:2  | i32.or 1, 2
#0. 1334: V:1  | drop
#0. 1335: V:0  | return
i32.or() =>
>>> running export "i32.xor":
#0. 1336: V:0  | i32.const $1
#0. 1341: V:1  | i32.const $2
#0. 1346: V:2  | i32.xor 1, 2
#0. 1347: V:1  | drop
#0. 1348: V:0  | return
i32.xor() =>
>>> running export "i32.shl":
#0. 1349: V:0  | i32.const $1
#0. 1354: V:1  | i32.const $2
#0. 1359: V:2  | i32.shl 1, 2
#0. 1360: V:1  | drop
#0. 1361: V:0  | return
i32.shl() =>
>>> running export "i32.shr_s":
#0. 1362: V:0  | i32.const $1
#0. 1367: V:1  | i32.const $2
#0. 1372: V:2  | i32.shr_s 1, 2
#0. 1373: V:1  | drop
#0. 1374: V:0  | return
i32.shr_s() =>
>>> running export "i32.shr_u":
#0. 1375: V:0  | i32.const $1
#0. 1380: V:1  | i32.const $2
#0. 1385: V:2  | i32.shr_u 1, 2
#0. 1386: V:1  | drop
#0. 1387: V:0  | return
i32.shr_u() =>
>>> running export "i32.rotl":
#0. 1388: V:0  | i32.const $1
#0. 1393: V:1  | i32.const $2
#0. 1398: V:2  | i32.rotl 1, 2
#0. 1399: V:1  | drop
#0. 1400: V:0  | return
i32.rotl() =>
>>> running export "i32.rotr":
#0. 1401: V:0  | i32.const $1
#0. 1406: V:1  | i32.const $2
#0. 1411: V:2  | i32.rotr 1, 2
#0. 1412: V:1  | drop
#0. 1413: V:0  | return
i32.rotr() =>
>>> running export "i64.clz":
#0. 1414: V:0  | i64.const $1
#0. 1423: V:1  | i64.clz 1
#0. 1424: V:1  | drop
#0. 1425: V:0  | return
i64.clz() =>
>>> running export "i64.ctz":
#0. 1426: V:0  | i64.const $1
#0. 1435: V:1  | i64.ctz 1
#0. 1436: V:1  | drop
#0. 1437: V:0  | return
i64.ctz() =>
>>> running export "i64.popcnt":
#0. 1438: V:0  | i64.const $1
#0. 1447: V:1  | i64.popcnt 1
#0. 1448: V:1  | drop
#0. 1449: V:0  | return
i64.popcnt() =>
>>> running export "i64.add":
#0. 1450: V:0  | i64.const $1
#0. 1459: V:1  | i64.const $2
#0. 1468: V:2  | i64.add 1, 2
#0. 1469: V:1  | drop
#0. 1470: V:0  | return
i64.add() =>
>>> running export "i64.sub":
#0. 1471: V:0  | i64.const $1
#0. 1480: V:1  | i64.const $2
#0. 1489: V:2  | i64.sub 1, 2
#0. 1490: V:1  | drop
#0. 1491: V:0  | return
i64.sub() =>
>>> running export "i64.mul":
#0. 1492: V:0  | i64.const $1
#0. 1501: V:1  | i64.const $2
#0. 1510: V:2  | i64.mul 1, 2
#0. 1511: V:1  | drop
#0. 1512: V:0  | return
i64.mul() =>
>>> running export "i64.div_s":
#0. 1513: V:0  | i64.const $1
#0. 1522: V:1  | i64.const $2
#0. 1531: V:2  | i64.div_s 1, 2
#0. 1532: V:1  | drop
#0. 1533: V:0  | return
i64.div_s() =>
>>> running export "i64.div_u":
#0. 1534: V:0  | i64.const $1
#0. 1543: V:1  | i64.const $2
#0. 1552: V:2  | i64.div_u 1, 2
#0. 1553: V:1  | drop
#0. 1554: V:0  | return
i64.div_u() =>
>>> running export "i64.rem_s":
#0. 1555: V:0  | i64.const $1
#0. 1564: V:1  | i64.const $2
#0. 1573: V:2  | i64.rem_s 1, 2
#0. 1574: V:1  | drop
#0. 1575: V:0  | return
i64.rem_s() =>
>>> running export "i64.rem_u":
#0. 1576: V:0  | i64.const $1
#0. 1585: V:1  | i64.const $2
#0. 1594: V:2  | i64.rem_u 1, 2
#0. 1595: V:1  | drop
#0. 1596: V:0  | return
i64.rem_u() =>
>>> running export "i64.and":
#0. 1597: V:0  | i64.const $1
#0. 1606: V:1  | i64.const $2
#0. 1615: V:2  | i64.and 1, 2
#0. 1616: V:1  | drop
#0. 1617: V:0  | return
i64.and() =>
>>> running export "i64.or":
#0. 1618: V:0  | i64.const $1
#0. 1627: V:1  | i64.const $2
#0. 1636: V:2  | i64.or 1, 2
#0. 1637: V:1  | drop
#0. 1638: V:0  | return
i64.or() =>
>>> running export "i64.xor":
#0. 1639: V:0  | i64.const $1
#0. 1648: V:1  | i64.const $2
#0. 1657: V:2  | i64.xor 1, 2
#0. 1658: V:1  | drop
#0. 1659: V:0  | return
i64.xor() =>
>>> running export "i64.shl":
#0. 1660: V:0  | i64.const $1
#0. 1669: V:1  | i64.const $2
#0. 1678: V:2  | i64.shl 1, 2
#0. 1679: V:1  | drop
#0. 1680: V:0  | return
i64.shl() =>
>>> running export "i64.shr_s":
#0. 1681: V:0  | i64.const $1
#0. 1690: V:1  | i64.const $2
#0. 1699: V:2  | i64.shr_s 1, 2
#0. 1700: V:1  | drop
#0. 1701: V:0  | return
i64.shr_s() =>
>>> running export "i64.shr_u":
#0. 1702: V:0  | i64.const $1
#0. 1711: V:1  | i64.const $2
#0. 1720: V:2  | i64.shr_u 1, 2
#0. 1721: V:1  | drop
#0. 1722: V:0  | return
i64.shr_u() =>
>>> running export "i64.rotl":
#0. 1723: V:0  | i64.const $1
#0. 1732: V:1  | i64.const $2
#0. 1741: V:2  | i64.rotl 1, 2
#0. 1742: V:1  | drop
#0. 1743: V:0  | return
i64.rotl() =>
>>> running export "i64.rotr":
#0. 1744: V:0  | i64.const $1
#0. 1753: V:1  | i64.const $2
#0. 1762: V:2  | i64.rotr 1, 2
#0. 1763: V:1  | drop
#0. 1764: V:0  | return
i64.rotr() =>
>>> running export "f32.abs":
#0. 1765: V:0  | f32.const $1
#0. 1770: V:1  | f32.abs 1
#0. 1771: V:1  | drop
#0. 1772: V:0  | return
f32.abs() =>
>>> running export "f32.neg":
#0. 1773: V:0  | f32.const $1
#0. 1778: V:1  | f32.neg 1
#0. 1779: V:1  | drop
#0. 1780: V:0  | return
f32.neg() =>
>>> running export "f32.ceil":
#0. 1781: V:0  | f32.const $1
#0. 1786: V:1  | f32.ceil 1
#0. 1787: V:1  | drop
#0. 1788: V:0  | return
f32.ceil() =>
>>> running export "f32.floor":
#0. 1789: V:0  | f32.const $1
#0. 1794: V:1  | f32.floor 1
#0. 1795: V:1  | drop
#0. 1796: V:0  | return
f32.floor() =>
>>> running export "f32.trunc":
#0. 1797: V:0  | f32.const $1
#0. 1802: V:1  | f32.trunc 1
#0. 1803: V:1  | drop
#0. 1804: V:0  | return
f32.trunc() =>
>>> running export "f32.nearest":
#0. 1805: V:0  | f32.const $1
#0. 1810: V:1  | f32.nearest 1
#0. 1811: V:1  | drop
#0. 1812: V:0  | return
f32.nearest() =>
>>> running export "f32.sqrt":
#0. 1813: V:0  | f32.const $1
#0. 1818: V:1  | f32.sqrt 1
#0. 1819: V:1  | drop
#0. 1820: V:0  | return
f32.sqrt() =>
>>> running export "f32.add":
#0. 1821: V:0  | f32.const $1
#0. 1826: V:1  | f32.const $2
#0. 1831: V:2  | f32.add 1, 2
#0. 1832: V:1  | drop
#0. 1833: V:0  | return
f32.add() =>
>>> running export "f32.sub":
#0. 1834: V:0  | f32.const $1
#0. 1839: V:1  | f32.const $2
#0. 1844: V:2  | f32.sub 1, 2
#0. 1845: V:1  | drop
#0. 1846: V:0  | return
f32.sub() =>
>>> running export "f32.mul":
#0. 1847: V:0  | f32.const $1
#0. 1852: V:1  | f32.const $2
#0. 1857: V:2  | f32.mul 1, 2
#0. 1858: V:1  | drop
#0. 1859: V:0  | return
f32.mul() =>
>>> running export "f32.div":
#0. 1860: V:0  | f32.const $1
#0. 1865: V:1  | f32.const $2
#0. 1870: V:2  | f32.div 1, 2
#0. 1871: V:1  | drop
#0. 1872: V:0  | return
f32.div() =>
>>> running export "f32.min":
#0. 1873: V:0  | f32.const $1
#0. 1878: V:1  | f32.const $2
#0. 1883: V:2  | f32.min 1, 2
#0. 1884: V:1  | drop
#0. 1885: V:0  | return
f32.min() =>
>>> running export "f32.max":
#0. 1886: V:0  | f32.const $1
#0. 1891: V:1  | f32.const $2
#0. 1896: V:2  | f32.max 1, 2
#0. 1897: V:1  | drop
#0. 1898: V:0  | return
f32.max() =>
>>> running export "f32.copysign":
#0. 1899: V:0  | f32.const $1
#0. 1904: V:1  | f32.const $2
#0. 1909: V:2  | f32.copysign 1, 2
#0. 1910: V:1  | drop
#0. 1911: V:0  | return
f32.copysign() =>
>>> running export "f64.abs":
#0. 1912: V:0  | f64.const $1
#0. 1921: V:1  | f64.abs 1
#0. 1922: V:1  | drop
#0. 1923: V:0  | return
f64.abs() =>
>>> running export "f64.neg":
#0. 1924: V:0  | f64.const $1
#0. 1933: V:1  | f64.neg 1
#0. 1934: V:1  | drop
#0. 1935: V:0  | return
f64.neg() =>
>>> running export "f64.ceil":
#0. 1936: V:0  | f64.const $1
#0. 1945: V:1  | f64.ceil 1
#0. 1946: V:1  | drop
#0. 1947: V:0  | return
f64.ceil() =>
>>> running export "f64.floor":
#0. 1948: V:0  | f64.const $1
#0. 1957: V:1  | f64.floor 1
#0. 1958: V:1  | drop
#0. 1959: V:0  | return
f64.floor() =>
>>> running export "f64.trunc":
#0. 1960: V:0  | f64.const $1
#0. 1969: V:1  | f64.trunc 1
#0. 1970: V:1  | drop
#0. 1971: V:0  | return
f64.trunc() =>
>>> running export "f64.nearest":
#0. 1972: V:0  | f64.const $1
#0. 1981: V:1  | f64.nearest 1
#0. 1982: V:1  | drop
#0. 1983: V:0  | return
f64.nearest() =>
>>> running export "f64.sqrt":
#0. 1984: V:0  | f64.const $1
#0. 1993: V:1  | f64.sqrt 1
#0. 1994: V:1  | drop
#0. 1995: V:0  | return
f64.sqrt() =>
>>> running export "f64.add":
#0. 1996: V:0  | f64.const $1
#0. 2005: V:1  | f64.const $2
#0. 2014: V:2  | f64.add 1, 2
#0. 2015: V:1  | drop
#0. 2016: V:0  | return
f64.add() =>
>>> running export "f64.sub":
#0. 2017: V:0  | f64.const $1
#0. 2026: V:1  | f64.const $2
#0. 2035: V:2  | f64.sub 1, 2
#0. 2036: V:1  | drop
#0. 2037: V:0  | return
f64.sub() =>
>>> running export "f64.mul":
#0. 2038: V:0  | f64.const $1
#0. 2047: V:1  | f64.const $2
#0. 2056: V:2  | f64.mul 1, 2
#0. 2057: V:1  | drop
#0. 2058: V:0  | return
f64.mul() =>
>>> running export "f64.div":
#0. 2059: V:0  | f64.const $1
#0. 2068: V:1  | f64.const $2
#0. 2077: V:2  | f64.div 1, 2
#0. 2078: V:1  | drop
#0. 2079: V:0  | return
f64.div() =>
>>> running export "f64.min":
#0. 2080: V:0  | f64.const $1
#0. 2089: V:1  | f64.const $2
#0. 2098: V:2  | f64.min 1, 2
#0. 2099: V:1  | drop
#0. 2100: V:0  | return
f64.min() =>
>>> running export "f64.max":
#0. 2101: V:0  | f64.const $1
#0. 2110: V:1  | f64.const $2
#0. 2119: V:2  | f64.max 1, 2
#0. 2120: V:1  | drop
#0. 2121: V:0  | return
f64.max() =>
>>> running export "f64.copysign":
#0. 2122: V:0  | f64.const $1
#0. 2131: V:1  | f64.const $2
#0. 2140: V:2  | f64.copysign 1, 2
#0. 2141: V:1  | drop
#0. 2142: V:0  | return
f64.copysign() =>
>>> running export "i32.wrap/i64":
#0. 2143: V:0  | i64.const $1
#0. 2152: V:1  | i32.wrap/i64 1
#0. 2153: V:1  | drop
#0. 2154: V:0  | return
i32.wrap/i64() =>
>>> running export "i32.trunc_s/f32":
#0. 2155: V:0  | f32.const $1
#0. 2160: V:1  | i32.trunc_s/f32 1
#0. 2161: V:1  | drop
#0. 2162: V:0  | return
i32.trunc_s/f32() =>
>>> running export "i32.trunc_u/f32":
#0. 2163: V:0  | f32.const $1
#0. 2168: V:1  | i32.trunc_u/f32 1
#0. 2169: V:1  | drop
#0. 2170: V:0  | return
i32.trunc_u/f32() =>
>>> running export "i32.trunc_s/f64":
#0. 2171: V:0  | f64.const $1
#0. 2180: V:1  | i32.trunc_s/f64 1
#0. 2181: V:1  | drop
#0. 2182: V:0  | return
i32.trunc_s/f64() =>
>>> running export "i32.trunc_u/f64":
#0. 2183: V:0  | f64.const $1
#0. 2192: V:1  | i32.trunc_u/f64 1
#0. 2193: V:1  | drop
#0. 2194: V:0  | return
i32.trunc_u/f64() =>
>>> running export "i64.extend_s/i32":
#0. 2195: V:0  | i32.const $1
#0. 2200: V:1  | i64.extend_s/i32 1
#0. 2201: V:1  | drop
#0. 2202: V:0  | return
i64.extend_s/i32() =>
>>> running export "i64.extend_u/i32":
#0. 2203: V:0  | i32.const $1
#0. 2208: V:1  | i64.extend_u/i32 1
#0. 2209: V:1  | drop
#0. 2210: V:0  | return
i64.extend_u/i32() =>
>>> running export "i64.trunc_s/f32":
#0. 2211: V:0  | f32.const $1
#0. 2216: V:1  | i64.trunc_s/f32 1
#0. 2217: V:1  | drop
#0. 2218: V:0  | return
i64.trunc_s/f32() =>
>>> running export "i64.trunc_u/f32":
#0. 2219: V:0  | f32.const $1
#0. 2224: V:1  | i64.trunc_u/f32 1
#0. 2225: V:1  | drop
#0. 2226: V:0  | return
i64.trunc_u/f32() =>
>>> running export "i64.trunc_s/f64":
#0. 2227: V:0  | f64.const $1
#0. 2236: V:1  | i64.trunc_s/f64 1
#0. 2237: V:1  | drop
#0. 2238: V:0  | return
i64.trunc_s/f64() =>
>>> running export "i64.trunc_u/f64":
#0. 2239: V:0  | f64.const $1
#0. 2248: V:1  | i64.trunc_u/f64 1
#0. 2249: V:1  | drop
#0. 2250: V:0  | return
i64.trunc_u/f64() =>
>>> running export "f32.convert_s/i32":
#0. 2251: V:0  | i32.const $1
#0. 2256: V:1  | f32.convert_s/i32 1
#0. 2257: V:1  | drop
#0. 2258: V:0  | return
f32.convert_s/i32() =>
>>> running export "f32.convert_u/i32":
#0. 2259: V:0  | i32.const $1
#0. 2264: V:1  | f32.convert_u/i32 1
#0. 2265: V:1  | drop
#0. 2266: V:0  | return
f32.convert_u/i32() =>
>>> running export "f32.convert_s/i64":
#0. 2267: V:0  | i64.const $1
#0. 2276: V:1  | f32.convert_s/i64 1
#0. 2277: V:1  | drop
#0. 2278: V:0  | return
f32.convert_s/i64() =>
>>> running export "f32.convert_u/i64":
#0. 2279: V:0  | i64.const $1
#0. 2288: V:1  | f32.convert_u/i64 1
#0. 2289: V:1  | drop
#0. 2290: V:0  | return
f32.convert_u/i64() =>
>>> running export "f32.demote/f64":
#0. 2291: V:0  | f64.const $1
#0. 2300: V:1  | f32.demote/f64 1
#0. 2301: V:1  | drop
#0. 2302: V:0  | return
f32.demote/f64() =>
>>> running export "f64.convert_s/i32":
#0. 2303: V:0  | i32.const $1
#0. 2308: V:1  | f64.convert_s/i32 1
#0. 2309: V:1  | drop
#0. 2310: V:0  | return
f64.convert_s/i32() =>
>>> running export "f64.convert_u/i32":
#0. 2311: V:0  | i32.const $1
#0. 2316: V:1  | f64.convert_u/i32 1
#0. 2317: V:1  | drop
#0. 2318: V:0  | return
f64.convert_u/i32() =>
>>> running export "f64.convert_s/i64":
#0. 2319: V:0  | i64.const $1
#0. 2328: V:1  | f64.convert_s/i64 1
#0. 2329: V:1  | drop
#0. 2330: V:0  | return
f64.convert_s/i64() =>
>>> running export "f64.convert_u/i64":
#0. 2331: V:0  | i64.const $1
#0. 2340: V:1  | f64.convert_u/i64 1
#0. 2341: V:1  | drop
#0. 2342: V:0  | return
f64.convert_u/i64() =>
>>> running export "f64.promote/f32":
#0. 2343: V:0  | f32.const $1
#0. 2348: V:1  | f64.promote/f32 1
#0. 2349: V:1  | drop
#0. 2350: V:0  | return
f64.promote/f32() =>
>>> running export "i32.reinterpret/f32":
#0. 2351: V:0  | i32.const $1
#0. 2356: V:1  | f32.reinterpret/i32 1
#0. 2357: V:1  | drop
#0. 2358: V:0  | return
i32.reinterpret/f32() =>
>>> running export "f32.reinterpret/i32":
#0. 2359: V:0  | f32.const $1
#0. 2364: V:1  | i32.reinterpret/f32 1
#0. 2365: V:1  | drop
#0. 2366: V:0  | return
f32.reinterpret/i32() =>
>>> running export "i64.reinterpret/f64":
#0. 2367: V:0  | i64.const $1
#0. 2376: V:1  | f64.reinterpret/i64 1
#0. 2377: V:1  | drop
#0. 2378: V:0  | return
i64.reinterpret/f64() =>
>>> running export "f64.reinterpret/i64":
#0. 2379: V:0  | f64.const $1
#0. 2388: V:1  | i64.reinterpret/f64 1
#0. 2389: V:1  | drop
#0. 2390: V:0  | return
f64.reinterpret/i64() =>
>>> running export "i32.extend8_s":
#0. 2391: V:0  | i32.const $1
#0. 2396: V:1  | i32.extend8_s 1
#0. 2397: V:1  | drop
#0. 2398: V:0  | return
i32.extend8_s() =>
>>> running export "i32.extend16_s":
#0. 2399: V:0  | i32.const $1
#0. 2404: V:1  | i32.extend16_s 1
#0. 2405: V:1  | drop
#0. 2406: V:0  | return
i32.extend16_s() =>
>>> running export "i64.extend8_s":
#0. 2407: V:0  | i64.const $1
#0. 2416: V:1  | i64.extend8_s 1
#0. 2417: V:1  | drop
#0. 2418: V:0  | return
i64.extend8_s() =>
>>> running export "i64.extend16_s":
#0. 2419: V:0  | i64.const $1
#0. 2428: V:1  | i64.extend16_s 1
#0. 2429: V:1  | drop
#0. 2430: V:0  | return
i64.extend16_s() =>
>>> running export "i64.extend32_s":
#0. 2431: V:0  | i64.const $1
#0. 2440: V:1  | i64.extend32_s 1
#0. 2441: V:1  | drop
#0. 2442: V:0  | return
i64.extend32_s() =>
>>> running export "alloca":
#0. 2443: V:0  | alloca $1
#0. 2448: V:1  | drop
#0. 2449: V:0  | return
alloca() =>
>>> running export "br_unless":
#0. 2450: V:0  | i32.const $1
#0. 2455: V:1  | br_unless @2465, 1
#0. 2460: V:0  | br @2465
#0. 2465: V:0  | return
br_unless() =>
>>> running export "call_host":
#0. 2466: V:0  | i32.const $1
#0. 2471: V:1  | call_host $0
called host host.print(i32:1) =>
#0. 2476: V:0  | return
call_host() =>
>>> running export "drop_keep":
#0. 2477: V:0  | i32.const $1
#0. 2482: V:1  | i32.const $2
#0. 2487: V:2  | drop_keep $1 $1
#0. 2493: V:1  | br @2498
#0. 2498: V:1  | drop
#0. 2499: V:0  | return
drop_keep() =>
>>> running export "i32.trunc_s:sat/f32":
#0. 2500: V:0  | f32.const $1
#0. 2505: V:1  | i32.trunc_s:sat/f32 1
#0. 2507: V:1  | drop
#0. 2508: V:0  | return
i32.trunc_s:sat/f32() =>
>>> running export "i32.trunc_u:sat/f32":
#0. 2509: V:0  | f32.const $1
#0. 2514: V:1  | i32.trunc_u:sat/f32 1
#0. 2516: V:1  | drop
#0. 2517: V:0  | return
i32.trunc_u:sat/f32() =>
>>> running export "i32.trunc_s:sat/f64":
#0. 2518: V:0  | f64.const $1
#0. 2527: V:1  | i32.trunc_s:sat/f64 1
#0. 2529: V:1  | drop
#0. 2530: V:0  | return
i32.trunc_s:sat/f64() =>
>>> running export "i32.trunc_u:sat/f64":
#0. 2531: V:0  | f64.const $1
#0. 2540: V:1  | i32.trunc_u:sat/f64 1
#0. 2542: V:1  | drop
#0. 2543: V:0  | return
i32.trunc_u:sat/f64() =>
>>> running export "i64.trunc_s:sat/f32":
#0. 2544: V:0  | f32.const $1
#0. 2549: V:1  | i64.trunc_s:sat/f32 1
#0. 2551: V:1  | drop
#0. 2552: V:0  | return
i64.trunc_s:sat/f32() =>
>>> running export "i64.trunc_u:sat/f32":
#0. 2553: V:0  | f32.const $1
#0. 2558: V:1  | i64.trunc_u:sat/f32 1
#0. 2560: V:1  | drop
#0. 2561: V:0  | return
i64.trunc_u:sat/f32() =>
>>> running export "i64.trunc_s:sat/f64":
#0. 2562: V:0  | f64.const $1
#0. 2571: V:1  | i64.trunc_s:sat/f64 1
#0. 2573: V:1  | drop
#0. 2574: V:0  | return
i64.trunc_s:sat/f64() =>
>>> running export "i64.trunc_u:sat/f64":
#0. 2575: V:0  | f64.const $1
#0. 2584: V:1  | i64.trunc_u:sat/f64 1
#0. 2586: V:1  | drop
#0. 2587: V:0  | return
i64.trunc_u:sat/f64() =>
>>> running export "v128.const":
#0. 2588: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2606: V:1  | drop
#0. 2607: V:0  | return
v128.const() =>
>>> running export "v128.load":
#0. 2608: V:0  | i32.const $1
#0. 2613: V:1  | v128.load $0:1+$3
#0. 2623: V:1  | drop
#0. 2624: V:0  | return
v128.load() =>
>>> running export "v128.store":
#0. 2625: V:0  | i32.const $1
#0. 2630: V:1  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2648: V:2  | v128.store $0:1+$3, $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2658: V:0  | return
v128.store() =>
>>> running export "i8x16.splat":
#0. 2659: V:0  | i32.const $1
#0. 2664: V:1  | i8x16.splat 1
#0. 2666: V:1  | drop
#0. 2667: V:0  | return
i8x16.splat() =>
>>> running export "i16x8.splat":
#0. 2668: V:0  | i32.const $1
#0. 2673: V:1  | i16x8.splat 1
#0. 2675: V:1  | drop
#0. 2676: V:0  | return
i16x8.splat() =>
>>> running export "i32x4.splat":
#0. 2677: V:0  | i32.const $1
#0. 2682: V:1  | i32x4.splat 1
#0. 2684: V:1  | drop
#0. 2685: V:0  | return
i32x4.splat() =>
>>> running export "i64x2.splat":
#0. 2686: V:0  | i64.const $1
#0. 2695: V:1  | i64x2.splat 1
#0. 2697: V:1  | drop
#0. 2698: V:0  | return
i64x2.splat() =>
>>> running export "f32x4.splat":
#0. 2699: V:0  | f32.const $1
#0. 2704: V:1  | f32x4.splat 1
#0. 2706: V:1  | drop
#0. 2707: V:0  | return
f32x4.splat() =>
>>> running export "f64x2.splat":
#0. 2708: V:0  | f64.const $1
#0. 2717: V:1  | f64x2.splat 1
#0. 2719: V:1  | drop
#0. 2720: V:0  | return
f64x2.splat() =>
>>> running export "i8x16.extract_lane_s":
#0. 2721: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2739: V:1  | i8x16.extract_lane_s : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2742: V:1  | drop
#0. 2743: V:0  | return
i8x16.extract_lane_s() =>
>>> running export "i8x16.extract_lane_u":
#0. 2744: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2762: V:1  | i8x16.extract_lane_u : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2765: V:1  | drop
#0. 2766: V:0  | return
i8x16.extract_lane_u() =>
>>> running export "i16x8.extract_lane_s":
#0. 2767: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2785: V:1  | i16x8.extract_lane_s : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2788: V:1  | drop
#0. 2789: V:0  | return
i16x8.extract_lane_s() =>
>>> running export "i16x8.extract_lane_u":
#0. 2790: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2808: V:1  | i16x8.extract_lane_u : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2811: V:1  | drop
#0. 2812: V:0  | return
i16x8.extract_lane_u() =>
>>> running export "i32x4.extract_lane":
#0. 2813: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2831: V:1  | i32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2834: V:1  | drop
#0. 2835: V:0  | return
i32x4.extract_lane() =>
>>> running export "i64x2.extract_lane":
#0. 2836: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2854: V:1  | i64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2857: V:1  | drop
#0. 2858: V:0  | return
i64x2.extract_lane() =>
>>> running export "f32x4.extract_lane":
#0. 2859: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2877: V:1  | f32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2880: V:1  | drop
#0. 2881: V:0  | return
f32x4.extract_lane() =>
>>> running export "f64x2.extract_lane":
#0. 2882: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2900: V:1  | f64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2903: V:1  | drop
#0. 2904: V:0  | return
f64x2.extract_lane() =>
>>> running export "i8x16.replace_lane":
#0. 2905: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2923: V:1  | i32.const $0
#0. 2928: V:2  | i8x16.replace_lane : Set 0 to LaneIdx 15 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2931: V:1  | drop
#0. 2932: V:0  | return
i8x16.replace_lane() =>
>>> running export "i16x8.replace_lane":
#0. 2933: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2951: V:1  | i32.const $0
#0. 2956: V:2  | i16x8.replace_lane : Set 0 to LaneIdx 7 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2959: V:1  | drop
#0. 2960: V:0  | return
i16x8.replace_lane() =>
>>> running export "i32x4.replace_lane":
#0. 2961: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2979: V:1  | i32.const $0
#0. 2984: V:2  | i32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 2987: V:1  | drop
#0. 2988: V:0  | return
i32x4.replace_lane() =>
>>> running export "i64x2.replace_lane":
#0. 2989: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3007: V:1  | i64.const $0
#0. 3016: V:2  | i64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3019: V:1  | drop
#0. 3020: V:0  | return
i64x2.replace_lane() =>
>>> running export "f32x4.replace_lane":
#0. 3021: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3039: V:1  | f32.const $0
#0. 3044: V:2  | f32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3047: V:1  | drop
#0. 3048: V:0  | return
f32x4.replace_lane() =>
>>> running export "f64x2.replace_lane":
#0. 3049: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3067: V:1  | f64.const $0
#0. 3076: V:2  | f64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3079: V:1  | drop
#0. 3080: V:0  | return
f64x2.replace_lane() =>
>>> running export "v8x16.shuffle":
#0. 3081: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3099: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3117: V:2  | v8x16.shuffle $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 : with lane imm: $0x00000001 00000001 00000001 00000001
#0. 3135: V:1  | drop
#0. 3136: V:0  | return
v8x16.shuffle() =>
>>> running export "i8x16.add":
#0. 3137: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3155: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3173: V:2  | i8x16.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3175: V:1  | drop
#0. 3176: V:0  | return
i8x16.add() =>
>>> running export "i16x8.add":
#0. 3177: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3195: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3213: V:2  | i16x8.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3215: V:1  | drop
#0. 3216: V:0  | return
i16x8.add() =>
>>> running export "i32x4.add":
#0. 3217: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3235: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3253: V:2  | i32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3255: V:1  | drop
#0. 3256: V:0  | return
i32x4.add() =>
>>> running export "i64x2.add":
#0. 3257: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3275: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3293: V:2  | i64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3295: V:1  | drop
#0. 3296: V:0  | return
i64x2.add() =>
>>> running export "i8x16.sub":
#0. 3297: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3315: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3333: V:2  | i8x16.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3335: V:1  | drop
#0. 3336: V:0  | return
i8x16.sub() =>
>>> running export "i16x8.sub":
#0. 3337: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3355: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3373: V:2  | i16x8.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3375: V:1  | drop
#0. 3376: V:0  | return
i16x8.sub() =>
>>> running export "i32x4.sub":
#0. 3377: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3395: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3413: V:2  | i32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3415: V:1  | drop
#0. 3416: V:0  | return
i32x4.sub() =>
>>> running export "i64x2.sub":
#0. 3417: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3435: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3453: V:2  | i64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3455: V:1  | drop
#0. 3456: V:0  | return
i64x2.sub() =>
>>> running export "i8x16.mul":
#0. 3457: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3475: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3493: V:2  | i8x16.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3495: V:1  | drop
#0. 3496: V:0  | return
i8x16.mul() =>
>>> running export "i16x8.mul":
#0. 3497: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3515: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3533: V:2  | i16x8.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3535: V:1  | drop
#0. 3536: V:0  | return
i16x8.mul() =>
>>> running export "i32x4.mul":
#0. 3537: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3555: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3573: V:2  | i32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3575: V:1  | drop
#0. 3576: V:0  | return
i32x4.mul() =>
>>> running export "i8x16.neg":
#0. 3577: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3595: V:1  | i8x16.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3597: V:1  | drop
#0. 3598: V:0  | return
i8x16.neg() =>
>>> running export "i16x8.neg":
#0. 3599: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3617: V:1  | i16x8.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3619: V:1  | drop
#0. 3620: V:0  | return
i16x8.neg() =>
>>> running export "i32x4.neg":
#0. 3621: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3639: V:1  | i32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3641: V:1  | drop
#0. 3642: V:0  | return
i32x4.neg() =>
>>> running export "i64x2.neg":
#0. 3643: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3661: V:1  | i64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3663: V:1  | drop
#0. 3664: V:0  | return
i64x2.neg() =>
>>> running export "i8x16.add_saturate_s":
#0. 3665: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3683: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3701: V:2  | i8x16.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3703: V:1  | drop
#0. 3704: V:0  | return
i8x16.add_saturate_s() =>
>>> running export "i8x16.add_saturate_u":
#0. 3705: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3723: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3741: V:2  | i8x16.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3743: V:1  | drop
#0. 3744: V:0  | return
i8x16.add_saturate_u() =>
>>> running export "i16x8.add_saturate_s":
#0. 3745: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3763: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3781: V:2  | i16x8.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3783: V:1  | drop
#0. 3784: V:0  | return
i16x8.add_saturate_s() =>
>>> running export "i16x8.add_saturate_u":
#0. 3785: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3803: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3821: V:2  | i16x8.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3823: V:1  | drop
#0. 3824: V:0  | return
i16x8.add_saturate_u() =>
>>> running export "i8x16.sub_saturate_s":
#0. 3825: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3843: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3861: V:2  | i8x16.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3863: V:1  | drop
#0. 3864: V:0  | return
i8x16.sub_saturate_s() =>
>>> running export "i8x16.sub_saturate_u":
#0. 3865: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3883: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3901: V:2  | i8x16.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3903: V:1  | drop
#0. 3904: V:0  | return
i8x16.sub_saturate_u() =>
>>> running export "i16x8.sub_saturate_s":
#0. 3905: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3923: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3941: V:2  | i16x8.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3943: V:1  | drop
#0. 3944: V:0  | return
i16x8.sub_saturate_s() =>
>>> running export "i16x8.sub_saturate_u":
#0. 3945: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 3963: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 3981: V:2  | i16x8.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 3983: V:1  | drop
#0. 3984: V:0  | return
i16x8.sub_saturate_u() =>
>>> running export "i8x16.shl":
#0. 3985: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4003: V:1  | i32.const $0
#0. 4008: V:2  | i8x16.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4010: V:1  | drop
#0. 4011: V:0  | return
i8x16.shl() =>
>>> running export "i16x8.shl":
#0. 4012: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4030: V:1  | i32.const $0
#0. 4035: V:2  | i16x8.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4037: V:1  | drop
#0. 4038: V:0  | return
i16x8.shl() =>
>>> running export "i32x4.shl":
#0. 4039: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4057: V:1  | i32.const $0
#0. 4062: V:2  | i32x4.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4064: V:1  | drop
#0. 4065: V:0  | return
i32x4.shl() =>
>>> running export "i64x2.shl":
#0. 4066: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4084: V:1  | i32.const $0
#0. 4089: V:2  | i64x2.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4091: V:1  | drop
#0. 4092: V:0  | return
i64x2.shl() =>
>>> running export "i8x16.shr_s":
#0. 4093: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4111: V:1  | i32.const $0
#0. 4116: V:2  | i8x16.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4118: V:1  | drop
#0. 4119: V:0  | return
i8x16.shr_s() =>
>>> running export "i8x16.shr_u":
#0. 4120: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4138: V:1  | i32.const $0
#0. 4143: V:2  | i8x16.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4145: V:1  | drop
#0. 4146: V:0  | return
i8x16.shr_u() =>
>>> running export "i16x8.shr_s":
#0. 4147: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4165: V:1  | i32.const $0
#0. 4170: V:2  | i16x8.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4172: V:1  | drop
#0. 4173: V:0  | return
i16x8.shr_s() =>
>>> running export "i16x8.shr_u":
#0. 4174: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4192: V:1  | i32.const $0
#0. 4197: V:2  | i16x8.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4199: V:1  | drop
#0. 4200: V:0  | return
i16x8.shr_u() =>
>>> running export "i32x4.shr_s":
#0. 4201: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4219: V:1  | i32.const $0
#0. 4224: V:2  | i32x4.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4226: V:1  | drop
#0. 4227: V:0  | return
i32x4.shr_s() =>
>>> running export "i32x4.shr_u":
#0. 4228: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4246: V:1  | i32.const $0
#0. 4251: V:2  | i32x4.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4253: V:1  | drop
#0. 4254: V:0  | return
i32x4.shr_u() =>
>>> running export "i64x2.shr_s":
#0. 4255: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4273: V:1  | i32.const $0
#0. 4278: V:2  | i64x2.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4280: V:1  | drop
#0. 4281: V:0  | return
i64x2.shr_s() =>
>>> running export "i64x2.shr_u":
#0. 4282: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4300: V:1  | i32.const $0
#0. 4305: V:2  | i64x2.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 4307: V:1  | drop
#0. 4308: V:0  | return
i64x2.shr_u() =>
>>> running export "v128.and":
#0. 4309: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4327: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4345: V:2  | v128.and $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4347: V:1  | drop
#0. 4348: V:0  | return
v128.and() =>
>>> running export "v128.or":
#0. 4349: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4367: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4385: V:2  | v128.or $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4387: V:1  | drop
#0. 4388: V:0  | return
v128.or() =>
>>> running export "v128.xor":
#0. 4389: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4407: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4425: V:2  | v128.xor $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4427: V:1  | drop
#0. 4428: V:0  | return
v128.xor() =>
>>> running export "v128.not":
#0. 4429: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4447: V:1  | v128.not $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4449: V:1  | drop
#0. 4450: V:0  | return
v128.not() =>
>>> running export "v128.bitselect":
#0. 4451: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4469: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4487: V:2  | v128.const $0x00000003 0x00000003 0x00000003 0x00000003
#0. 4505: V:3  | v128.bitselect $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 $0x00000003 00000003 00000003 00000003
#0. 4507: V:1  | drop
#0. 4508: V:0  | return
v128.bitselect() =>
>>> running export "i8x16.any_true":
#0. 4509: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4527: V:1  | i8x16.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4529: V:1  | drop
#0. 4530: V:0  | return
i8x16.any_true() =>
>>> running export "i16x8.any_true":
#0. 4531: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4549: V:1  | i16x8.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4551: V:1  | drop
#0. 4552: V:0  | return
i16x8.any_true() =>
>>> running export "i32x4.any_true":
#0. 4553: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4571: V:1  | i32x4.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4573: V:1  | drop
#0. 4574: V:0  | return
i32x4.any_true() =>
>>> running export "i64x2.any_true":
#0. 4575: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4593: V:1  | i64x2.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4595: V:1  | drop
#0. 4596: V:0  | return
i64x2.any_true() =>
>>> running export "i8x16.all_true":
#0. 4597: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4615: V:1  | i8x16.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4617: V:1  | drop
#0. 4618: V:0  | return
i8x16.all_true() =>
>>> running export "i16x8.all_true":
#0. 4619: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4637: V:1  | i16x8.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4639: V:1  | drop
#0. 4640: V:0  | return
i16x8.all_true() =>
>>> running export "i32x4.all_true":
#0. 4641: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4659: V:1  | i32x4.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4661: V:1  | drop
#0. 4662: V:0  | return
i32x4.all_true() =>
>>> running export "i64x2.all_true":
#0. 4663: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4681: V:1  | i64x2.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4683: V:1  | drop
#0. 4684: V:0  | return
i64x2.all_true() =>
>>> running export "i8x16.eq":
#0. 4685: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4703: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4721: V:2  | i8x16.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4723: V:1  | drop
#0. 4724: V:0  | return
i8x16.eq() =>
>>> running export "i16x8.eq":
#0. 4725: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4743: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4761: V:2  | i16x8.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4763: V:1  | drop
#0. 4764: V:0  | return
i16x8.eq() =>
>>> running export "i32x4.eq":
#0. 4765: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4783: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4801: V:2  | i32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4803: V:1  | drop
#0. 4804: V:0  | return
i32x4.eq() =>
>>> running export "f32x4.eq":
#0. 4805: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4823: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4841: V:2  | f32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4843: V:1  | drop
#0. 4844: V:0  | return
f32x4.eq() =>
>>> running export "f64x2.eq":
#0. 4845: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4863: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4881: V:2  | f64x2.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4883: V:1  | drop
#0. 4884: V:0  | return
f64x2.eq() =>
>>> running export "i8x16.ne":
#0. 4885: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4903: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4921: V:2  | i8x16.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4923: V:1  | drop
#0. 4924: V:0  | return
i8x16.ne() =>
>>> running export "i16x8.ne":
#0. 4925: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4943: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 4961: V:2  | i16x8.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 4963: V:1  | drop
#0. 4964: V:0  | return
i16x8.ne() =>
>>> running export "i32x4.ne":
#0. 4965: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 4983: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5001: V:2  | i32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5003: V:1  | drop
#0. 5004: V:0  | return
i32x4.ne() =>
>>> running export "f32x4.ne":
#0. 5005: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5023: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5041: V:2  | f32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5043: V:1  | drop
#0. 5044: V:0  | return
f32x4.ne() =>
>>> running export "f64x2.ne":
#0. 5045: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5063: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5081: V:2  | f64x2.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5083: V:1  | drop
#0. 5084: V:0  | return
f64x2.ne() =>
>>> running export "i8x16.lt_s":
#0. 5085: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5103: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5121: V:2  | i8x16.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5123: V:1  | drop
#0. 5124: V:0  | return
i8x16.lt_s() =>
>>> running export "i8x16.lt_u":
#0. 5125: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5143: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5161: V:2  | i8x16.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5163: V:1  | drop
#0. 5164: V:0  | return
i8x16.lt_u() =>
>>> running export "i16x8.lt_s":
#0. 5165: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5183: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5201: V:2  | i16x8.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5203: V:1  | drop
#0. 5204: V:0  | return
i16x8.lt_s() =>
>>> running export "i16x8.lt_u":
#0. 5205: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5223: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5241: V:2  | i16x8.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5243: V:1  | drop
#0. 5244: V:0  | return
i16x8.lt_u() =>
>>> running export "i32x4.lt_s":
#0. 5245: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5263: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5281: V:2  | i32x4.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5283: V:1  | drop
#0. 5284: V:0  | return
i32x4.lt_s() =>
>>> running export "i32x4.lt_u":
#0. 5285: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5303: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5321: V:2  | i32x4.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5323: V:1  | drop
#0. 5324: V:0  | return
i32x4.lt_u() =>
>>> running export "f32x4.lt":
#0. 5325: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5343: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5361: V:2  | f32x4.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5363: V:1  | drop
#0. 5364: V:0  | return
f32x4.lt() =>
>>> running export "f64x2.lt":
#0. 5365: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5383: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5401: V:2  | f64x2.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5403: V:1  | drop
#0. 5404: V:0  | return
f64x2.lt() =>
>>> running export "i8x16.le_s":
#0. 5405: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5423: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5441: V:2  | i8x16.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5443: V:1  | drop
#0. 5444: V:0  | return
i8x16.le_s() =>
>>> running export "i8x16.le_u":
#0. 5445: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5463: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5481: V:2  | i8x16.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5483: V:1  | drop
#0. 5484: V:0  | return
i8x16.le_u() =>
>>> running export "i16x8.le_s":
#0. 5485: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5503: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5521: V:2  | i16x8.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5523: V:1  | drop
#0. 5524: V:0  | return
i16x8.le_s() =>
>>> running export "i16x8.le_u":
#0. 5525: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5543: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5561: V:2  | i16x8.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5563: V:1  | drop
#0. 5564: V:0  | return
i16x8.le_u() =>
>>> running export "i32x4.le_s":
#0. 5565: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5583: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5601: V:2  | i32x4.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5603: V:1  | drop
#0. 5604: V:0  | return
i32x4.le_s() =>
>>> running export "i32x4.le_u":
#0. 5605: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5623: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5641: V:2  | i32x4.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5643: V:1  | drop
#0. 5644: V:0  | return
i32x4.le_u() =>
>>> running export "f32x4.le":
#0. 5645: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5663: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5681: V:2  | f32x4.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5683: V:1  | drop
#0. 5684: V:0  | return
f32x4.le() =>
>>> running export "f64x2.le":
#0. 5685: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5703: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5721: V:2  | f64x2.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5723: V:1  | drop
#0. 5724: V:0  | return
f64x2.le() =>
>>> running export "i8x16.gt_s":
#0. 5725: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5743: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5761: V:2  | i8x16.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5763: V:1  | drop
#0. 5764: V:0  | return
i8x16.gt_s() =>
>>> running export "i8x16.gt_u":
#0. 5765: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5783: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5801: V:2  | i8x16.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5803: V:1  | drop
#0. 5804: V:0  | return
i8x16.gt_u() =>
>>> running export "i16x8.gt_s":
#0. 5805: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5823: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5841: V:2  | i16x8.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5843: V:1  | drop
#0. 5844: V:0  | return
i16x8.gt_s() =>
>>> running export "i16x8.gt_u":
#0. 5845: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5863: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5881: V:2  | i16x8.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5883: V:1  | drop
#0. 5884: V:0  | return
i16x8.gt_u() =>
>>> running export "i32x4.gt_s":
#0. 5885: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5903: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5921: V:2  | i32x4.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5923: V:1  | drop
#0. 5924: V:0  | return
i32x4.gt_s() =>
>>> running export "i32x4.gt_u":
#0. 5925: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5943: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 5961: V:2  | i32x4.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5963: V:1  | drop
#0. 5964: V:0  | return
i32x4.gt_u() =>
>>> running export "f32x4.gt":
#0. 5965: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5983: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6001: V:2  | f32x4.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6003: V:1  | drop
#0. 6004: V:0  | return
f32x4.gt() =>
>>> running export "f64x2.gt":
#0. 6005: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6023: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6041: V:2  | f64x2.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6043: V:1  | drop
#0. 6044: V:0  | return
f64x2.gt() =>
>>> running export "i8x16.ge_s":
#0. 6045: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6063: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6081: V:2  | i8x16.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6083: V:1  | drop
#0. 6084: V:0  | return
i8x16.ge_s() =>
>>> running export "i8x16.ge_u":
#0. 6085: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6103: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6121: V:2  | i8x16.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6123: V:1  | drop
#0. 6124: V:0  | return
i8x16.ge_u() =>
>>> running export "i16x8.ge_s":
#0. 6125: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6143: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6161: V:2  | i16x8.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6163: V:1  | drop
#0. 6164: V:0  | return
i16x8.ge_s() =>
>>> running export "i16x8.ge_u":
#0. 6165: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6183: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6201: V:2  | i16x8.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6203: V:1  | drop
#0. 6204: V:0  | return
i16x8.ge_u() =>
>>> running export "i32x4.ge_s":
#0. 6205: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6223: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6241: V:2  | i32x4.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6243: V:1  | drop
#0. 6244: V:0  | return
i32x4.ge_s() =>
>>> running export "i32x4.ge_u":
#0. 6245: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6263: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6281: V:2  | i32x4.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6283: V:1  | drop
#0. 6284: V:0  | return
i32x4.ge_u() =>
>>> running export "f32x4.ge":
#0. 6285: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6303: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6321: V:2  | f32x4.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6323: V:1  | drop
#0. 6324: V:0  | return
f32x4.ge() =>
>>> running export "f64x2.ge":
#0. 6325: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6343: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6361: V:2  | f64x2.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6363: V:1  | drop
#0. 6364: V:0  | return
f64x2.ge() =>
>>> running export "f32x4.neg":
#0. 6365: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6383: V:1  | f32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6385: V:1  | drop
#0. 6386: V:0  | return
f32x4.neg() =>
>>> running export "f64x2.neg":
#0. 6387: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6405: V:1  | f64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6407: V:1  | drop
#0. 6408: V:0  | return
f64x2.neg() =>
>>> running export "f32x4.abs":
#0. 6409: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6427: V:1  | f32x4.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6429: V:1  | drop
#0. 6430: V:0  | return
f32x4.abs() =>
>>> running export "f64x2.abs":
#0. 6431: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6449: V:1  | f64x2.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6451: V:1  | drop
#0. 6452: V:0  | return
f64x2.abs() =>
>>> running export "f32x4.min":
#0. 6453: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6471: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6489: V:2  | f32x4.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6491: V:1  | drop
#0. 6492: V:0  | return
f32x4.min() =>
>>> running export "f64x2.min":
#0. 6493: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6511: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6529: V:2  | f64x2.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6531: V:1  | drop
#0. 6532: V:0  | return
f64x2.min() =>
>>> running export "f32x4.max":
#0. 6533: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6551: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6569: V:2  | f32x4.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6571: V:1  | drop
#0. 6572: V:0  | return
f32x4.max() =>
>>> running export "f64x2.max":
#0. 6573: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6591: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6609: V:2  | f64x2.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6611: V:1  | drop
#0. 6612: V:0  | return
f64x2.max() =>
>>> running export "f32x4.add":
#0. 6613: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6631: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6649: V:2  | f32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6651: V:1  | drop
#0. 6652: V:0  | return
f32x4.add() =>
>>> running export "f64x2.add":
#0. 6653: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6671: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6689: V:2  | f64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6691: V:1  | drop
#0. 6692: V:0  | return
f64x2.add() =>
>>> running export "f32x4.sub":
#0. 6693: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6711: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6729: V:2  | f32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6731: V:1  | drop
#0. 6732: V:0  | return
f32x4.sub() =>
>>> running export "f64x2.sub":
#0. 6733: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6751: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6769: V:2  | f64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6771: V:1  | drop
#0. 6772: V:0  | return
f64x2.sub() =>
>>> running export "f32x4.div":
#0. 6773: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6791: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6809: V:2  | f32x4.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6811: V:1  | drop
#0. 6812: V:0  | return
f32x4.div() =>
>>> running export "f64x2.div":
#0. 6813: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6831: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6849: V:2  | f64x2.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6851: V:1  | drop
#0. 6852: V:0  | return
f64x2.div() =>
>>> running export "f32x4.mul":
#0. 6853: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6871: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6889: V:2  | f32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6891: V:1  | drop
#0. 6892: V:0  | return
f32x4.mul() =>
>>> running export "f64x2.mul":
#0. 6893: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6911: V:1  | v128.const $0x00000002 0x00000002 0x00000002 0x00000002
#0. 6929: V:2  | f64x2.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6931: V:1  | drop
#0. 6932: V:0  | return
f64x2.mul() =>
>>> running export "f32x4.sqrt":
#0. 6933: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6951: V:1  | f32x4.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6953: V:1  | drop
#0. 6954: V:0  | return
f32x4.sqrt() =>
>>> running export "f64x2.sqrt":
#0. 6955: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6973: V:1  | f64x2.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6975: V:1  | drop
#0. 6976: V:0  | return
f64x2.sqrt() =>
>>> running export "f32x4.convert_s/i32x4":
#0. 6977: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6995: V:1  | f32x4.convert_s/i32x4 $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6997: V:1  | drop
#0. 6998: V:0  | return
f32x4.convert_s/i32x4() =>
>>> running export "f32x4.convert_u/i32x4":
#0. 6999: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7017: V:1  | f32x4.convert_u/i32x4 $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7019: V:1  | drop
#0. 7020: V:0  | return
f32x4.convert_u/i32x4() =>
>>> running export "f64x2.convert_s/i64x2":
#0. 7021: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7039: V:1  | f64x2.convert_s/i64x2 $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7041: V:1  | drop
#0. 7042: V:0  | return
f64x2.convert_s/i64x2() =>
>>> running export "f64x2.convert_u/i64x2":
#0. 7043: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7061: V:1  | f64x2.convert_u/i64x2 $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7063: V:1  | drop
#0. 7064: V:0  | return
f64x2.convert_u/i64x2() =>
>>> running export "i32x4.trunc_s/f32x4:sat":
#0. 7065: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7083: V:1  | i32x4.trunc_s/f32x4:sat $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7085: V:1  | drop
#0. 7086: V:0  | return
i32x4.trunc_s/f32x4:sat() =>
>>> running export "i32x4.trunc_u/f32x4:sat":
#0. 7087: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7105: V:1  | i32x4.trunc_u/f32x4:sat $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7107: V:1  | drop
#0. 7108: V:0  | return
i32x4.trunc_u/f32x4:sat() =>
>>> running export "i64x2.trunc_s/f64x2:sat":
#0. 7109: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7127: V:1  | i64x2.trunc_s/f64x2:sat $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7129: V:1  | drop
#0. 7130: V:0  | return
i64x2.trunc_s/f64x2:sat() =>
>>> running export "i64x2.trunc_u/f64x2:sat":
#0. 7131: V:0  | v128.const $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7149: V:1  | i64x2.trunc_u/f64x2:sat $0x00000001 0x00000001 0x00000001 0x00000001
#0. 7151: V:1  | drop
#0. 7152: V:0  | return
i64x2.trunc_u/f64x2:sat() =>
>>> running export "atomic.wake":
#0. 7153: V:0  | i32.const $1
#0. 7158: V:1  | i32.const $2
#0. 7163: V:2  | atomic.wake $0:1+$3, 2
atomic.wake() => error: unreachable executed
>>> running export "i32.atomic.wait":
#0. 7175: V:0  | i32.const $1
#0. 7180: V:1  | i32.const $2
#0. 7185: V:2  | i64.const $3
#0. 7194: V:3  | i32.atomic.wait $0:1+$3, 2, 3
i32.atomic.wait() => error: unreachable executed
>>> running export "i64.atomic.wait":
#0. 7206: V:0  | i32.const $1
#0. 7211: V:1  | i64.const $2
#0. 7220: V:2  | i64.const $3
#0. 7229: V:3  | i64.atomic.wait $0:1+$3, 2, 3
i64.atomic.wait() => error: unreachable executed
>>> running export "i32.atomic.load":
#0. 7241: V:0  | i32.const $1
#0. 7246: V:1  | i32.atomic.load $0:1+$3
#0. 7256: V:1  | drop
#0. 7257: V:0  | return
i32.atomic.load() =>
>>> running export "i64.atomic.load":
#0. 7258: V:0  | i32.const $1
#0. 7263: V:1  | i64.atomic.load $0:1+$7
#0. 7273: V:1  | drop
#0. 7274: V:0  | return
i64.atomic.load() =>
>>> running export "i32.atomic.load8_u":
#0. 7275: V:0  | i32.const $1
#0. 7280: V:1  | i32.atomic.load8_u $0:1+$3
#0. 7290: V:1  | drop
#0. 7291: V:0  | return
i32.atomic.load8_u() =>
>>> running export "i32.atomic.load16_u":
#0. 7292: V:0  | i32.const $1
#0. 7297: V:1  | i32.atomic.load16_u $0:1+$3
#0. 7307: V:1  | drop
#0. 7308: V:0  | return
i32.atomic.load16_u() =>
>>> running export "i64.atomic.load8_u":
#0. 7309: V:0  | i32.const $1
#0. 7314: V:1  | i64.atomic.load8_u $0:1+$3
#0. 7324: V:1  | drop
#0. 7325: V:0  | return
i64.atomic.load8_u() =>
>>> running export "i64.atomic.load16_u":
#0. 7326: V:0  | i32.const $1
#0. 7331: V:1  | i64.atomic.load16_u $0:1+$3
#0. 7341: V:1  | drop
#0. 7342: V:0  | return
i64.atomic.load16_u() =>
>>> running export "i64.atomic.load32_u":
#0. 7343: V:0  | i32.const $1
#0. 7348: V:1  | i64.atomic.load32_u $0:1+$3
#0. 7358: V:1  | drop
#0. 7359: V:0  | return
i64.atomic.load32_u() =>
>>> running export "i32.atomic.store":
#0. 7360: V:0  | i32.const $1
#0. 7365: V:1  | i32.const $2
#0. 7370: V:2  | i32.atomic.store $0:1+$3, 2
#0. 7380: V:0  | return
i32.atomic.store() =>
>>> running export "i64.atomic.store":
#0. 7381: V:0  | i32.const $1
#0. 7386: V:1  | i64.const $2
#0. 7395: V:2  | i64.atomic.store $0:1+$7, 2
#0. 7405: V:0  | return
i64.atomic.store() =>
>>> running export "i32.atomic.store8":
#0. 7406: V:0  | i32.const $1
#0. 7411: V:1  | i32.const $2
#0. 7416: V:2  | i32.atomic.store8 $0:1+$3, 2
#0. 7426: V:0  | return
i32.atomic.store8() =>
>>> running export "i32.atomic.store16":
#0. 7427: V:0  | i32.const $1
#0. 7432: V:1  | i32.const $2
#0. 7437: V:2  | i32.atomic.store16 $0:1+$3, 2
#0. 7447: V:0  | return
i32.atomic.store16() =>
>>> running export "i64.atomic.store8":
#0. 7448: V:0  | i32.const $1
#0. 7453: V:1  | i64.const $2
#0. 7462: V:2  | i64.atomic.store8 $0:1+$3, 2
#0. 7472: V:0  | return
i64.atomic.store8() =>
>>> running export "i64.atomic.store16":
#0. 7473: V:0  | i32.const $1
#0. 7478: V:1  | i64.const $2
#0. 7487: V:2  | i64.atomic.store16 $0:1+$3, 2
#0. 7497: V:0  | return
i64.atomic.store16() =>
>>> running export "i64.atomic.store32":
#0. 7498: V:0  | i32.const $1
#0. 7503: V:1  | i64.const $2
#0. 7512: V:2  | i64.atomic.store32 $0:1+$3, 2
#0. 7522: V:0  | return
i64.atomic.store32() =>
>>> running export "i32.atomic.rmw.add":
#0. 7523: V:0  | i32.const $1
#0. 7528: V:1  | i32.const $2
#0. 7533: V:2  | i32.atomic.rmw.add $0:1+$3, 2
#0. 7543: V:1  | drop
#0. 7544: V:0  | return
i32.atomic.rmw.add() =>
>>> running export "i64.atomic.rmw.add":
#0. 7545: V:0  | i32.const $1
#0. 7550: V:1  | i64.const $2
#0. 7559: V:2  | i64.atomic.rmw.add $0:1+$7, 2
#0. 7569: V:1  | drop
#0. 7570: V:0  | return
i64.atomic.rmw.add() =>
>>> running export "i32.atomic.rmw8_u.add":
#0. 7571: V:0  | i32.const $1
#0. 7576: V:1  | i32.const $2
#0. 7581: V:2  | i32.atomic.rmw8_u.add $0:1+$3, 2
#0. 7591: V:1  | drop
#0. 7592: V:0  | return
i32.atomic.rmw8_u.add() =>
>>> running export "i32.atomic.rmw16_u.add":
#0. 7593: V:0  | i32.const $1
#0. 7598: V:1  | i32.const $2
#0. 7603: V:2  | i32.atomic.rmw16_u.add $0:1+$3, 2
#0. 7613: V:1  | drop
#0. 7614: V:0  | return
i32.atomic.rmw16_u.add() =>
>>> running export "i64.atomic.rmw8_u.add":
#0. 7615: V:0  | i32.const $1
#0. 7620: V:1  | i64.const $2
#0. 7629: V:2  | i64.atomic.rmw8_u.add $0:1+$3, 2
#0. 7639: V:1  | drop
#0. 7640: V:0  | return
i64.atomic.rmw8_u.add() =>
>>> running export "i64.atomic.rmw16_u.add":
#0. 7641: V:0  | i32.const $1
#0. 7646: V:1  | i64.const $2
#0. 7655: V:2  | i64.atomic.rmw16_u.add $0:1+$3, 2
#0. 7665: V:1  | drop
#0. 7666: V:0  | return
i64.atomic.rmw16_u.add() =>
>>> running export "i64.atomic.rmw32_u.add":
#0. 7667: V:0  | i32.const $1
#0. 7672: V:1  | i64.const $2
#0. 7681: V:2  | i64.atomic.rmw32_u.add $0:1+$3, 2
#0. 7691: V:1  | drop
#0. 7692: V:0  | return
i64.atomic.rmw32_u.add() =>
>>> running export "i32.atomic.rmw.sub":
#0. 7693: V:0  | i32.const $1
#0. 7698: V:1  | i32.const $2
#0. 7703: V:2  | i32.atomic.rmw.sub $0:1+$3, 2
#0. 7713: V:1  | drop
#0. 7714: V:0  | return
i32.atomic.rmw.sub() =>
>>> running export "i64.atomic.rmw.sub":
#0. 7715: V:0  | i32.const $1
#0. 7720: V:1  | i64.const $2
#0. 7729: V:2  | i64.atomic.rmw.sub $0:1+$7, 2
#0. 7739: V:1  | drop
#0. 7740: V:0  | return
i64.atomic.rmw.sub() =>
>>> running export "i32.atomic.rmw8_u.sub":
#0. 7741: V:0  | i32.const $1
#0. 7746: V:1  | i32.const $2
#0. 7751: V:2  | i32.atomic.rmw8_u.sub $0:1+$3, 2
#0. 7761: V:1  | drop
#0. 7762: V:0  | return
i32.atomic.rmw8_u.sub() =>
>>> running export "i32.atomic.rmw16_u.sub":
#0. 7763: V:0  | i32.const $1
#0. 7768: V:1  | i32.const $2
#0. 7773: V:2  | i32.atomic.rmw16_u.sub $0:1+$3, 2
#0. 7783: V:1  | drop
#0. 7784: V:0  | return
i32.atomic.rmw16_u.sub() =>
>>> running export "i64.atomic.rmw8_u.sub":
#0. 7785: V:0  | i32.const $1
#0. 7790: V:1  | i64.const $2
#0. 7799: V:2  | i64.atomic.rmw8_u.sub $0:1+$3, 2
#0. 7809: V:1  | drop
#0. 7810: V:0  | return
i64.atomic.rmw8_u.sub() =>
>>> running export "i64.atomic.rmw16_u.sub":
#0. 7811: V:0  | i32.const $1
#0. 7816: V:1  | i64.const $2
#0. 7825: V:2  | i64.atomic.rmw16_u.sub $0:1+$3, 2
#0. 7835: V:1  | drop
#0. 7836: V:0  | return
i64.atomic.rmw16_u.sub() =>
>>> running export "i64.atomic.rmw32_u.sub":
#0. 7837: V:0  | i32.const $1
#0. 7842: V:1  | i64.const $2
#0. 7851: V:2  | i64.atomic.rmw32_u.sub $0:1+$3, 2
#0. 7861: V:1  | drop
#0. 7862: V:0  | return
i64.atomic.rmw32_u.sub() =>
>>> running export "i32.atomic.rmw.and":
#0. 7863: V:0  | i32.const $1
#0. 7868: V:1  | i32.const $2
#0. 7873: V:2  | i32.atomic.rmw.and $0:1+$3, 2
#0. 7883: V:1  | drop
#0. 7884: V:0  | return
i32.atomic.rmw.and() =>
>>> running export "i64.atomic.rmw.and":
#0. 7885: V:0  | i32.const $1
#0. 7890: V:1  | i64.const $2
#0. 7899: V:2  | i64.atomic.rmw.and $0:1+$7, 2
#0. 7909: V:1  | drop
#0. 7910: V:0  | return
i64.atomic.rmw.and() =>
>>> running export "i32.atomic.rmw8_u.and":
#0. 7911: V:0  | i32.const $1
#0. 7916: V:1  | i32.const $2
#0. 7921: V:2  | i32.atomic.rmw8_u.and $0:1+$3, 2
#0. 7931: V:1  | drop
#0. 7932: V:0  | return
i32.atomic.rmw8_u.and() =>
>>> running export "i32.atomic.rmw16_u.and":
#0. 7933: V:0  | i32.const $1
#0. 7938: V:1  | i32.const $2
#0. 7943: V:2  | i32.atomic.rmw16_u.and $0:1+$3, 2
#0. 7953: V:1  | drop
#0. 7954: V:0  | return
i32.atomic.rmw16_u.and() =>
>>> running export "i64.atomic.rmw8_u.and":
#0. 7955: V:0  | i32.const $1
#0. 7960: V:1  | i64.const $2
#0. 7969: V:2  | i64.atomic.rmw8_u.and $0:1+$3, 2
#0. 7979: V:1  | drop
#0. 7980: V:0  | return
i64.atomic.rmw8_u.and() =>
>>> running export "i64.atomic.rmw16_u.and":
#0. 7981: V:0  | i32.const $1
#0. 7986: V:1  | i64.const $2
#0. 7995: V:2  | i64.atomic.rmw16_u.and $0:1+$3, 2
#0. 8005: V:1  | drop
#0. 8006: V:0  | return
i64.atomic.rmw16_u.and() =>
>>> running export "i64.atomic.rmw32_u.and":
#0. 8007: V:0  | i32.const $1
#0. 8012: V:1  | i64.const $2
#0. 8021: V:2  | i64.atomic.rmw32_u.and $0:1+$3, 2
#0. 8031: V:1  | drop
#0. 8032: V:0  | return
i64.atomic.rmw32_u.and() =>
>>> running export "i32.atomic.rmw.or":
#0. 8033: V:0  | i32.const $1
#0. 8038: V:1  | i32.const $2
#0. 8043: V:2  | i32.atomic.rmw.or $0:1+$3, 2
#0. 8053: V:1  | drop
#0. 8054: V:0  | return
i32.atomic.rmw.or() =>
>>> running export "i64.atomic.rmw.or":
#0. 8055: V:0  | i32.const $1
#0. 8060: V:1  | i64.const $2
#0. 8069: V:2  | i64.atomic.rmw.or $0:1+$7, 2
#0. 8079: V:1  | drop
#0. 8080: V:0  | return
i64.atomic.rmw.or() =>
>>> running export "i32.atomic.rmw8_u.or":
#0. 8081: V:0  | i32.const $1
#0. 8086: V:1  | i32.const $2
#0. 8091: V:2  | i32.atomic.rmw8_u.or $0:1+$3, 2
#0. 8101: V:1  | drop
#0. 8102: V:0  | return
i32.atomic.rmw8_u.or() =>
>>> running export "i32.atomic.rmw16_u.or":
#0. 8103: V:0  | i32.const $1
#0. 8108: V:1  | i32.const $2
#0. 8113: V:2  | i32.atomic.rmw16_u.or $0:1+$3, 2
#0. 8123: V:1  | drop
#0. 8124: V:0  | return
i32.atomic.rmw16_u.or() =>
>>> running export "i64.atomic.rmw8_u.or":
#0. 8125: V:0  | i32.const $1
#0. 8130: V:1  | i64.const $2
#0. 8139: V:2  | i64.atomic.rmw8_u.or $0:1+$3, 2
#0. 8149: V:1  | drop
#0. 8150: V:0  | return
i64.atomic.rmw8_u.or() =>
>>> running export "i64.atomic.rmw16_u.or":
#0. 8151: V:0  | i32.const $1
#0. 8156: V:1  | i64.const $2
#0. 8165: V:2  | i64.atomic.rmw16_u.or $0:1+$3, 2
#0. 8175: V:1  | drop
#0. 8176: V:0  | return
i64.atomic.rmw16_u.or() =>
>>> running export "i64.atomic.rmw32_u.or":
#0. 8177: V:0  | i32.const $1
#0. 8182: V:1  | i64.const $2
#0. 8191: V:2  | i64.atomic.rmw32_u.or $0:1+$3, 2
#0. 8201: V:1  | drop
#0. 8202: V:0  | return
i64.atomic.rmw32_u.or() =>
>>> running export "i32.atomic.rmw.xor":
#0. 8203: V:0  | i32.const $1
#0. 8208: V:1  | i32.const $2
#0. 8213: V:2  | i32.atomic.rmw.xor $0:1+$3, 2
#0. 8223: V:1  | drop
#0. 8224: V:0  | return
i32.atomic.rmw.xor() =>
>>> running export "i64.atomic.rmw.xor":
#0. 8225: V:0  | i32.const $1
#0. 8230: V:1  | i64.const $2
#0. 8239: V:2  | i64.atomic.rmw.xor $0:1+$7, 2
#0. 8249: V:1  | drop
#0. 8250: V:0  | return
i64.atomic.rmw.xor() =>
>>> running export "i32.atomic.rmw8_u.xor":
#0. 8251: V:0  | i32.const $1
#0. 8256: V:1  | i32.const $2
#0. 8261: V:2  | i32.atomic.rmw8_u.xor $0:1+$3, 2
#0. 8271: V:1  | drop
#0. 8272: V:0  | return
i32.atomic.rmw8_u.xor() =>
>>> running export "i32.atomic.rmw16_u.xor":
#0. 8273: V:0  | i32.const $1
#0. 8278: V:1  | i32.const $2
#0. 8283: V:2  | i32.atomic.rmw16_u.xor $0:1+$3, 2
#0. 8293: V:1  | drop
#0. 8294: V:0  | return
i32.atomic.rmw16_u.xor() =>
>>> running export "i64.atomic.rmw8_u.xor":
#0. 8295: V:0  | i32.const $1
#0. 8300: V:1  | i64.const $2
#0. 8309: V:2  | i64.atomic.rmw8_u.xor $0:1+$3, 2
#0. 8319: V:1  | drop
#0. 8320: V:0  | return
i64.atomic.rmw8_u.xor() =>
>>> running export "i64.atomic.rmw16_u.xor":
#0. 8321: V:0  | i32.const $1
#0. 8326: V:1  | i64.const $2
#0. 8335: V:2  | i64.atomic.rmw16_u.xor $0:1+$3, 2
#0. 8345: V:1  | drop
#0. 8346: V:0  | return
i64.atomic.rmw16_u.xor() =>
>>> running export "i64.atomic.rmw32_u.xor":
#0. 8347: V:0  | i32.const $1
#0. 8352: V:1  | i64.const $2
#0. 8361: V:2  | i64.atomic.rmw32_u.xor $0:1+$3, 2
#0. 8371: V:1  | drop
#0. 8372: V:0  | return
i64.atomic.rmw32_u.xor() =>
>>> running export "i32.atomic.rmw.xchg":
#0. 8373: V:0  | i32.const $1
#0. 8378: V:1  | i32.const $2
#0. 8383: V:2  | i32.atomic.rmw.xchg $0:1+$3, 2
#0. 8393: V:1  | drop
#0. 8394: V:0  | return
i32.atomic.rmw.xchg() =>
>>> running export "i64.atomic.rmw.xchg":
#0. 8395: V:0  | i32.const $1
#0. 8400: V:1  | i64.const $2
#0. 8409: V:2  | i64.atomic.rmw.xchg $0:1+$7, 2
#0. 8419: V:1  | drop
#0. 8420: V:0  | return
i64.atomic.rmw.xchg() =>
>>> running export "i32.atomic.rmw8_u.xchg":
#0. 8421: V:0  | i32.const $1
#0. 8426: V:1  | i32.const $2
#0. 8431: V:2  | i32.atomic.rmw8_u.xchg $0:1+$3, 2
#0. 8441: V:1  | drop
#0. 8442: V:0  | return
i32.atomic.rmw8_u.xchg() =>
>>> running export "i32.atomic.rmw16_u.xchg":
#0. 8443: V:0  | i32.const $1
#0. 8448: V:1  | i32.const $2
#0. 8453: V:2  | i32.atomic.rmw16_u.xchg $0:1+$3, 2
#0. 8463: V:1  | drop
#0. 8464: V:0  | return
i32.atomic.rmw16_u.xchg() =>
>>> running export "i64.atomic.rmw8_u.xchg":
#0. 8465: V:0  | i32.const $1
#0. 8470: V:1  | i64.const $2
#0. 8479: V:2  | i64.atomic.rmw8_u.xchg $0:1+$3, 2
#0. 8489: V:1  | drop
#0. 8490: V:0  | return
i64.atomic.rmw8_u.xchg() =>
>>> running export "i64.atomic.rmw16_u.xchg":
#0. 8491: V:0  | i32.const $1
#0. 8496: V:1  | i64.const $2
#0. 8505: V:2  | i64.atomic.rmw16_u.xchg $0:1+$3, 2
#0. 8515: V:1  | drop
#0. 8516: V:0  | return
i64.atomic.rmw16_u.xchg() =>
>>> running export "i64.atomic.rmw32_u.xchg":
#0. 8517: V:0  | i32.const $1
#0. 8522: V:1  | i64.const $2
#0. 8531: V:2  | i64.atomic.rmw32_u.xchg $0:1+$3, 2
#0. 8541: V:1  | drop
#0. 8542: V:0  | return
i64.atomic.rmw32_u.xchg() =>
>>> running export "i32.atomic.rmw.cmpxchg":
#0. 8543: V:0  | i32.const $1
#0. 8548: V:1  | i32.const $2
#0. 8553: V:2  | i32.const $3
#0. 8558: V:3  | i32.atomic.rmw.cmpxchg $0:1+$3, 2, 3
#0. 8568: V:1  | drop
#0. 8569: V:0  | return
i32.atomic.rmw.cmpxchg() =>
>>> running export "i64.atomic.rmw.cmpxchg":
#0. 8570: V:0  | i32.const $1
#0. 8575: V:1  | i64.const $2
#0. 8584: V:2  | i64.const $3
#0. 8593: V:3  | i64.atomic.rmw.cmpxchg $0:1+$7, 2, 3
#0. 8603: V:1  | drop
#0. 8604: V:0  | return
i64.atomic.rmw.cmpxchg() =>
>>> running export "i32.atomic.rmw8_u.cmpxchg":
#0. 8605: V:0  | i32.const $1
#0. 8610: V:1  | i32.const $2
#0. 8615: V:2  | i32.const $3
#0. 8620: V:3  | i32.atomic.rmw8_u.cmpxchg $0:1+$3, 2, 3
#0. 8630: V:1  | drop
#0. 8631: V:0  | return
i32.atomic.rmw8_u.cmpxchg() =>
>>> running export "i32.atomic.rmw16_u.cmpxchg":
#0. 8632: V:0  | i32.const $1
#0. 8637: V:1  | i32.const $2
#0. 8642: V:2  | i32.const $3
#0. 8647: V:3  | i32.atomic.rmw16_u.cmpxchg $0:1+$3, 2, 3
#0. 8657: V:1  | drop
#0. 8658: V:0  | return
i32.atomic.rmw16_u.cmpxchg() =>
>>> running export "i64.atomic.rmw8_u.cmpxchg":
#0. 8659: V:0  | i32.const $1
#0. 8664: V:1  | i64.const $2
#0. 8673: V:2  | i64.const $3
#0. 8682: V:3  | i64.atomic.rmw8_u.cmpxchg $0:1+$3, 2, 3
#0. 8692: V:1  | drop
#0. 8693: V:0  | return
i64.atomic.rmw8_u.cmpxchg() =>
>>> running export "i64.atomic.rmw16_u.cmpxchg":
#0. 8694: V:0  | i32.const $1
#0. 8699: V:1  | i64.const $2
#0. 8708: V:2  | i64.const $3
#0. 8717: V:3  | i64.atomic.rmw16_u.cmpxchg $0:1+$3, 2, 3
#0. 8727: V:1  | drop
#0. 8728: V:0  | return
i64.atomic.rmw16_u.cmpxchg() =>
>>> running export "i64.atomic.rmw32_u.cmpxchg":
#0. 8729: V:0  | i32.const $1
#0. 8734: V:1  | i64.const $2
#0. 8743: V:2  | i64.const $3
#0. 8752: V:3  | i64.atomic.rmw32_u.cmpxchg $0:1+$3, 2, 3
#0. 8762: V:1  | drop
#0. 8763: V:0  | return
i64.atomic.rmw32_u.cmpxchg() =>
;;; STDOUT ;;)
