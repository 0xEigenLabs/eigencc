;;; TOOL: run-interp
;;; ARGS*: -v --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd
;;; ARGS1: --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))
  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) (func (export "data") i32.const 1 br_table 0)
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.const") v128.const i32 1 1 1 1 drop)
  (; 0xfd 0x01 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x02 ;) (func (export "v128.store") i32.const 1 v128.const i32 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x03 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x04 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x05 ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x06 ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x07 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x08 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x09 ;) (func (export "i8x16.extract_lane_s") v128.const i32 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x0a ;) (func (export "i8x16.extract_lane_u") v128.const i32 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.extract_lane_s") v128.const i32 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0c ;) (func (export "i16x8.extract_lane_u") v128.const i32 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i64x2.extract_lane") v128.const i32 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x0f ;) (func (export "f32x4.extract_lane") v128.const i32 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x10 ;) (func (export "f64x2.extract_lane") v128.const i32 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i8x16.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x12 ;) (func (export "i16x8.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x13 ;) (func (export "i32x4.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "i64x2.replace_lane") v128.const i32 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x15 ;) (func (export "f32x4.replace_lane") v128.const i32 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.replace_lane") v128.const i32 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "v8x16.shuffle") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v8x16.shuffle 1 1 1 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x19 ;) (func (export "i16x8.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x1a ;) (func (export "i32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x1b ;) (func (export "i64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x1d ;) (func (export "i16x8.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x1e ;) (func (export "i32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x1f ;) (func (export "i64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x21 ;) (func (export "i16x8.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x22 ;) (func (export "i32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x23 ;) (func (export "i8x16.neg") v128.const i32 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.neg") v128.const i32 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x25 ;) (func (export "i32x4.neg") v128.const i32 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x26 ;) (func (export "i64x2.neg") v128.const i32 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x27 ;) (func (export "i8x16.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x28 ;) (func (export "i8x16.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x2b ;) (func (export "i8x16.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x2c ;) (func (export "i8x16.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x2d ;) (func (export "i16x8.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x2e ;) (func (export "i16x8.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x2f ;) (func (export "i8x16.shl") v128.const i32 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x30 ;) (func (export "i16x8.shl") v128.const i32 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.shl") v128.const i32 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x32 ;) (func (export "i64x2.shl") v128.const i32 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x33 ;) (func (export "i8x16.shr_s") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x34 ;) (func (export "i8x16.shr_u") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x35 ;) (func (export "i16x8.shr_s") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x36 ;) (func (export "i16x8.shr_u") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x37 ;) (func (export "i32x4.shr_s") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x38 ;) (func (export "i32x4.shr_u") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x39 ;) (func (export "i64x2.shr_s") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x3a ;) (func (export "i64x2.shr_u") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x3b ;) (func (export "v128.and") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.and drop)
  (; 0xfd 0x3c ;) (func (export "v128.or") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.or drop)
  (; 0xfd 0x3d ;) (func (export "v128.xor") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.xor drop)
  (; 0xfd 0x3e ;) (func (export "v128.not") v128.const i32 1 1 1 1 v128.not drop)
  (; 0xfd 0x3f ;) (func (export "v128.bitselect") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.const i32 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x40 ;) (func (export "i8x16.any_true") v128.const i32 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x41 ;) (func (export "i16x8.any_true") v128.const i32 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x42 ;) (func (export "i32x4.any_true") v128.const i32 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x43 ;) (func (export "i64x2.any_true") v128.const i32 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x44 ;) (func (export "i8x16.all_true") v128.const i32 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x45 ;) (func (export "i16x8.all_true") v128.const i32 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x46 ;) (func (export "i32x4.all_true") v128.const i32 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x47 ;) (func (export "i64x2.all_true") v128.const i32 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x48 ;) (func (export "i8x16.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x49 ;) (func (export "i16x8.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x4a ;) (func (export "i32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x4b ;) (func (export "f32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x4c ;) (func (export "f64x2.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x4d ;) (func (export "i8x16.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x4e ;) (func (export "i16x8.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x4f ;) (func (export "i32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x50 ;) (func (export "f32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x51 ;) (func (export "f64x2.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x54 ;) (func (export "i16x8.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x55 ;) (func (export "i16x8.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x56 ;) (func (export "i32x4.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x57 ;) (func (export "i32x4.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x58 ;) (func (export "f32x4.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x59 ;) (func (export "f64x2.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x5c ;) (func (export "i16x8.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x5d ;) (func (export "i16x8.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x5e ;) (func (export "i32x4.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x5f ;) (func (export "i32x4.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x60 ;) (func (export "f32x4.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x61 ;) (func (export "f64x2.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x62 ;) (func (export "i8x16.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x63 ;) (func (export "i8x16.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x66 ;) (func (export "i32x4.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x67 ;) (func (export "i32x4.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x68 ;) (func (export "f32x4.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x69 ;) (func (export "f64x2.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x6a ;) (func (export "i8x16.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x6b ;) (func (export "i8x16.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x6e ;) (func (export "i32x4.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x6f ;) (func (export "i32x4.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x70 ;) (func (export "f32x4.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x71 ;) (func (export "f64x2.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x72 ;) (func (export "f32x4.neg") v128.const i32 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x73 ;) (func (export "f64x2.neg") v128.const i32 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0x74 ;) (func (export "f32x4.abs") v128.const i32 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x75 ;) (func (export "f64x2.abs") v128.const i32 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0x76 ;) (func (export "f32x4.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x77 ;) (func (export "f64x2.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.min drop)
  (; 0xfd 0x78 ;) (func (export "f32x4.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.max drop)
  (; 0xfd 0x79 ;) (func (export "f64x2.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.max drop)
  (; 0xfd 0x7a ;) (func (export "f32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x7b ;) (func (export "f64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.add drop)
  (; 0xfd 0x7c ;) (func (export "f32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x7d ;) (func (export "f64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0x7e ;) (func (export "f32x4.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x7f ;) (func (export "f64x2.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.div drop)
  (; 0xfd 0x80 ;) (func (export "f32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x81 ;) (func (export "f64x2.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0x82 ;) (func (export "f32x4.sqrt") v128.const i32 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x83 ;) (func (export "f64x2.sqrt") v128.const i32 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0x84 ;) (func (export "f32x4.convert_s/i32x4") v128.const i32 1 1 1 1 f32x4.convert_s/i32x4 drop)
  (; 0xfd 0x85 ;) (func (export "f32x4.convert_u/i32x4") v128.const i32 1 1 1 1 f32x4.convert_u/i32x4 drop)
  (; 0xfd 0x86 ;) (func (export "f64x2.convert_s/i64x2") v128.const i32 1 1 1 1 f64x2.convert_s/i64x2 drop)
  (; 0xfd 0x87 ;) (func (export "f64x2.convert_u/i64x2") v128.const i32 1 1 1 1 f64x2.convert_u/i64x2 drop)
  (; 0xfd 0x88 ;) (func (export "i32x4.trunc_s/f32x4:sat") v128.const i32 1 1 1 1 i32x4.trunc_s/f32x4:sat drop)
  (; 0xfd 0x89 ;) (func (export "i32x4.trunc_u/f32x4:sat") v128.const i32 1 1 1 1 i32x4.trunc_u/f32x4:sat drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.trunc_s/f64x2:sat") v128.const i32 1 1 1 1 i64x2.trunc_s/f64x2:sat drop)
  (; 0xfd 0x8b ;) (func (export "i64x2.trunc_u/f64x2:sat") v128.const i32 1 1 1 1 i64x2.trunc_u/f64x2:sat drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.wake") i32.const 1 i32.const 2 atomic.wake offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8_u.add") i32.const 1 i32.const 2 i32.atomic.rmw8_u.add offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16_u.add") i32.const 1 i32.const 2 i32.atomic.rmw16_u.add offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8_u.add") i32.const 1 i64.const 2 i64.atomic.rmw8_u.add offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16_u.add") i32.const 1 i64.const 2 i64.atomic.rmw16_u.add offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32_u.add") i32.const 1 i64.const 2 i64.atomic.rmw32_u.add offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8_u.sub") i32.const 1 i32.const 2 i32.atomic.rmw8_u.sub offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16_u.sub") i32.const 1 i32.const 2 i32.atomic.rmw16_u.sub offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw8_u.sub offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw16_u.sub offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32_u.sub") i32.const 1 i64.const 2 i64.atomic.rmw32_u.sub offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8_u.and") i32.const 1 i32.const 2 i32.atomic.rmw8_u.and offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16_u.and") i32.const 1 i32.const 2 i32.atomic.rmw16_u.and offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8_u.and") i32.const 1 i64.const 2 i64.atomic.rmw8_u.and offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16_u.and") i32.const 1 i64.const 2 i64.atomic.rmw16_u.and offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32_u.and") i32.const 1 i64.const 2 i64.atomic.rmw32_u.and offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8_u.or") i32.const 1 i32.const 2 i32.atomic.rmw8_u.or offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16_u.or") i32.const 1 i32.const 2 i32.atomic.rmw16_u.or offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8_u.or") i32.const 1 i64.const 2 i64.atomic.rmw8_u.or offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16_u.or") i32.const 1 i64.const 2 i64.atomic.rmw16_u.or offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32_u.or") i32.const 1 i64.const 2 i64.atomic.rmw32_u.or offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8_u.xor") i32.const 1 i32.const 2 i32.atomic.rmw8_u.xor offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16_u.xor") i32.const 1 i32.const 2 i32.atomic.rmw16_u.xor offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw8_u.xor offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw16_u.xor offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32_u.xor") i32.const 1 i64.const 2 i64.atomic.rmw32_u.xor offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8_u.xchg") i32.const 1 i32.const 2 i32.atomic.rmw8_u.xchg offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16_u.xchg") i32.const 1 i32.const 2 i32.atomic.rmw16_u.xchg offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw8_u.xchg offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw16_u.xchg offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32_u.xchg") i32.const 1 i64.const 2 i64.atomic.rmw32_u.xchg offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8_u.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16_u.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16_u.cmpxchg offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32_u.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32_u.cmpxchg offset=3 drop)
)

(;; STDOUT ;;;
0000000: 0061 736d                                 ; WASM_BINARY_MAGIC
0000004: 0100 0000                                 ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 02                                        ; num types
; type 0
000000b: 60                                        ; func
000000c: 00                                        ; num params
000000d: 00                                        ; num results
; type 1
000000e: 60                                        ; func
000000f: 01                                        ; num params
0000010: 7f                                        ; i32
0000011: 00                                        ; num results
0000009: 08                                        ; FIXUP section size
; section "Import" (2)
0000012: 02                                        ; section code
0000013: 00                                        ; section size (guess)
0000014: 01                                        ; num imports
; import header 0
0000015: 04                                        ; string length
0000016: 686f 7374                                host  ; import module name
000001a: 05                                        ; string length
000001b: 7072 696e 74                             print  ; import field name
0000020: 00                                        ; import kind
0000021: 01                                        ; import signature index
0000013: 0e                                        ; FIXUP section size
; section "Function" (3)
0000022: 03                                        ; section code
0000023: 00                                        ; section size (guess)
0000024: 8603                                      ; num functions
0000026: 00                                        ; function 0 signature index
0000027: 00                                        ; function 1 signature index
0000028: 00                                        ; function 2 signature index
0000029: 00                                        ; function 3 signature index
000002a: 00                                        ; function 4 signature index
000002b: 00                                        ; function 5 signature index
000002c: 00                                        ; function 6 signature index
000002d: 00                                        ; function 7 signature index
000002e: 00                                        ; function 8 signature index
000002f: 00                                        ; function 9 signature index
0000030: 00                                        ; function 10 signature index
0000031: 00                                        ; function 11 signature index
0000032: 00                                        ; function 12 signature index
0000033: 00                                        ; function 13 signature index
0000034: 00                                        ; function 14 signature index
0000035: 00                                        ; function 15 signature index
0000036: 00                                        ; function 16 signature index
0000037: 00                                        ; function 17 signature index
0000038: 00                                        ; function 18 signature index
0000039: 00                                        ; function 19 signature index
000003a: 00                                        ; function 20 signature index
000003b: 00                                        ; function 21 signature index
000003c: 00                                        ; function 22 signature index
000003d: 00                                        ; function 23 signature index
000003e: 00                                        ; function 24 signature index
000003f: 00                                        ; function 25 signature index
0000040: 00                                        ; function 26 signature index
0000041: 00                                        ; function 27 signature index
0000042: 00                                        ; function 28 signature index
0000043: 00                                        ; function 29 signature index
0000044: 00                                        ; function 30 signature index
0000045: 00                                        ; function 31 signature index
0000046: 00                                        ; function 32 signature index
0000047: 00                                        ; function 33 signature index
0000048: 00                                        ; function 34 signature index
0000049: 00                                        ; function 35 signature index
000004a: 00                                        ; function 36 signature index
000004b: 00                                        ; function 37 signature index
000004c: 00                                        ; function 38 signature index
000004d: 00                                        ; function 39 signature index
000004e: 00                                        ; function 40 signature index
000004f: 00                                        ; function 41 signature index
0000050: 00                                        ; function 42 signature index
0000051: 00                                        ; function 43 signature index
0000052: 00                                        ; function 44 signature index
0000053: 00                                        ; function 45 signature index
0000054: 00                                        ; function 46 signature index
0000055: 00                                        ; function 47 signature index
0000056: 00                                        ; function 48 signature index
0000057: 00                                        ; function 49 signature index
0000058: 00                                        ; function 50 signature index
0000059: 00                                        ; function 51 signature index
000005a: 00                                        ; function 52 signature index
000005b: 00                                        ; function 53 signature index
000005c: 00                                        ; function 54 signature index
000005d: 00                                        ; function 55 signature index
000005e: 00                                        ; function 56 signature index
000005f: 00                                        ; function 57 signature index
0000060: 00                                        ; function 58 signature index
0000061: 00                                        ; function 59 signature index
0000062: 00                                        ; function 60 signature index
0000063: 00                                        ; function 61 signature index
0000064: 00                                        ; function 62 signature index
0000065: 00                                        ; function 63 signature index
0000066: 00                                        ; function 64 signature index
0000067: 00                                        ; function 65 signature index
0000068: 00                                        ; function 66 signature index
0000069: 00                                        ; function 67 signature index
000006a: 00                                        ; function 68 signature index
000006b: 00                                        ; function 69 signature index
000006c: 00                                        ; function 70 signature index
000006d: 00                                        ; function 71 signature index
000006e: 00                                        ; function 72 signature index
000006f: 00                                        ; function 73 signature index
0000070: 00                                        ; function 74 signature index
0000071: 00                                        ; function 75 signature index
0000072: 00                                        ; function 76 signature index
0000073: 00                                        ; function 77 signature index
0000074: 00                                        ; function 78 signature index
0000075: 00                                        ; function 79 signature index
0000076: 00                                        ; function 80 signature index
0000077: 00                                        ; function 81 signature index
0000078: 00                                        ; function 82 signature index
0000079: 00                                        ; function 83 signature index
000007a: 00                                        ; function 84 signature index
000007b: 00                                        ; function 85 signature index
000007c: 00                                        ; function 86 signature index
000007d: 00                                        ; function 87 signature index
000007e: 00                                        ; function 88 signature index
000007f: 00                                        ; function 89 signature index
0000080: 00                                        ; function 90 signature index
0000081: 00                                        ; function 91 signature index
0000082: 00                                        ; function 92 signature index
0000083: 00                                        ; function 93 signature index
0000084: 00                                        ; function 94 signature index
0000085: 00                                        ; function 95 signature index
0000086: 00                                        ; function 96 signature index
0000087: 00                                        ; function 97 signature index
0000088: 00                                        ; function 98 signature index
0000089: 00                                        ; function 99 signature index
000008a: 00                                        ; function 100 signature index
000008b: 00                                        ; function 101 signature index
000008c: 00                                        ; function 102 signature index
000008d: 00                                        ; function 103 signature index
000008e: 00                                        ; function 104 signature index
000008f: 00                                        ; function 105 signature index
0000090: 00                                        ; function 106 signature index
0000091: 00                                        ; function 107 signature index
0000092: 00                                        ; function 108 signature index
0000093: 00                                        ; function 109 signature index
0000094: 00                                        ; function 110 signature index
0000095: 00                                        ; function 111 signature index
0000096: 00                                        ; function 112 signature index
0000097: 00                                        ; function 113 signature index
0000098: 00                                        ; function 114 signature index
0000099: 00                                        ; function 115 signature index
000009a: 00                                        ; function 116 signature index
000009b: 00                                        ; function 117 signature index
000009c: 00                                        ; function 118 signature index
000009d: 00                                        ; function 119 signature index
000009e: 00                                        ; function 120 signature index
000009f: 00                                        ; function 121 signature index
00000a0: 00                                        ; function 122 signature index
00000a1: 00                                        ; function 123 signature index
00000a2: 00                                        ; function 124 signature index
00000a3: 00                                        ; function 125 signature index
00000a4: 00                                        ; function 126 signature index
00000a5: 00                                        ; function 127 signature index
00000a6: 00                                        ; function 128 signature index
00000a7: 00                                        ; function 129 signature index
00000a8: 00                                        ; function 130 signature index
00000a9: 00                                        ; function 131 signature index
00000aa: 00                                        ; function 132 signature index
00000ab: 00                                        ; function 133 signature index
00000ac: 00                                        ; function 134 signature index
00000ad: 00                                        ; function 135 signature index
00000ae: 00                                        ; function 136 signature index
00000af: 00                                        ; function 137 signature index
00000b0: 00                                        ; function 138 signature index
00000b1: 00                                        ; function 139 signature index
00000b2: 00                                        ; function 140 signature index
00000b3: 00                                        ; function 141 signature index
00000b4: 00                                        ; function 142 signature index
00000b5: 00                                        ; function 143 signature index
00000b6: 00                                        ; function 144 signature index
00000b7: 00                                        ; function 145 signature index
00000b8: 00                                        ; function 146 signature index
00000b9: 00                                        ; function 147 signature index
00000ba: 00                                        ; function 148 signature index
00000bb: 00                                        ; function 149 signature index
00000bc: 00                                        ; function 150 signature index
00000bd: 00                                        ; function 151 signature index
00000be: 00                                        ; function 152 signature index
00000bf: 00                                        ; function 153 signature index
00000c0: 00                                        ; function 154 signature index
00000c1: 00                                        ; function 155 signature index
00000c2: 00                                        ; function 156 signature index
00000c3: 00                                        ; function 157 signature index
00000c4: 00                                        ; function 158 signature index
00000c5: 00                                        ; function 159 signature index
00000c6: 00                                        ; function 160 signature index
00000c7: 00                                        ; function 161 signature index
00000c8: 00                                        ; function 162 signature index
00000c9: 00                                        ; function 163 signature index
00000ca: 00                                        ; function 164 signature index
00000cb: 00                                        ; function 165 signature index
00000cc: 00                                        ; function 166 signature index
00000cd: 00                                        ; function 167 signature index
00000ce: 00                                        ; function 168 signature index
00000cf: 00                                        ; function 169 signature index
00000d0: 00                                        ; function 170 signature index
00000d1: 00                                        ; function 171 signature index
00000d2: 00                                        ; function 172 signature index
00000d3: 00                                        ; function 173 signature index
00000d4: 00                                        ; function 174 signature index
00000d5: 00                                        ; function 175 signature index
00000d6: 00                                        ; function 176 signature index
00000d7: 00                                        ; function 177 signature index
00000d8: 00                                        ; function 178 signature index
00000d9: 00                                        ; function 179 signature index
00000da: 00                                        ; function 180 signature index
00000db: 00                                        ; function 181 signature index
00000dc: 00                                        ; function 182 signature index
00000dd: 00                                        ; function 183 signature index
00000de: 00                                        ; function 184 signature index
00000df: 00                                        ; function 185 signature index
00000e0: 00                                        ; function 186 signature index
00000e1: 00                                        ; function 187 signature index
00000e2: 00                                        ; function 188 signature index
00000e3: 00                                        ; function 189 signature index
00000e4: 00                                        ; function 190 signature index
00000e5: 00                                        ; function 191 signature index
00000e6: 00                                        ; function 192 signature index
00000e7: 00                                        ; function 193 signature index
00000e8: 00                                        ; function 194 signature index
00000e9: 00                                        ; function 195 signature index
00000ea: 00                                        ; function 196 signature index
00000eb: 00                                        ; function 197 signature index
00000ec: 00                                        ; function 198 signature index
00000ed: 00                                        ; function 199 signature index
00000ee: 00                                        ; function 200 signature index
00000ef: 00                                        ; function 201 signature index
00000f0: 00                                        ; function 202 signature index
00000f1: 00                                        ; function 203 signature index
00000f2: 00                                        ; function 204 signature index
00000f3: 00                                        ; function 205 signature index
00000f4: 00                                        ; function 206 signature index
00000f5: 00                                        ; function 207 signature index
00000f6: 00                                        ; function 208 signature index
00000f7: 00                                        ; function 209 signature index
00000f8: 00                                        ; function 210 signature index
00000f9: 00                                        ; function 211 signature index
00000fa: 00                                        ; function 212 signature index
00000fb: 00                                        ; function 213 signature index
00000fc: 00                                        ; function 214 signature index
00000fd: 00                                        ; function 215 signature index
00000fe: 00                                        ; function 216 signature index
00000ff: 00                                        ; function 217 signature index
0000100: 00                                        ; function 218 signature index
0000101: 00                                        ; function 219 signature index
0000102: 00                                        ; function 220 signature index
0000103: 00                                        ; function 221 signature index
0000104: 00                                        ; function 222 signature index
0000105: 00                                        ; function 223 signature index
0000106: 00                                        ; function 224 signature index
0000107: 00                                        ; function 225 signature index
0000108: 00                                        ; function 226 signature index
0000109: 00                                        ; function 227 signature index
000010a: 00                                        ; function 228 signature index
000010b: 00                                        ; function 229 signature index
000010c: 00                                        ; function 230 signature index
000010d: 00                                        ; function 231 signature index
000010e: 00                                        ; function 232 signature index
000010f: 00                                        ; function 233 signature index
0000110: 00                                        ; function 234 signature index
0000111: 00                                        ; function 235 signature index
0000112: 00                                        ; function 236 signature index
0000113: 00                                        ; function 237 signature index
0000114: 00                                        ; function 238 signature index
0000115: 00                                        ; function 239 signature index
0000116: 00                                        ; function 240 signature index
0000117: 00                                        ; function 241 signature index
0000118: 00                                        ; function 242 signature index
0000119: 00                                        ; function 243 signature index
000011a: 00                                        ; function 244 signature index
000011b: 00                                        ; function 245 signature index
000011c: 00                                        ; function 246 signature index
000011d: 00                                        ; function 247 signature index
000011e: 00                                        ; function 248 signature index
000011f: 00                                        ; function 249 signature index
0000120: 00                                        ; function 250 signature index
0000121: 00                                        ; function 251 signature index
0000122: 00                                        ; function 252 signature index
0000123: 00                                        ; function 253 signature index
0000124: 00                                        ; function 254 signature index
0000125: 00                                        ; function 255 signature index
0000126: 00                                        ; function 256 signature index
0000127: 00                                        ; function 257 signature index
0000128: 00                                        ; function 258 signature index
0000129: 00                                        ; function 259 signature index
000012a: 00                                        ; function 260 signature index
000012b: 00                                        ; function 261 signature index
000012c: 00                                        ; function 262 signature index
000012d: 00                                        ; function 263 signature index
000012e: 00                                        ; function 264 signature index
000012f: 00                                        ; function 265 signature index
0000130: 00                                        ; function 266 signature index
0000131: 00                                        ; function 267 signature index
0000132: 00                                        ; function 268 signature index
0000133: 00                                        ; function 269 signature index
0000134: 00                                        ; function 270 signature index
0000135: 00                                        ; function 271 signature index
0000136: 00                                        ; function 272 signature index
0000137: 00                                        ; function 273 signature index
0000138: 00                                        ; function 274 signature index
0000139: 00                                        ; function 275 signature index
000013a: 00                                        ; function 276 signature index
000013b: 00                                        ; function 277 signature index
000013c: 00                                        ; function 278 signature index
000013d: 00                                        ; function 279 signature index
000013e: 00                                        ; function 280 signature index
000013f: 00                                        ; function 281 signature index
0000140: 00                                        ; function 282 signature index
0000141: 00                                        ; function 283 signature index
0000142: 00                                        ; function 284 signature index
0000143: 00                                        ; function 285 signature index
0000144: 00                                        ; function 286 signature index
0000145: 00                                        ; function 287 signature index
0000146: 00                                        ; function 288 signature index
0000147: 00                                        ; function 289 signature index
0000148: 00                                        ; function 290 signature index
0000149: 00                                        ; function 291 signature index
000014a: 00                                        ; function 292 signature index
000014b: 00                                        ; function 293 signature index
000014c: 00                                        ; function 294 signature index
000014d: 00                                        ; function 295 signature index
000014e: 00                                        ; function 296 signature index
000014f: 00                                        ; function 297 signature index
0000150: 00                                        ; function 298 signature index
0000151: 00                                        ; function 299 signature index
0000152: 00                                        ; function 300 signature index
0000153: 00                                        ; function 301 signature index
0000154: 00                                        ; function 302 signature index
0000155: 00                                        ; function 303 signature index
0000156: 00                                        ; function 304 signature index
0000157: 00                                        ; function 305 signature index
0000158: 00                                        ; function 306 signature index
0000159: 00                                        ; function 307 signature index
000015a: 00                                        ; function 308 signature index
000015b: 00                                        ; function 309 signature index
000015c: 00                                        ; function 310 signature index
000015d: 00                                        ; function 311 signature index
000015e: 00                                        ; function 312 signature index
000015f: 00                                        ; function 313 signature index
0000160: 00                                        ; function 314 signature index
0000161: 00                                        ; function 315 signature index
0000162: 00                                        ; function 316 signature index
0000163: 00                                        ; function 317 signature index
0000164: 00                                        ; function 318 signature index
0000165: 00                                        ; function 319 signature index
0000166: 00                                        ; function 320 signature index
0000167: 00                                        ; function 321 signature index
0000168: 00                                        ; function 322 signature index
0000169: 00                                        ; function 323 signature index
000016a: 00                                        ; function 324 signature index
000016b: 00                                        ; function 325 signature index
000016c: 00                                        ; function 326 signature index
000016d: 00                                        ; function 327 signature index
000016e: 00                                        ; function 328 signature index
000016f: 00                                        ; function 329 signature index
0000170: 00                                        ; function 330 signature index
0000171: 00                                        ; function 331 signature index
0000172: 00                                        ; function 332 signature index
0000173: 00                                        ; function 333 signature index
0000174: 00                                        ; function 334 signature index
0000175: 00                                        ; function 335 signature index
0000176: 00                                        ; function 336 signature index
0000177: 00                                        ; function 337 signature index
0000178: 00                                        ; function 338 signature index
0000179: 00                                        ; function 339 signature index
000017a: 00                                        ; function 340 signature index
000017b: 00                                        ; function 341 signature index
000017c: 00                                        ; function 342 signature index
000017d: 00                                        ; function 343 signature index
000017e: 00                                        ; function 344 signature index
000017f: 00                                        ; function 345 signature index
0000180: 00                                        ; function 346 signature index
0000181: 00                                        ; function 347 signature index
0000182: 00                                        ; function 348 signature index
0000183: 00                                        ; function 349 signature index
0000184: 00                                        ; function 350 signature index
0000185: 00                                        ; function 351 signature index
0000186: 00                                        ; function 352 signature index
0000187: 00                                        ; function 353 signature index
0000188: 00                                        ; function 354 signature index
0000189: 00                                        ; function 355 signature index
000018a: 00                                        ; function 356 signature index
000018b: 00                                        ; function 357 signature index
000018c: 00                                        ; function 358 signature index
000018d: 00                                        ; function 359 signature index
000018e: 00                                        ; function 360 signature index
000018f: 00                                        ; function 361 signature index
0000190: 00                                        ; function 362 signature index
0000191: 00                                        ; function 363 signature index
0000192: 00                                        ; function 364 signature index
0000193: 00                                        ; function 365 signature index
0000194: 00                                        ; function 366 signature index
0000195: 00                                        ; function 367 signature index
0000196: 00                                        ; function 368 signature index
0000197: 00                                        ; function 369 signature index
0000198: 00                                        ; function 370 signature index
0000199: 00                                        ; function 371 signature index
000019a: 00                                        ; function 372 signature index
000019b: 00                                        ; function 373 signature index
000019c: 00                                        ; function 374 signature index
000019d: 00                                        ; function 375 signature index
000019e: 00                                        ; function 376 signature index
000019f: 00                                        ; function 377 signature index
00001a0: 00                                        ; function 378 signature index
00001a1: 00                                        ; function 379 signature index
00001a2: 00                                        ; function 380 signature index
00001a3: 00                                        ; function 381 signature index
00001a4: 00                                        ; function 382 signature index
00001a5: 00                                        ; function 383 signature index
00001a6: 00                                        ; function 384 signature index
00001a7: 00                                        ; function 385 signature index
00001a8: 00                                        ; function 386 signature index
00001a9: 00                                        ; function 387 signature index
00001aa: 00                                        ; function 388 signature index
00001ab: 00                                        ; function 389 signature index
; move data: [24, 1ac) -> [25, 1ad)
0000023: 8803                                      ; FIXUP section size
; section "Table" (4)
00001ad: 04                                        ; section code
00001ae: 00                                        ; section size (guess)
00001af: 01                                        ; num tables
; table 0
00001b0: 70                                        ; anyfunc
00001b1: 01                                        ; limits: flags
00001b2: 02                                        ; limits: initial
00001b3: 02                                        ; limits: max
00001ae: 05                                        ; FIXUP section size
; section "Memory" (5)
00001b4: 05                                        ; section code
00001b5: 00                                        ; section size (guess)
00001b6: 01                                        ; num memories
; memory 0
00001b7: 03                                        ; limits: flags
00001b8: 01                                        ; limits: initial
00001b9: 01                                        ; limits: max
00001b5: 04                                        ; FIXUP section size
; section "Global" (6)
00001ba: 06                                        ; section code
00001bb: 00                                        ; section size (guess)
00001bc: 01                                        ; num globals
00001bd: 7f                                        ; i32
00001be: 01                                        ; global mutability
00001bf: 41                                        ; i32.const
00001c0: 00                                        ; i32 literal
00001c1: 0b                                        ; end
00001bb: 06                                        ; FIXUP section size
; section "Export" (7)
00001c2: 07                                        ; section code
00001c3: 00                                        ; section size (guess)
00001c4: 8503                                      ; num exports
00001c6: 0b                                        ; string length
00001c7: 756e 7265 6163 6861 626c 65              unreachable  ; export name
00001d2: 00                                        ; export kind
00001d3: 02                                        ; export func index
00001d4: 02                                        ; string length
00001d5: 6272                                     br  ; export name
00001d7: 00                                        ; export kind
00001d8: 03                                        ; export func index
00001d9: 08                                        ; string length
00001da: 6272 5f74 6162 6c65                      br_table  ; export name
00001e2: 00                                        ; export kind
00001e3: 04                                        ; export func index
00001e4: 06                                        ; string length
00001e5: 7265 7475 726e                           return  ; export name
00001eb: 00                                        ; export kind
00001ec: 05                                        ; export func index
00001ed: 04                                        ; string length
00001ee: 6361 6c6c                                call  ; export name
00001f2: 00                                        ; export kind
00001f3: 06                                        ; export func index
00001f4: 0d                                        ; string length
00001f5: 6361 6c6c 5f69 6e64 6972 6563 74         call_indirect  ; export name
0000202: 00                                        ; export kind
0000203: 07                                        ; export func index
0000204: 04                                        ; string length
0000205: 6472 6f70                                drop  ; export name
0000209: 00                                        ; export kind
000020a: 08                                        ; export func index
000020b: 06                                        ; string length
000020c: 7365 6c65 6374                           select  ; export name
0000212: 00                                        ; export kind
0000213: 09                                        ; export func index
0000214: 09                                        ; string length
0000215: 6765 745f 6c6f 6361 6c                   get_local  ; export name
000021e: 00                                        ; export kind
000021f: 0a                                        ; export func index
0000220: 09                                        ; string length
0000221: 7365 745f 6c6f 6361 6c                   set_local  ; export name
000022a: 00                                        ; export kind
000022b: 0b                                        ; export func index
000022c: 09                                        ; string length
000022d: 7465 655f 6c6f 6361 6c                   tee_local  ; export name
0000236: 00                                        ; export kind
0000237: 0c                                        ; export func index
0000238: 0a                                        ; string length
0000239: 6765 745f 676c 6f62 616c                 get_global  ; export name
0000243: 00                                        ; export kind
0000244: 0d                                        ; export func index
0000245: 0a                                        ; string length
0000246: 7365 745f 676c 6f62 616c                 set_global  ; export name
0000250: 00                                        ; export kind
0000251: 0e                                        ; export func index
0000252: 08                                        ; string length
0000253: 6933 322e 6c6f 6164                      i32.load  ; export name
000025b: 00                                        ; export kind
000025c: 0f                                        ; export func index
000025d: 08                                        ; string length
000025e: 6936 342e 6c6f 6164                      i64.load  ; export name
0000266: 00                                        ; export kind
0000267: 10                                        ; export func index
0000268: 08                                        ; string length
0000269: 6633 322e 6c6f 6164                      f32.load  ; export name
0000271: 00                                        ; export kind
0000272: 11                                        ; export func index
0000273: 08                                        ; string length
0000274: 6636 342e 6c6f 6164                      f64.load  ; export name
000027c: 00                                        ; export kind
000027d: 12                                        ; export func index
000027e: 0b                                        ; string length
000027f: 6933 322e 6c6f 6164 385f 73              i32.load8_s  ; export name
000028a: 00                                        ; export kind
000028b: 13                                        ; export func index
000028c: 0b                                        ; string length
000028d: 6933 322e 6c6f 6164 385f 75              i32.load8_u  ; export name
0000298: 00                                        ; export kind
0000299: 14                                        ; export func index
000029a: 0c                                        ; string length
000029b: 6933 322e 6c6f 6164 3136 5f73            i32.load16_s  ; export name
00002a7: 00                                        ; export kind
00002a8: 15                                        ; export func index
00002a9: 0c                                        ; string length
00002aa: 6933 322e 6c6f 6164 3136 5f75            i32.load16_u  ; export name
00002b6: 00                                        ; export kind
00002b7: 16                                        ; export func index
00002b8: 0b                                        ; string length
00002b9: 6936 342e 6c6f 6164 385f 73              i64.load8_s  ; export name
00002c4: 00                                        ; export kind
00002c5: 17                                        ; export func index
00002c6: 0b                                        ; string length
00002c7: 6936 342e 6c6f 6164 385f 75              i64.load8_u  ; export name
00002d2: 00                                        ; export kind
00002d3: 18                                        ; export func index
00002d4: 0c                                        ; string length
00002d5: 6936 342e 6c6f 6164 3136 5f73            i64.load16_s  ; export name
00002e1: 00                                        ; export kind
00002e2: 19                                        ; export func index
00002e3: 0c                                        ; string length
00002e4: 6936 342e 6c6f 6164 3136 5f75            i64.load16_u  ; export name
00002f0: 00                                        ; export kind
00002f1: 1a                                        ; export func index
00002f2: 0c                                        ; string length
00002f3: 6936 342e 6c6f 6164 3332 5f73            i64.load32_s  ; export name
00002ff: 00                                        ; export kind
0000300: 1b                                        ; export func index
0000301: 0c                                        ; string length
0000302: 6936 342e 6c6f 6164 3332 5f75            i64.load32_u  ; export name
000030e: 00                                        ; export kind
000030f: 1c                                        ; export func index
0000310: 09                                        ; string length
0000311: 6933 322e 7374 6f72 65                   i32.store  ; export name
000031a: 00                                        ; export kind
000031b: 1d                                        ; export func index
000031c: 09                                        ; string length
000031d: 6936 342e 7374 6f72 65                   i64.store  ; export name
0000326: 00                                        ; export kind
0000327: 1e                                        ; export func index
0000328: 09                                        ; string length
0000329: 6633 322e 7374 6f72 65                   f32.store  ; export name
0000332: 00                                        ; export kind
0000333: 1f                                        ; export func index
0000334: 09                                        ; string length
0000335: 6636 342e 7374 6f72 65                   f64.store  ; export name
000033e: 00                                        ; export kind
000033f: 20                                        ; export func index
0000340: 0a                                        ; string length
0000341: 6933 322e 7374 6f72 6538                 i32.store8  ; export name
000034b: 00                                        ; export kind
000034c: 21                                        ; export func index
000034d: 0b                                        ; string length
000034e: 6933 322e 7374 6f72 6531 36              i32.store16  ; export name
0000359: 00                                        ; export kind
000035a: 22                                        ; export func index
000035b: 0a                                        ; string length
000035c: 6936 342e 7374 6f72 6538                 i64.store8  ; export name
0000366: 00                                        ; export kind
0000367: 23                                        ; export func index
0000368: 0b                                        ; string length
0000369: 6936 342e 7374 6f72 6531 36              i64.store16  ; export name
0000374: 00                                        ; export kind
0000375: 24                                        ; export func index
0000376: 0b                                        ; string length
0000377: 6936 342e 7374 6f72 6533 32              i64.store32  ; export name
0000382: 00                                        ; export kind
0000383: 25                                        ; export func index
0000384: 0e                                        ; string length
0000385: 6375 7272 656e 745f 6d65 6d6f 7279       current_memory  ; export name
0000393: 00                                        ; export kind
0000394: 26                                        ; export func index
0000395: 0b                                        ; string length
0000396: 6772 6f77 5f6d 656d 6f72 79              grow_memory  ; export name
00003a1: 00                                        ; export kind
00003a2: 27                                        ; export func index
00003a3: 09                                        ; string length
00003a4: 6933 322e 636f 6e73 74                   i32.const  ; export name
00003ad: 00                                        ; export kind
00003ae: 28                                        ; export func index
00003af: 09                                        ; string length
00003b0: 6936 342e 636f 6e73 74                   i64.const  ; export name
00003b9: 00                                        ; export kind
00003ba: 29                                        ; export func index
00003bb: 09                                        ; string length
00003bc: 6633 322e 636f 6e73 74                   f32.const  ; export name
00003c5: 00                                        ; export kind
00003c6: 2a                                        ; export func index
00003c7: 09                                        ; string length
00003c8: 6636 342e 636f 6e73 74                   f64.const  ; export name
00003d1: 00                                        ; export kind
00003d2: 2b                                        ; export func index
00003d3: 07                                        ; string length
00003d4: 6933 322e 6571 7a                        i32.eqz  ; export name
00003db: 00                                        ; export kind
00003dc: 2c                                        ; export func index
00003dd: 06                                        ; string length
00003de: 6933 322e 6571                           i32.eq  ; export name
00003e4: 00                                        ; export kind
00003e5: 2d                                        ; export func index
00003e6: 06                                        ; string length
00003e7: 6933 322e 6e65                           i32.ne  ; export name
00003ed: 00                                        ; export kind
00003ee: 2e                                        ; export func index
00003ef: 08                                        ; string length
00003f0: 6933 322e 6c74 5f73                      i32.lt_s  ; export name
00003f8: 00                                        ; export kind
00003f9: 2f                                        ; export func index
00003fa: 08                                        ; string length
00003fb: 6933 322e 6c74 5f75                      i32.lt_u  ; export name
0000403: 00                                        ; export kind
0000404: 30                                        ; export func index
0000405: 08                                        ; string length
0000406: 6933 322e 6774 5f73                      i32.gt_s  ; export name
000040e: 00                                        ; export kind
000040f: 31                                        ; export func index
0000410: 08                                        ; string length
0000411: 6933 322e 6774 5f75                      i32.gt_u  ; export name
0000419: 00                                        ; export kind
000041a: 32                                        ; export func index
000041b: 08                                        ; string length
000041c: 6933 322e 6c65 5f73                      i32.le_s  ; export name
0000424: 00                                        ; export kind
0000425: 33                                        ; export func index
0000426: 08                                        ; string length
0000427: 6933 322e 6c65 5f75                      i32.le_u  ; export name
000042f: 00                                        ; export kind
0000430: 34                                        ; export func index
0000431: 08                                        ; string length
0000432: 6933 322e 6765 5f73                      i32.ge_s  ; export name
000043a: 00                                        ; export kind
000043b: 35                                        ; export func index
000043c: 08                                        ; string length
000043d: 6933 322e 6765 5f75                      i32.ge_u  ; export name
0000445: 00                                        ; export kind
0000446: 36                                        ; export func index
0000447: 07                                        ; string length
0000448: 6936 342e 6571 7a                        i64.eqz  ; export name
000044f: 00                                        ; export kind
0000450: 37                                        ; export func index
0000451: 06                                        ; string length
0000452: 6936 342e 6571                           i64.eq  ; export name
0000458: 00                                        ; export kind
0000459: 38                                        ; export func index
000045a: 06                                        ; string length
000045b: 6936 342e 6e65                           i64.ne  ; export name
0000461: 00                                        ; export kind
0000462: 39                                        ; export func index
0000463: 08                                        ; string length
0000464: 6936 342e 6c74 5f73                      i64.lt_s  ; export name
000046c: 00                                        ; export kind
000046d: 3a                                        ; export func index
000046e: 08                                        ; string length
000046f: 6936 342e 6c74 5f75                      i64.lt_u  ; export name
0000477: 00                                        ; export kind
0000478: 3b                                        ; export func index
0000479: 08                                        ; string length
000047a: 6936 342e 6774 5f73                      i64.gt_s  ; export name
0000482: 00                                        ; export kind
0000483: 3c                                        ; export func index
0000484: 08                                        ; string length
0000485: 6936 342e 6774 5f75                      i64.gt_u  ; export name
000048d: 00                                        ; export kind
000048e: 3d                                        ; export func index
000048f: 08                                        ; string length
0000490: 6936 342e 6c65 5f73                      i64.le_s  ; export name
0000498: 00                                        ; export kind
0000499: 3e                                        ; export func index
000049a: 08                                        ; string length
000049b: 6936 342e 6c65 5f75                      i64.le_u  ; export name
00004a3: 00                                        ; export kind
00004a4: 3f                                        ; export func index
00004a5: 08                                        ; string length
00004a6: 6936 342e 6765 5f73                      i64.ge_s  ; export name
00004ae: 00                                        ; export kind
00004af: 40                                        ; export func index
00004b0: 08                                        ; string length
00004b1: 6936 342e 6765 5f75                      i64.ge_u  ; export name
00004b9: 00                                        ; export kind
00004ba: 41                                        ; export func index
00004bb: 06                                        ; string length
00004bc: 6633 322e 6571                           f32.eq  ; export name
00004c2: 00                                        ; export kind
00004c3: 42                                        ; export func index
00004c4: 06                                        ; string length
00004c5: 6633 322e 6e65                           f32.ne  ; export name
00004cb: 00                                        ; export kind
00004cc: 43                                        ; export func index
00004cd: 06                                        ; string length
00004ce: 6633 322e 6c74                           f32.lt  ; export name
00004d4: 00                                        ; export kind
00004d5: 44                                        ; export func index
00004d6: 06                                        ; string length
00004d7: 6633 322e 6774                           f32.gt  ; export name
00004dd: 00                                        ; export kind
00004de: 45                                        ; export func index
00004df: 06                                        ; string length
00004e0: 6633 322e 6c65                           f32.le  ; export name
00004e6: 00                                        ; export kind
00004e7: 46                                        ; export func index
00004e8: 06                                        ; string length
00004e9: 6633 322e 6765                           f32.ge  ; export name
00004ef: 00                                        ; export kind
00004f0: 47                                        ; export func index
00004f1: 06                                        ; string length
00004f2: 6636 342e 6571                           f64.eq  ; export name
00004f8: 00                                        ; export kind
00004f9: 48                                        ; export func index
00004fa: 06                                        ; string length
00004fb: 6636 342e 6e65                           f64.ne  ; export name
0000501: 00                                        ; export kind
0000502: 49                                        ; export func index
0000503: 06                                        ; string length
0000504: 6636 342e 6c74                           f64.lt  ; export name
000050a: 00                                        ; export kind
000050b: 4a                                        ; export func index
000050c: 06                                        ; string length
000050d: 6636 342e 6774                           f64.gt  ; export name
0000513: 00                                        ; export kind
0000514: 4b                                        ; export func index
0000515: 06                                        ; string length
0000516: 6636 342e 6c65                           f64.le  ; export name
000051c: 00                                        ; export kind
000051d: 4c                                        ; export func index
000051e: 06                                        ; string length
000051f: 6636 342e 6765                           f64.ge  ; export name
0000525: 00                                        ; export kind
0000526: 4d                                        ; export func index
0000527: 07                                        ; string length
0000528: 6933 322e 636c 7a                        i32.clz  ; export name
000052f: 00                                        ; export kind
0000530: 4e                                        ; export func index
0000531: 07                                        ; string length
0000532: 6933 322e 6374 7a                        i32.ctz  ; export name
0000539: 00                                        ; export kind
000053a: 4f                                        ; export func index
000053b: 0a                                        ; string length
000053c: 6933 322e 706f 7063 6e74                 i32.popcnt  ; export name
0000546: 00                                        ; export kind
0000547: 50                                        ; export func index
0000548: 07                                        ; string length
0000549: 6933 322e 6164 64                        i32.add  ; export name
0000550: 00                                        ; export kind
0000551: 51                                        ; export func index
0000552: 07                                        ; string length
0000553: 6933 322e 7375 62                        i32.sub  ; export name
000055a: 00                                        ; export kind
000055b: 52                                        ; export func index
000055c: 07                                        ; string length
000055d: 6933 322e 6d75 6c                        i32.mul  ; export name
0000564: 00                                        ; export kind
0000565: 53                                        ; export func index
0000566: 09                                        ; string length
0000567: 6933 322e 6469 765f 73                   i32.div_s  ; export name
0000570: 00                                        ; export kind
0000571: 54                                        ; export func index
0000572: 09                                        ; string length
0000573: 6933 322e 6469 765f 75                   i32.div_u  ; export name
000057c: 00                                        ; export kind
000057d: 55                                        ; export func index
000057e: 09                                        ; string length
000057f: 6933 322e 7265 6d5f 73                   i32.rem_s  ; export name
0000588: 00                                        ; export kind
0000589: 56                                        ; export func index
000058a: 09                                        ; string length
000058b: 6933 322e 7265 6d5f 75                   i32.rem_u  ; export name
0000594: 00                                        ; export kind
0000595: 57                                        ; export func index
0000596: 07                                        ; string length
0000597: 6933 322e 616e 64                        i32.and  ; export name
000059e: 00                                        ; export kind
000059f: 58                                        ; export func index
00005a0: 06                                        ; string length
00005a1: 6933 322e 6f72                           i32.or  ; export name
00005a7: 00                                        ; export kind
00005a8: 59                                        ; export func index
00005a9: 07                                        ; string length
00005aa: 6933 322e 786f 72                        i32.xor  ; export name
00005b1: 00                                        ; export kind
00005b2: 5a                                        ; export func index
00005b3: 07                                        ; string length
00005b4: 6933 322e 7368 6c                        i32.shl  ; export name
00005bb: 00                                        ; export kind
00005bc: 5b                                        ; export func index
00005bd: 09                                        ; string length
00005be: 6933 322e 7368 725f 73                   i32.shr_s  ; export name
00005c7: 00                                        ; export kind
00005c8: 5c                                        ; export func index
00005c9: 09                                        ; string length
00005ca: 6933 322e 7368 725f 75                   i32.shr_u  ; export name
00005d3: 00                                        ; export kind
00005d4: 5d                                        ; export func index
00005d5: 08                                        ; string length
00005d6: 6933 322e 726f 746c                      i32.rotl  ; export name
00005de: 00                                        ; export kind
00005df: 5e                                        ; export func index
00005e0: 08                                        ; string length
00005e1: 6933 322e 726f 7472                      i32.rotr  ; export name
00005e9: 00                                        ; export kind
00005ea: 5f                                        ; export func index
00005eb: 07                                        ; string length
00005ec: 6936 342e 636c 7a                        i64.clz  ; export name
00005f3: 00                                        ; export kind
00005f4: 60                                        ; export func index
00005f5: 07                                        ; string length
00005f6: 6936 342e 6374 7a                        i64.ctz  ; export name
00005fd: 00                                        ; export kind
00005fe: 61                                        ; export func index
00005ff: 0a                                        ; string length
0000600: 6936 342e 706f 7063 6e74                 i64.popcnt  ; export name
000060a: 00                                        ; export kind
000060b: 62                                        ; export func index
000060c: 07                                        ; string length
000060d: 6936 342e 6164 64                        i64.add  ; export name
0000614: 00                                        ; export kind
0000615: 63                                        ; export func index
0000616: 07                                        ; string length
0000617: 6936 342e 7375 62                        i64.sub  ; export name
000061e: 00                                        ; export kind
000061f: 64                                        ; export func index
0000620: 07                                        ; string length
0000621: 6936 342e 6d75 6c                        i64.mul  ; export name
0000628: 00                                        ; export kind
0000629: 65                                        ; export func index
000062a: 09                                        ; string length
000062b: 6936 342e 6469 765f 73                   i64.div_s  ; export name
0000634: 00                                        ; export kind
0000635: 66                                        ; export func index
0000636: 09                                        ; string length
0000637: 6936 342e 6469 765f 75                   i64.div_u  ; export name
0000640: 00                                        ; export kind
0000641: 67                                        ; export func index
0000642: 09                                        ; string length
0000643: 6936 342e 7265 6d5f 73                   i64.rem_s  ; export name
000064c: 00                                        ; export kind
000064d: 68                                        ; export func index
000064e: 09                                        ; string length
000064f: 6936 342e 7265 6d5f 75                   i64.rem_u  ; export name
0000658: 00                                        ; export kind
0000659: 69                                        ; export func index
000065a: 07                                        ; string length
000065b: 6936 342e 616e 64                        i64.and  ; export name
0000662: 00                                        ; export kind
0000663: 6a                                        ; export func index
0000664: 06                                        ; string length
0000665: 6936 342e 6f72                           i64.or  ; export name
000066b: 00                                        ; export kind
000066c: 6b                                        ; export func index
000066d: 07                                        ; string length
000066e: 6936 342e 786f 72                        i64.xor  ; export name
0000675: 00                                        ; export kind
0000676: 6c                                        ; export func index
0000677: 07                                        ; string length
0000678: 6936 342e 7368 6c                        i64.shl  ; export name
000067f: 00                                        ; export kind
0000680: 6d                                        ; export func index
0000681: 09                                        ; string length
0000682: 6936 342e 7368 725f 73                   i64.shr_s  ; export name
000068b: 00                                        ; export kind
000068c: 6e                                        ; export func index
000068d: 09                                        ; string length
000068e: 6936 342e 7368 725f 75                   i64.shr_u  ; export name
0000697: 00                                        ; export kind
0000698: 6f                                        ; export func index
0000699: 08                                        ; string length
000069a: 6936 342e 726f 746c                      i64.rotl  ; export name
00006a2: 00                                        ; export kind
00006a3: 70                                        ; export func index
00006a4: 08                                        ; string length
00006a5: 6936 342e 726f 7472                      i64.rotr  ; export name
00006ad: 00                                        ; export kind
00006ae: 71                                        ; export func index
00006af: 07                                        ; string length
00006b0: 6633 322e 6162 73                        f32.abs  ; export name
00006b7: 00                                        ; export kind
00006b8: 72                                        ; export func index
00006b9: 07                                        ; string length
00006ba: 6633 322e 6e65 67                        f32.neg  ; export name
00006c1: 00                                        ; export kind
00006c2: 73                                        ; export func index
00006c3: 08                                        ; string length
00006c4: 6633 322e 6365 696c                      f32.ceil  ; export name
00006cc: 00                                        ; export kind
00006cd: 74                                        ; export func index
00006ce: 09                                        ; string length
00006cf: 6633 322e 666c 6f6f 72                   f32.floor  ; export name
00006d8: 00                                        ; export kind
00006d9: 75                                        ; export func index
00006da: 09                                        ; string length
00006db: 6633 322e 7472 756e 63                   f32.trunc  ; export name
00006e4: 00                                        ; export kind
00006e5: 76                                        ; export func index
00006e6: 0b                                        ; string length
00006e7: 6633 322e 6e65 6172 6573 74              f32.nearest  ; export name
00006f2: 00                                        ; export kind
00006f3: 77                                        ; export func index
00006f4: 08                                        ; string length
00006f5: 6633 322e 7371 7274                      f32.sqrt  ; export name
00006fd: 00                                        ; export kind
00006fe: 78                                        ; export func index
00006ff: 07                                        ; string length
0000700: 6633 322e 6164 64                        f32.add  ; export name
0000707: 00                                        ; export kind
0000708: 79                                        ; export func index
0000709: 07                                        ; string length
000070a: 6633 322e 7375 62                        f32.sub  ; export name
0000711: 00                                        ; export kind
0000712: 7a                                        ; export func index
0000713: 07                                        ; string length
0000714: 6633 322e 6d75 6c                        f32.mul  ; export name
000071b: 00                                        ; export kind
000071c: 7b                                        ; export func index
000071d: 07                                        ; string length
000071e: 6633 322e 6469 76                        f32.div  ; export name
0000725: 00                                        ; export kind
0000726: 7c                                        ; export func index
0000727: 07                                        ; string length
0000728: 6633 322e 6d69 6e                        f32.min  ; export name
000072f: 00                                        ; export kind
0000730: 7d                                        ; export func index
0000731: 07                                        ; string length
0000732: 6633 322e 6d61 78                        f32.max  ; export name
0000739: 00                                        ; export kind
000073a: 7e                                        ; export func index
000073b: 0c                                        ; string length
000073c: 6633 322e 636f 7079 7369 676e            f32.copysign  ; export name
0000748: 00                                        ; export kind
0000749: 7f                                        ; export func index
000074a: 07                                        ; string length
000074b: 6636 342e 6162 73                        f64.abs  ; export name
0000752: 00                                        ; export kind
0000753: 8001                                      ; export func index
0000755: 07                                        ; string length
0000756: 6636 342e 6e65 67                        f64.neg  ; export name
000075d: 00                                        ; export kind
000075e: 8101                                      ; export func index
0000760: 08                                        ; string length
0000761: 6636 342e 6365 696c                      f64.ceil  ; export name
0000769: 00                                        ; export kind
000076a: 8201                                      ; export func index
000076c: 09                                        ; string length
000076d: 6636 342e 666c 6f6f 72                   f64.floor  ; export name
0000776: 00                                        ; export kind
0000777: 8301                                      ; export func index
0000779: 09                                        ; string length
000077a: 6636 342e 7472 756e 63                   f64.trunc  ; export name
0000783: 00                                        ; export kind
0000784: 8401                                      ; export func index
0000786: 0b                                        ; string length
0000787: 6636 342e 6e65 6172 6573 74              f64.nearest  ; export name
0000792: 00                                        ; export kind
0000793: 8501                                      ; export func index
0000795: 08                                        ; string length
0000796: 6636 342e 7371 7274                      f64.sqrt  ; export name
000079e: 00                                        ; export kind
000079f: 8601                                      ; export func index
00007a1: 07                                        ; string length
00007a2: 6636 342e 6164 64                        f64.add  ; export name
00007a9: 00                                        ; export kind
00007aa: 8701                                      ; export func index
00007ac: 07                                        ; string length
00007ad: 6636 342e 7375 62                        f64.sub  ; export name
00007b4: 00                                        ; export kind
00007b5: 8801                                      ; export func index
00007b7: 07                                        ; string length
00007b8: 6636 342e 6d75 6c                        f64.mul  ; export name
00007bf: 00                                        ; export kind
00007c0: 8901                                      ; export func index
00007c2: 07                                        ; string length
00007c3: 6636 342e 6469 76                        f64.div  ; export name
00007ca: 00                                        ; export kind
00007cb: 8a01                                      ; export func index
00007cd: 07                                        ; string length
00007ce: 6636 342e 6d69 6e                        f64.min  ; export name
00007d5: 00                                        ; export kind
00007d6: 8b01                                      ; export func index
00007d8: 07                                        ; string length
00007d9: 6636 342e 6d61 78                        f64.max  ; export name
00007e0: 00                                        ; export kind
00007e1: 8c01                                      ; export func index
00007e3: 0c                                        ; string length
00007e4: 6636 342e 636f 7079 7369 676e            f64.copysign  ; export name
00007f0: 00                                        ; export kind
00007f1: 8d01                                      ; export func index
00007f3: 0c                                        ; string length
00007f4: 6933 322e 7772 6170 2f69 3634            i32.wrap/i64  ; export name
0000800: 00                                        ; export kind
0000801: 8e01                                      ; export func index
0000803: 0f                                        ; string length
0000804: 6933 322e 7472 756e 635f 732f 6633 32    i32.trunc_s/f32  ; export name
0000813: 00                                        ; export kind
0000814: 8f01                                      ; export func index
0000816: 0f                                        ; string length
0000817: 6933 322e 7472 756e 635f 752f 6633 32    i32.trunc_u/f32  ; export name
0000826: 00                                        ; export kind
0000827: 9001                                      ; export func index
0000829: 0f                                        ; string length
000082a: 6933 322e 7472 756e 635f 732f 6636 34    i32.trunc_s/f64  ; export name
0000839: 00                                        ; export kind
000083a: 9101                                      ; export func index
000083c: 0f                                        ; string length
000083d: 6933 322e 7472 756e 635f 752f 6636 34    i32.trunc_u/f64  ; export name
000084c: 00                                        ; export kind
000084d: 9201                                      ; export func index
000084f: 10                                        ; string length
0000850: 6936 342e 6578 7465 6e64 5f73 2f69 3332  i64.extend_s/i32  ; export name
0000860: 00                                        ; export kind
0000861: 9301                                      ; export func index
0000863: 10                                        ; string length
0000864: 6936 342e 6578 7465 6e64 5f75 2f69 3332  i64.extend_u/i32  ; export name
0000874: 00                                        ; export kind
0000875: 9401                                      ; export func index
0000877: 0f                                        ; string length
0000878: 6936 342e 7472 756e 635f 732f 6633 32    i64.trunc_s/f32  ; export name
0000887: 00                                        ; export kind
0000888: 9501                                      ; export func index
000088a: 0f                                        ; string length
000088b: 6936 342e 7472 756e 635f 752f 6633 32    i64.trunc_u/f32  ; export name
000089a: 00                                        ; export kind
000089b: 9601                                      ; export func index
000089d: 0f                                        ; string length
000089e: 6936 342e 7472 756e 635f 732f 6636 34    i64.trunc_s/f64  ; export name
00008ad: 00                                        ; export kind
00008ae: 9701                                      ; export func index
00008b0: 0f                                        ; string length
00008b1: 6936 342e 7472 756e 635f 752f 6636 34    i64.trunc_u/f64  ; export name
00008c0: 00                                        ; export kind
00008c1: 9801                                      ; export func index
00008c3: 11                                        ; string length
00008c4: 6633 322e 636f 6e76 6572 745f 732f 6933  f32.convert_s/i3
00008d4: 32                                       2  ; export name
00008d5: 00                                        ; export kind
00008d6: 9901                                      ; export func index
00008d8: 11                                        ; string length
00008d9: 6633 322e 636f 6e76 6572 745f 752f 6933  f32.convert_u/i3
00008e9: 32                                       2  ; export name
00008ea: 00                                        ; export kind
00008eb: 9a01                                      ; export func index
00008ed: 11                                        ; string length
00008ee: 6633 322e 636f 6e76 6572 745f 732f 6936  f32.convert_s/i6
00008fe: 34                                       4  ; export name
00008ff: 00                                        ; export kind
0000900: 9b01                                      ; export func index
0000902: 11                                        ; string length
0000903: 6633 322e 636f 6e76 6572 745f 752f 6936  f32.convert_u/i6
0000913: 34                                       4  ; export name
0000914: 00                                        ; export kind
0000915: 9c01                                      ; export func index
0000917: 0e                                        ; string length
0000918: 6633 322e 6465 6d6f 7465 2f66 3634       f32.demote/f64  ; export name
0000926: 00                                        ; export kind
0000927: 9d01                                      ; export func index
0000929: 11                                        ; string length
000092a: 6636 342e 636f 6e76 6572 745f 732f 6933  f64.convert_s/i3
000093a: 32                                       2  ; export name
000093b: 00                                        ; export kind
000093c: 9e01                                      ; export func index
000093e: 11                                        ; string length
000093f: 6636 342e 636f 6e76 6572 745f 752f 6933  f64.convert_u/i3
000094f: 32                                       2  ; export name
0000950: 00                                        ; export kind
0000951: 9f01                                      ; export func index
0000953: 11                                        ; string length
0000954: 6636 342e 636f 6e76 6572 745f 732f 6936  f64.convert_s/i6
0000964: 34                                       4  ; export name
0000965: 00                                        ; export kind
0000966: a001                                      ; export func index
0000968: 11                                        ; string length
0000969: 6636 342e 636f 6e76 6572 745f 752f 6936  f64.convert_u/i6
0000979: 34                                       4  ; export name
000097a: 00                                        ; export kind
000097b: a101                                      ; export func index
000097d: 0f                                        ; string length
000097e: 6636 342e 7072 6f6d 6f74 652f 6633 32    f64.promote/f32  ; export name
000098d: 00                                        ; export kind
000098e: a201                                      ; export func index
0000990: 13                                        ; string length
0000991: 6933 322e 7265 696e 7465 7270 7265 742f  i32.reinterpret/
00009a1: 6633 32                                  f32  ; export name
00009a4: 00                                        ; export kind
00009a5: a301                                      ; export func index
00009a7: 13                                        ; string length
00009a8: 6633 322e 7265 696e 7465 7270 7265 742f  f32.reinterpret/
00009b8: 6933 32                                  i32  ; export name
00009bb: 00                                        ; export kind
00009bc: a401                                      ; export func index
00009be: 13                                        ; string length
00009bf: 6936 342e 7265 696e 7465 7270 7265 742f  i64.reinterpret/
00009cf: 6636 34                                  f64  ; export name
00009d2: 00                                        ; export kind
00009d3: a501                                      ; export func index
00009d5: 13                                        ; string length
00009d6: 6636 342e 7265 696e 7465 7270 7265 742f  f64.reinterpret/
00009e6: 6936 34                                  i64  ; export name
00009e9: 00                                        ; export kind
00009ea: a601                                      ; export func index
00009ec: 0d                                        ; string length
00009ed: 6933 322e 6578 7465 6e64 385f 73         i32.extend8_s  ; export name
00009fa: 00                                        ; export kind
00009fb: a701                                      ; export func index
00009fd: 0e                                        ; string length
00009fe: 6933 322e 6578 7465 6e64 3136 5f73       i32.extend16_s  ; export name
0000a0c: 00                                        ; export kind
0000a0d: a801                                      ; export func index
0000a0f: 0d                                        ; string length
0000a10: 6936 342e 6578 7465 6e64 385f 73         i64.extend8_s  ; export name
0000a1d: 00                                        ; export kind
0000a1e: a901                                      ; export func index
0000a20: 0e                                        ; string length
0000a21: 6936 342e 6578 7465 6e64 3136 5f73       i64.extend16_s  ; export name
0000a2f: 00                                        ; export kind
0000a30: aa01                                      ; export func index
0000a32: 0e                                        ; string length
0000a33: 6936 342e 6578 7465 6e64 3332 5f73       i64.extend32_s  ; export name
0000a41: 00                                        ; export kind
0000a42: ab01                                      ; export func index
0000a44: 06                                        ; string length
0000a45: 616c 6c6f 6361                           alloca  ; export name
0000a4b: 00                                        ; export kind
0000a4c: ac01                                      ; export func index
0000a4e: 09                                        ; string length
0000a4f: 6272 5f75 6e6c 6573 73                   br_unless  ; export name
0000a58: 00                                        ; export kind
0000a59: ad01                                      ; export func index
0000a5b: 09                                        ; string length
0000a5c: 6361 6c6c 5f68 6f73 74                   call_host  ; export name
0000a65: 00                                        ; export kind
0000a66: ae01                                      ; export func index
0000a68: 04                                        ; string length
0000a69: 6461 7461                                data  ; export name
0000a6d: 00                                        ; export kind
0000a6e: af01                                      ; export func index
0000a70: 09                                        ; string length
0000a71: 6472 6f70 5f6b 6565 70                   drop_keep  ; export name
0000a7a: 00                                        ; export kind
0000a7b: b001                                      ; export func index
0000a7d: 13                                        ; string length
0000a7e: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000a8e: 6633 32                                  f32  ; export name
0000a91: 00                                        ; export kind
0000a92: b101                                      ; export func index
0000a94: 13                                        ; string length
0000a95: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000aa5: 6633 32                                  f32  ; export name
0000aa8: 00                                        ; export kind
0000aa9: b201                                      ; export func index
0000aab: 13                                        ; string length
0000aac: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000abc: 6636 34                                  f64  ; export name
0000abf: 00                                        ; export kind
0000ac0: b301                                      ; export func index
0000ac2: 13                                        ; string length
0000ac3: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000ad3: 6636 34                                  f64  ; export name
0000ad6: 00                                        ; export kind
0000ad7: b401                                      ; export func index
0000ad9: 13                                        ; string length
0000ada: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000aea: 6633 32                                  f32  ; export name
0000aed: 00                                        ; export kind
0000aee: b501                                      ; export func index
0000af0: 13                                        ; string length
0000af1: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b01: 6633 32                                  f32  ; export name
0000b04: 00                                        ; export kind
0000b05: b601                                      ; export func index
0000b07: 13                                        ; string length
0000b08: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b18: 6636 34                                  f64  ; export name
0000b1b: 00                                        ; export kind
0000b1c: b701                                      ; export func index
0000b1e: 13                                        ; string length
0000b1f: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b2f: 6636 34                                  f64  ; export name
0000b32: 00                                        ; export kind
0000b33: b801                                      ; export func index
0000b35: 0a                                        ; string length
0000b36: 7631 3238 2e63 6f6e 7374                 v128.const  ; export name
0000b40: 00                                        ; export kind
0000b41: b901                                      ; export func index
0000b43: 09                                        ; string length
0000b44: 7631 3238 2e6c 6f61 64                   v128.load  ; export name
0000b4d: 00                                        ; export kind
0000b4e: ba01                                      ; export func index
0000b50: 0a                                        ; string length
0000b51: 7631 3238 2e73 746f 7265                 v128.store  ; export name
0000b5b: 00                                        ; export kind
0000b5c: bb01                                      ; export func index
0000b5e: 0b                                        ; string length
0000b5f: 6938 7831 362e 7370 6c61 74              i8x16.splat  ; export name
0000b6a: 00                                        ; export kind
0000b6b: bc01                                      ; export func index
0000b6d: 0b                                        ; string length
0000b6e: 6931 3678 382e 7370 6c61 74              i16x8.splat  ; export name
0000b79: 00                                        ; export kind
0000b7a: bd01                                      ; export func index
0000b7c: 0b                                        ; string length
0000b7d: 6933 3278 342e 7370 6c61 74              i32x4.splat  ; export name
0000b88: 00                                        ; export kind
0000b89: be01                                      ; export func index
0000b8b: 0b                                        ; string length
0000b8c: 6936 3478 322e 7370 6c61 74              i64x2.splat  ; export name
0000b97: 00                                        ; export kind
0000b98: bf01                                      ; export func index
0000b9a: 0b                                        ; string length
0000b9b: 6633 3278 342e 7370 6c61 74              f32x4.splat  ; export name
0000ba6: 00                                        ; export kind
0000ba7: c001                                      ; export func index
0000ba9: 0b                                        ; string length
0000baa: 6636 3478 322e 7370 6c61 74              f64x2.splat  ; export name
0000bb5: 00                                        ; export kind
0000bb6: c101                                      ; export func index
0000bb8: 14                                        ; string length
0000bb9: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000bc9: 6e65 5f73                                ne_s  ; export name
0000bcd: 00                                        ; export kind
0000bce: c201                                      ; export func index
0000bd0: 14                                        ; string length
0000bd1: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000be1: 6e65 5f75                                ne_u  ; export name
0000be5: 00                                        ; export kind
0000be6: c301                                      ; export func index
0000be8: 14                                        ; string length
0000be9: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000bf9: 6e65 5f73                                ne_s  ; export name
0000bfd: 00                                        ; export kind
0000bfe: c401                                      ; export func index
0000c00: 14                                        ; string length
0000c01: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c11: 6e65 5f75                                ne_u  ; export name
0000c15: 00                                        ; export kind
0000c16: c501                                      ; export func index
0000c18: 12                                        ; string length
0000c19: 6933 3278 342e 6578 7472 6163 745f 6c61  i32x4.extract_la
0000c29: 6e65                                     ne  ; export name
0000c2b: 00                                        ; export kind
0000c2c: c601                                      ; export func index
0000c2e: 12                                        ; string length
0000c2f: 6936 3478 322e 6578 7472 6163 745f 6c61  i64x2.extract_la
0000c3f: 6e65                                     ne  ; export name
0000c41: 00                                        ; export kind
0000c42: c701                                      ; export func index
0000c44: 12                                        ; string length
0000c45: 6633 3278 342e 6578 7472 6163 745f 6c61  f32x4.extract_la
0000c55: 6e65                                     ne  ; export name
0000c57: 00                                        ; export kind
0000c58: c801                                      ; export func index
0000c5a: 12                                        ; string length
0000c5b: 6636 3478 322e 6578 7472 6163 745f 6c61  f64x2.extract_la
0000c6b: 6e65                                     ne  ; export name
0000c6d: 00                                        ; export kind
0000c6e: c901                                      ; export func index
0000c70: 12                                        ; string length
0000c71: 6938 7831 362e 7265 706c 6163 655f 6c61  i8x16.replace_la
0000c81: 6e65                                     ne  ; export name
0000c83: 00                                        ; export kind
0000c84: ca01                                      ; export func index
0000c86: 12                                        ; string length
0000c87: 6931 3678 382e 7265 706c 6163 655f 6c61  i16x8.replace_la
0000c97: 6e65                                     ne  ; export name
0000c99: 00                                        ; export kind
0000c9a: cb01                                      ; export func index
0000c9c: 12                                        ; string length
0000c9d: 6933 3278 342e 7265 706c 6163 655f 6c61  i32x4.replace_la
0000cad: 6e65                                     ne  ; export name
0000caf: 00                                        ; export kind
0000cb0: cc01                                      ; export func index
0000cb2: 12                                        ; string length
0000cb3: 6936 3478 322e 7265 706c 6163 655f 6c61  i64x2.replace_la
0000cc3: 6e65                                     ne  ; export name
0000cc5: 00                                        ; export kind
0000cc6: cd01                                      ; export func index
0000cc8: 12                                        ; string length
0000cc9: 6633 3278 342e 7265 706c 6163 655f 6c61  f32x4.replace_la
0000cd9: 6e65                                     ne  ; export name
0000cdb: 00                                        ; export kind
0000cdc: ce01                                      ; export func index
0000cde: 12                                        ; string length
0000cdf: 6636 3478 322e 7265 706c 6163 655f 6c61  f64x2.replace_la
0000cef: 6e65                                     ne  ; export name
0000cf1: 00                                        ; export kind
0000cf2: cf01                                      ; export func index
0000cf4: 0d                                        ; string length
0000cf5: 7638 7831 362e 7368 7566 666c 65         v8x16.shuffle  ; export name
0000d02: 00                                        ; export kind
0000d03: d001                                      ; export func index
0000d05: 09                                        ; string length
0000d06: 6938 7831 362e 6164 64                   i8x16.add  ; export name
0000d0f: 00                                        ; export kind
0000d10: d101                                      ; export func index
0000d12: 09                                        ; string length
0000d13: 6931 3678 382e 6164 64                   i16x8.add  ; export name
0000d1c: 00                                        ; export kind
0000d1d: d201                                      ; export func index
0000d1f: 09                                        ; string length
0000d20: 6933 3278 342e 6164 64                   i32x4.add  ; export name
0000d29: 00                                        ; export kind
0000d2a: d301                                      ; export func index
0000d2c: 09                                        ; string length
0000d2d: 6936 3478 322e 6164 64                   i64x2.add  ; export name
0000d36: 00                                        ; export kind
0000d37: d401                                      ; export func index
0000d39: 09                                        ; string length
0000d3a: 6938 7831 362e 7375 62                   i8x16.sub  ; export name
0000d43: 00                                        ; export kind
0000d44: d501                                      ; export func index
0000d46: 09                                        ; string length
0000d47: 6931 3678 382e 7375 62                   i16x8.sub  ; export name
0000d50: 00                                        ; export kind
0000d51: d601                                      ; export func index
0000d53: 09                                        ; string length
0000d54: 6933 3278 342e 7375 62                   i32x4.sub  ; export name
0000d5d: 00                                        ; export kind
0000d5e: d701                                      ; export func index
0000d60: 09                                        ; string length
0000d61: 6936 3478 322e 7375 62                   i64x2.sub  ; export name
0000d6a: 00                                        ; export kind
0000d6b: d801                                      ; export func index
0000d6d: 09                                        ; string length
0000d6e: 6938 7831 362e 6d75 6c                   i8x16.mul  ; export name
0000d77: 00                                        ; export kind
0000d78: d901                                      ; export func index
0000d7a: 09                                        ; string length
0000d7b: 6931 3678 382e 6d75 6c                   i16x8.mul  ; export name
0000d84: 00                                        ; export kind
0000d85: da01                                      ; export func index
0000d87: 09                                        ; string length
0000d88: 6933 3278 342e 6d75 6c                   i32x4.mul  ; export name
0000d91: 00                                        ; export kind
0000d92: db01                                      ; export func index
0000d94: 09                                        ; string length
0000d95: 6938 7831 362e 6e65 67                   i8x16.neg  ; export name
0000d9e: 00                                        ; export kind
0000d9f: dc01                                      ; export func index
0000da1: 09                                        ; string length
0000da2: 6931 3678 382e 6e65 67                   i16x8.neg  ; export name
0000dab: 00                                        ; export kind
0000dac: dd01                                      ; export func index
0000dae: 09                                        ; string length
0000daf: 6933 3278 342e 6e65 67                   i32x4.neg  ; export name
0000db8: 00                                        ; export kind
0000db9: de01                                      ; export func index
0000dbb: 09                                        ; string length
0000dbc: 6936 3478 322e 6e65 67                   i64x2.neg  ; export name
0000dc5: 00                                        ; export kind
0000dc6: df01                                      ; export func index
0000dc8: 14                                        ; string length
0000dc9: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0000dd9: 7465 5f73                                te_s  ; export name
0000ddd: 00                                        ; export kind
0000dde: e001                                      ; export func index
0000de0: 14                                        ; string length
0000de1: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0000df1: 7465 5f75                                te_u  ; export name
0000df5: 00                                        ; export kind
0000df6: e101                                      ; export func index
0000df8: 14                                        ; string length
0000df9: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
0000e09: 7465 5f73                                te_s  ; export name
0000e0d: 00                                        ; export kind
0000e0e: e201                                      ; export func index
0000e10: 14                                        ; string length
0000e11: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
0000e21: 7465 5f75                                te_u  ; export name
0000e25: 00                                        ; export kind
0000e26: e301                                      ; export func index
0000e28: 14                                        ; string length
0000e29: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
0000e39: 7465 5f73                                te_s  ; export name
0000e3d: 00                                        ; export kind
0000e3e: e401                                      ; export func index
0000e40: 14                                        ; string length
0000e41: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
0000e51: 7465 5f75                                te_u  ; export name
0000e55: 00                                        ; export kind
0000e56: e501                                      ; export func index
0000e58: 14                                        ; string length
0000e59: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
0000e69: 7465 5f73                                te_s  ; export name
0000e6d: 00                                        ; export kind
0000e6e: e601                                      ; export func index
0000e70: 14                                        ; string length
0000e71: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
0000e81: 7465 5f75                                te_u  ; export name
0000e85: 00                                        ; export kind
0000e86: e701                                      ; export func index
0000e88: 09                                        ; string length
0000e89: 6938 7831 362e 7368 6c                   i8x16.shl  ; export name
0000e92: 00                                        ; export kind
0000e93: e801                                      ; export func index
0000e95: 09                                        ; string length
0000e96: 6931 3678 382e 7368 6c                   i16x8.shl  ; export name
0000e9f: 00                                        ; export kind
0000ea0: e901                                      ; export func index
0000ea2: 09                                        ; string length
0000ea3: 6933 3278 342e 7368 6c                   i32x4.shl  ; export name
0000eac: 00                                        ; export kind
0000ead: ea01                                      ; export func index
0000eaf: 09                                        ; string length
0000eb0: 6936 3478 322e 7368 6c                   i64x2.shl  ; export name
0000eb9: 00                                        ; export kind
0000eba: eb01                                      ; export func index
0000ebc: 0b                                        ; string length
0000ebd: 6938 7831 362e 7368 725f 73              i8x16.shr_s  ; export name
0000ec8: 00                                        ; export kind
0000ec9: ec01                                      ; export func index
0000ecb: 0b                                        ; string length
0000ecc: 6938 7831 362e 7368 725f 75              i8x16.shr_u  ; export name
0000ed7: 00                                        ; export kind
0000ed8: ed01                                      ; export func index
0000eda: 0b                                        ; string length
0000edb: 6931 3678 382e 7368 725f 73              i16x8.shr_s  ; export name
0000ee6: 00                                        ; export kind
0000ee7: ee01                                      ; export func index
0000ee9: 0b                                        ; string length
0000eea: 6931 3678 382e 7368 725f 75              i16x8.shr_u  ; export name
0000ef5: 00                                        ; export kind
0000ef6: ef01                                      ; export func index
0000ef8: 0b                                        ; string length
0000ef9: 6933 3278 342e 7368 725f 73              i32x4.shr_s  ; export name
0000f04: 00                                        ; export kind
0000f05: f001                                      ; export func index
0000f07: 0b                                        ; string length
0000f08: 6933 3278 342e 7368 725f 75              i32x4.shr_u  ; export name
0000f13: 00                                        ; export kind
0000f14: f101                                      ; export func index
0000f16: 0b                                        ; string length
0000f17: 6936 3478 322e 7368 725f 73              i64x2.shr_s  ; export name
0000f22: 00                                        ; export kind
0000f23: f201                                      ; export func index
0000f25: 0b                                        ; string length
0000f26: 6936 3478 322e 7368 725f 75              i64x2.shr_u  ; export name
0000f31: 00                                        ; export kind
0000f32: f301                                      ; export func index
0000f34: 08                                        ; string length
0000f35: 7631 3238 2e61 6e64                      v128.and  ; export name
0000f3d: 00                                        ; export kind
0000f3e: f401                                      ; export func index
0000f40: 07                                        ; string length
0000f41: 7631 3238 2e6f 72                        v128.or  ; export name
0000f48: 00                                        ; export kind
0000f49: f501                                      ; export func index
0000f4b: 08                                        ; string length
0000f4c: 7631 3238 2e78 6f72                      v128.xor  ; export name
0000f54: 00                                        ; export kind
0000f55: f601                                      ; export func index
0000f57: 08                                        ; string length
0000f58: 7631 3238 2e6e 6f74                      v128.not  ; export name
0000f60: 00                                        ; export kind
0000f61: f701                                      ; export func index
0000f63: 0e                                        ; string length
0000f64: 7631 3238 2e62 6974 7365 6c65 6374       v128.bitselect  ; export name
0000f72: 00                                        ; export kind
0000f73: f801                                      ; export func index
0000f75: 0e                                        ; string length
0000f76: 6938 7831 362e 616e 795f 7472 7565       i8x16.any_true  ; export name
0000f84: 00                                        ; export kind
0000f85: f901                                      ; export func index
0000f87: 0e                                        ; string length
0000f88: 6931 3678 382e 616e 795f 7472 7565       i16x8.any_true  ; export name
0000f96: 00                                        ; export kind
0000f97: fa01                                      ; export func index
0000f99: 0e                                        ; string length
0000f9a: 6933 3278 342e 616e 795f 7472 7565       i32x4.any_true  ; export name
0000fa8: 00                                        ; export kind
0000fa9: fb01                                      ; export func index
0000fab: 0e                                        ; string length
0000fac: 6936 3478 322e 616e 795f 7472 7565       i64x2.any_true  ; export name
0000fba: 00                                        ; export kind
0000fbb: fc01                                      ; export func index
0000fbd: 0e                                        ; string length
0000fbe: 6938 7831 362e 616c 6c5f 7472 7565       i8x16.all_true  ; export name
0000fcc: 00                                        ; export kind
0000fcd: fd01                                      ; export func index
0000fcf: 0e                                        ; string length
0000fd0: 6931 3678 382e 616c 6c5f 7472 7565       i16x8.all_true  ; export name
0000fde: 00                                        ; export kind
0000fdf: fe01                                      ; export func index
0000fe1: 0e                                        ; string length
0000fe2: 6933 3278 342e 616c 6c5f 7472 7565       i32x4.all_true  ; export name
0000ff0: 00                                        ; export kind
0000ff1: ff01                                      ; export func index
0000ff3: 0e                                        ; string length
0000ff4: 6936 3478 322e 616c 6c5f 7472 7565       i64x2.all_true  ; export name
0001002: 00                                        ; export kind
0001003: 8002                                      ; export func index
0001005: 08                                        ; string length
0001006: 6938 7831 362e 6571                      i8x16.eq  ; export name
000100e: 00                                        ; export kind
000100f: 8102                                      ; export func index
0001011: 08                                        ; string length
0001012: 6931 3678 382e 6571                      i16x8.eq  ; export name
000101a: 00                                        ; export kind
000101b: 8202                                      ; export func index
000101d: 08                                        ; string length
000101e: 6933 3278 342e 6571                      i32x4.eq  ; export name
0001026: 00                                        ; export kind
0001027: 8302                                      ; export func index
0001029: 08                                        ; string length
000102a: 6633 3278 342e 6571                      f32x4.eq  ; export name
0001032: 00                                        ; export kind
0001033: 8402                                      ; export func index
0001035: 08                                        ; string length
0001036: 6636 3478 322e 6571                      f64x2.eq  ; export name
000103e: 00                                        ; export kind
000103f: 8502                                      ; export func index
0001041: 08                                        ; string length
0001042: 6938 7831 362e 6e65                      i8x16.ne  ; export name
000104a: 00                                        ; export kind
000104b: 8602                                      ; export func index
000104d: 08                                        ; string length
000104e: 6931 3678 382e 6e65                      i16x8.ne  ; export name
0001056: 00                                        ; export kind
0001057: 8702                                      ; export func index
0001059: 08                                        ; string length
000105a: 6933 3278 342e 6e65                      i32x4.ne  ; export name
0001062: 00                                        ; export kind
0001063: 8802                                      ; export func index
0001065: 08                                        ; string length
0001066: 6633 3278 342e 6e65                      f32x4.ne  ; export name
000106e: 00                                        ; export kind
000106f: 8902                                      ; export func index
0001071: 08                                        ; string length
0001072: 6636 3478 322e 6e65                      f64x2.ne  ; export name
000107a: 00                                        ; export kind
000107b: 8a02                                      ; export func index
000107d: 0a                                        ; string length
000107e: 6938 7831 362e 6c74 5f73                 i8x16.lt_s  ; export name
0001088: 00                                        ; export kind
0001089: 8b02                                      ; export func index
000108b: 0a                                        ; string length
000108c: 6938 7831 362e 6c74 5f75                 i8x16.lt_u  ; export name
0001096: 00                                        ; export kind
0001097: 8c02                                      ; export func index
0001099: 0a                                        ; string length
000109a: 6931 3678 382e 6c74 5f73                 i16x8.lt_s  ; export name
00010a4: 00                                        ; export kind
00010a5: 8d02                                      ; export func index
00010a7: 0a                                        ; string length
00010a8: 6931 3678 382e 6c74 5f75                 i16x8.lt_u  ; export name
00010b2: 00                                        ; export kind
00010b3: 8e02                                      ; export func index
00010b5: 0a                                        ; string length
00010b6: 6933 3278 342e 6c74 5f73                 i32x4.lt_s  ; export name
00010c0: 00                                        ; export kind
00010c1: 8f02                                      ; export func index
00010c3: 0a                                        ; string length
00010c4: 6933 3278 342e 6c74 5f75                 i32x4.lt_u  ; export name
00010ce: 00                                        ; export kind
00010cf: 9002                                      ; export func index
00010d1: 08                                        ; string length
00010d2: 6633 3278 342e 6c74                      f32x4.lt  ; export name
00010da: 00                                        ; export kind
00010db: 9102                                      ; export func index
00010dd: 08                                        ; string length
00010de: 6636 3478 322e 6c74                      f64x2.lt  ; export name
00010e6: 00                                        ; export kind
00010e7: 9202                                      ; export func index
00010e9: 0a                                        ; string length
00010ea: 6938 7831 362e 6c65 5f73                 i8x16.le_s  ; export name
00010f4: 00                                        ; export kind
00010f5: 9302                                      ; export func index
00010f7: 0a                                        ; string length
00010f8: 6938 7831 362e 6c65 5f75                 i8x16.le_u  ; export name
0001102: 00                                        ; export kind
0001103: 9402                                      ; export func index
0001105: 0a                                        ; string length
0001106: 6931 3678 382e 6c65 5f73                 i16x8.le_s  ; export name
0001110: 00                                        ; export kind
0001111: 9502                                      ; export func index
0001113: 0a                                        ; string length
0001114: 6931 3678 382e 6c65 5f75                 i16x8.le_u  ; export name
000111e: 00                                        ; export kind
000111f: 9602                                      ; export func index
0001121: 0a                                        ; string length
0001122: 6933 3278 342e 6c65 5f73                 i32x4.le_s  ; export name
000112c: 00                                        ; export kind
000112d: 9702                                      ; export func index
000112f: 0a                                        ; string length
0001130: 6933 3278 342e 6c65 5f75                 i32x4.le_u  ; export name
000113a: 00                                        ; export kind
000113b: 9802                                      ; export func index
000113d: 08                                        ; string length
000113e: 6633 3278 342e 6c65                      f32x4.le  ; export name
0001146: 00                                        ; export kind
0001147: 9902                                      ; export func index
0001149: 08                                        ; string length
000114a: 6636 3478 322e 6c65                      f64x2.le  ; export name
0001152: 00                                        ; export kind
0001153: 9a02                                      ; export func index
0001155: 0a                                        ; string length
0001156: 6938 7831 362e 6774 5f73                 i8x16.gt_s  ; export name
0001160: 00                                        ; export kind
0001161: 9b02                                      ; export func index
0001163: 0a                                        ; string length
0001164: 6938 7831 362e 6774 5f75                 i8x16.gt_u  ; export name
000116e: 00                                        ; export kind
000116f: 9c02                                      ; export func index
0001171: 0a                                        ; string length
0001172: 6931 3678 382e 6774 5f73                 i16x8.gt_s  ; export name
000117c: 00                                        ; export kind
000117d: 9d02                                      ; export func index
000117f: 0a                                        ; string length
0001180: 6931 3678 382e 6774 5f75                 i16x8.gt_u  ; export name
000118a: 00                                        ; export kind
000118b: 9e02                                      ; export func index
000118d: 0a                                        ; string length
000118e: 6933 3278 342e 6774 5f73                 i32x4.gt_s  ; export name
0001198: 00                                        ; export kind
0001199: 9f02                                      ; export func index
000119b: 0a                                        ; string length
000119c: 6933 3278 342e 6774 5f75                 i32x4.gt_u  ; export name
00011a6: 00                                        ; export kind
00011a7: a002                                      ; export func index
00011a9: 08                                        ; string length
00011aa: 6633 3278 342e 6774                      f32x4.gt  ; export name
00011b2: 00                                        ; export kind
00011b3: a102                                      ; export func index
00011b5: 08                                        ; string length
00011b6: 6636 3478 322e 6774                      f64x2.gt  ; export name
00011be: 00                                        ; export kind
00011bf: a202                                      ; export func index
00011c1: 0a                                        ; string length
00011c2: 6938 7831 362e 6765 5f73                 i8x16.ge_s  ; export name
00011cc: 00                                        ; export kind
00011cd: a302                                      ; export func index
00011cf: 0a                                        ; string length
00011d0: 6938 7831 362e 6765 5f75                 i8x16.ge_u  ; export name
00011da: 00                                        ; export kind
00011db: a402                                      ; export func index
00011dd: 0a                                        ; string length
00011de: 6931 3678 382e 6765 5f73                 i16x8.ge_s  ; export name
00011e8: 00                                        ; export kind
00011e9: a502                                      ; export func index
00011eb: 0a                                        ; string length
00011ec: 6931 3678 382e 6765 5f75                 i16x8.ge_u  ; export name
00011f6: 00                                        ; export kind
00011f7: a602                                      ; export func index
00011f9: 0a                                        ; string length
00011fa: 6933 3278 342e 6765 5f73                 i32x4.ge_s  ; export name
0001204: 00                                        ; export kind
0001205: a702                                      ; export func index
0001207: 0a                                        ; string length
0001208: 6933 3278 342e 6765 5f75                 i32x4.ge_u  ; export name
0001212: 00                                        ; export kind
0001213: a802                                      ; export func index
0001215: 08                                        ; string length
0001216: 6633 3278 342e 6765                      f32x4.ge  ; export name
000121e: 00                                        ; export kind
000121f: a902                                      ; export func index
0001221: 08                                        ; string length
0001222: 6636 3478 322e 6765                      f64x2.ge  ; export name
000122a: 00                                        ; export kind
000122b: aa02                                      ; export func index
000122d: 09                                        ; string length
000122e: 6633 3278 342e 6e65 67                   f32x4.neg  ; export name
0001237: 00                                        ; export kind
0001238: ab02                                      ; export func index
000123a: 09                                        ; string length
000123b: 6636 3478 322e 6e65 67                   f64x2.neg  ; export name
0001244: 00                                        ; export kind
0001245: ac02                                      ; export func index
0001247: 09                                        ; string length
0001248: 6633 3278 342e 6162 73                   f32x4.abs  ; export name
0001251: 00                                        ; export kind
0001252: ad02                                      ; export func index
0001254: 09                                        ; string length
0001255: 6636 3478 322e 6162 73                   f64x2.abs  ; export name
000125e: 00                                        ; export kind
000125f: ae02                                      ; export func index
0001261: 09                                        ; string length
0001262: 6633 3278 342e 6d69 6e                   f32x4.min  ; export name
000126b: 00                                        ; export kind
000126c: af02                                      ; export func index
000126e: 09                                        ; string length
000126f: 6636 3478 322e 6d69 6e                   f64x2.min  ; export name
0001278: 00                                        ; export kind
0001279: b002                                      ; export func index
000127b: 09                                        ; string length
000127c: 6633 3278 342e 6d61 78                   f32x4.max  ; export name
0001285: 00                                        ; export kind
0001286: b102                                      ; export func index
0001288: 09                                        ; string length
0001289: 6636 3478 322e 6d61 78                   f64x2.max  ; export name
0001292: 00                                        ; export kind
0001293: b202                                      ; export func index
0001295: 09                                        ; string length
0001296: 6633 3278 342e 6164 64                   f32x4.add  ; export name
000129f: 00                                        ; export kind
00012a0: b302                                      ; export func index
00012a2: 09                                        ; string length
00012a3: 6636 3478 322e 6164 64                   f64x2.add  ; export name
00012ac: 00                                        ; export kind
00012ad: b402                                      ; export func index
00012af: 09                                        ; string length
00012b0: 6633 3278 342e 7375 62                   f32x4.sub  ; export name
00012b9: 00                                        ; export kind
00012ba: b502                                      ; export func index
00012bc: 09                                        ; string length
00012bd: 6636 3478 322e 7375 62                   f64x2.sub  ; export name
00012c6: 00                                        ; export kind
00012c7: b602                                      ; export func index
00012c9: 09                                        ; string length
00012ca: 6633 3278 342e 6469 76                   f32x4.div  ; export name
00012d3: 00                                        ; export kind
00012d4: b702                                      ; export func index
00012d6: 09                                        ; string length
00012d7: 6636 3478 322e 6469 76                   f64x2.div  ; export name
00012e0: 00                                        ; export kind
00012e1: b802                                      ; export func index
00012e3: 09                                        ; string length
00012e4: 6633 3278 342e 6d75 6c                   f32x4.mul  ; export name
00012ed: 00                                        ; export kind
00012ee: b902                                      ; export func index
00012f0: 09                                        ; string length
00012f1: 6636 3478 322e 6d75 6c                   f64x2.mul  ; export name
00012fa: 00                                        ; export kind
00012fb: ba02                                      ; export func index
00012fd: 0a                                        ; string length
00012fe: 6633 3278 342e 7371 7274                 f32x4.sqrt  ; export name
0001308: 00                                        ; export kind
0001309: bb02                                      ; export func index
000130b: 0a                                        ; string length
000130c: 6636 3478 322e 7371 7274                 f64x2.sqrt  ; export name
0001316: 00                                        ; export kind
0001317: bc02                                      ; export func index
0001319: 15                                        ; string length
000131a: 6633 3278 342e 636f 6e76 6572 745f 732f  f32x4.convert_s/
000132a: 6933 3278 34                             i32x4  ; export name
000132f: 00                                        ; export kind
0001330: bd02                                      ; export func index
0001332: 15                                        ; string length
0001333: 6633 3278 342e 636f 6e76 6572 745f 752f  f32x4.convert_u/
0001343: 6933 3278 34                             i32x4  ; export name
0001348: 00                                        ; export kind
0001349: be02                                      ; export func index
000134b: 15                                        ; string length
000134c: 6636 3478 322e 636f 6e76 6572 745f 732f  f64x2.convert_s/
000135c: 6936 3478 32                             i64x2  ; export name
0001361: 00                                        ; export kind
0001362: bf02                                      ; export func index
0001364: 15                                        ; string length
0001365: 6636 3478 322e 636f 6e76 6572 745f 752f  f64x2.convert_u/
0001375: 6936 3478 32                             i64x2  ; export name
000137a: 00                                        ; export kind
000137b: c002                                      ; export func index
000137d: 17                                        ; string length
000137e: 6933 3278 342e 7472 756e 635f 732f 6633  i32x4.trunc_s/f3
000138e: 3278 343a 7361 74                        2x4:sat  ; export name
0001395: 00                                        ; export kind
0001396: c102                                      ; export func index
0001398: 17                                        ; string length
0001399: 6933 3278 342e 7472 756e 635f 752f 6633  i32x4.trunc_u/f3
00013a9: 3278 343a 7361 74                        2x4:sat  ; export name
00013b0: 00                                        ; export kind
00013b1: c202                                      ; export func index
00013b3: 17                                        ; string length
00013b4: 6936 3478 322e 7472 756e 635f 732f 6636  i64x2.trunc_s/f6
00013c4: 3478 323a 7361 74                        4x2:sat  ; export name
00013cb: 00                                        ; export kind
00013cc: c302                                      ; export func index
00013ce: 17                                        ; string length
00013cf: 6936 3478 322e 7472 756e 635f 752f 6636  i64x2.trunc_u/f6
00013df: 3478 323a 7361 74                        4x2:sat  ; export name
00013e6: 00                                        ; export kind
00013e7: c402                                      ; export func index
00013e9: 0b                                        ; string length
00013ea: 6174 6f6d 6963 2e77 616b 65              atomic.wake  ; export name
00013f5: 00                                        ; export kind
00013f6: c502                                      ; export func index
00013f8: 0f                                        ; string length
00013f9: 6933 322e 6174 6f6d 6963 2e77 6169 74    i32.atomic.wait  ; export name
0001408: 00                                        ; export kind
0001409: c602                                      ; export func index
000140b: 0f                                        ; string length
000140c: 6936 342e 6174 6f6d 6963 2e77 6169 74    i64.atomic.wait  ; export name
000141b: 00                                        ; export kind
000141c: c702                                      ; export func index
000141e: 0f                                        ; string length
000141f: 6933 322e 6174 6f6d 6963 2e6c 6f61 64    i32.atomic.load  ; export name
000142e: 00                                        ; export kind
000142f: c802                                      ; export func index
0001431: 0f                                        ; string length
0001432: 6936 342e 6174 6f6d 6963 2e6c 6f61 64    i64.atomic.load  ; export name
0001441: 00                                        ; export kind
0001442: c902                                      ; export func index
0001444: 12                                        ; string length
0001445: 6933 322e 6174 6f6d 6963 2e6c 6f61 6438  i32.atomic.load8
0001455: 5f75                                     _u  ; export name
0001457: 00                                        ; export kind
0001458: ca02                                      ; export func index
000145a: 13                                        ; string length
000145b: 6933 322e 6174 6f6d 6963 2e6c 6f61 6431  i32.atomic.load1
000146b: 365f 75                                  6_u  ; export name
000146e: 00                                        ; export kind
000146f: cb02                                      ; export func index
0001471: 12                                        ; string length
0001472: 6936 342e 6174 6f6d 6963 2e6c 6f61 6438  i64.atomic.load8
0001482: 5f75                                     _u  ; export name
0001484: 00                                        ; export kind
0001485: cc02                                      ; export func index
0001487: 13                                        ; string length
0001488: 6936 342e 6174 6f6d 6963 2e6c 6f61 6431  i64.atomic.load1
0001498: 365f 75                                  6_u  ; export name
000149b: 00                                        ; export kind
000149c: cd02                                      ; export func index
000149e: 13                                        ; string length
000149f: 6936 342e 6174 6f6d 6963 2e6c 6f61 6433  i64.atomic.load3
00014af: 325f 75                                  2_u  ; export name
00014b2: 00                                        ; export kind
00014b3: ce02                                      ; export func index
00014b5: 10                                        ; string length
00014b6: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store  ; export name
00014c6: 00                                        ; export kind
00014c7: cf02                                      ; export func index
00014c9: 10                                        ; string length
00014ca: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store  ; export name
00014da: 00                                        ; export kind
00014db: d002                                      ; export func index
00014dd: 11                                        ; string length
00014de: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
00014ee: 38                                       8  ; export name
00014ef: 00                                        ; export kind
00014f0: d102                                      ; export func index
00014f2: 12                                        ; string length
00014f3: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
0001503: 3136                                     16  ; export name
0001505: 00                                        ; export kind
0001506: d202                                      ; export func index
0001508: 11                                        ; string length
0001509: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001519: 38                                       8  ; export name
000151a: 00                                        ; export kind
000151b: d302                                      ; export func index
000151d: 12                                        ; string length
000151e: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
000152e: 3136                                     16  ; export name
0001530: 00                                        ; export kind
0001531: d402                                      ; export func index
0001533: 12                                        ; string length
0001534: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001544: 3332                                     32  ; export name
0001546: 00                                        ; export kind
0001547: d502                                      ; export func index
0001549: 12                                        ; string length
000154a: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
000155a: 6464                                     dd  ; export name
000155c: 00                                        ; export kind
000155d: d602                                      ; export func index
000155f: 12                                        ; string length
0001560: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
0001570: 6464                                     dd  ; export name
0001572: 00                                        ; export kind
0001573: d702                                      ; export func index
0001575: 15                                        ; string length
0001576: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
0001586: 752e 6164 64                             u.add  ; export name
000158b: 00                                        ; export kind
000158c: d802                                      ; export func index
000158e: 16                                        ; string length
000158f: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000159f: 5f75 2e61 6464                           _u.add  ; export name
00015a5: 00                                        ; export kind
00015a6: d902                                      ; export func index
00015a8: 15                                        ; string length
00015a9: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
00015b9: 752e 6164 64                             u.add  ; export name
00015be: 00                                        ; export kind
00015bf: da02                                      ; export func index
00015c1: 16                                        ; string length
00015c2: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00015d2: 5f75 2e61 6464                           _u.add  ; export name
00015d8: 00                                        ; export kind
00015d9: db02                                      ; export func index
00015db: 16                                        ; string length
00015dc: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00015ec: 5f75 2e61 6464                           _u.add  ; export name
00015f2: 00                                        ; export kind
00015f3: dc02                                      ; export func index
00015f5: 12                                        ; string length
00015f6: 6933 322e 6174 6f6d 6963 2e72 6d77 2e73  i32.atomic.rmw.s
0001606: 7562                                     ub  ; export name
0001608: 00                                        ; export kind
0001609: dd02                                      ; export func index
000160b: 12                                        ; string length
000160c: 6936 342e 6174 6f6d 6963 2e72 6d77 2e73  i64.atomic.rmw.s
000161c: 7562                                     ub  ; export name
000161e: 00                                        ; export kind
000161f: de02                                      ; export func index
0001621: 15                                        ; string length
0001622: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
0001632: 752e 7375 62                             u.sub  ; export name
0001637: 00                                        ; export kind
0001638: df02                                      ; export func index
000163a: 16                                        ; string length
000163b: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000164b: 5f75 2e73 7562                           _u.sub  ; export name
0001651: 00                                        ; export kind
0001652: e002                                      ; export func index
0001654: 15                                        ; string length
0001655: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
0001665: 752e 7375 62                             u.sub  ; export name
000166a: 00                                        ; export kind
000166b: e102                                      ; export func index
000166d: 16                                        ; string length
000166e: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
000167e: 5f75 2e73 7562                           _u.sub  ; export name
0001684: 00                                        ; export kind
0001685: e202                                      ; export func index
0001687: 16                                        ; string length
0001688: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001698: 5f75 2e73 7562                           _u.sub  ; export name
000169e: 00                                        ; export kind
000169f: e302                                      ; export func index
00016a1: 12                                        ; string length
00016a2: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
00016b2: 6e64                                     nd  ; export name
00016b4: 00                                        ; export kind
00016b5: e402                                      ; export func index
00016b7: 12                                        ; string length
00016b8: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
00016c8: 6e64                                     nd  ; export name
00016ca: 00                                        ; export kind
00016cb: e502                                      ; export func index
00016cd: 15                                        ; string length
00016ce: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
00016de: 752e 616e 64                             u.and  ; export name
00016e3: 00                                        ; export kind
00016e4: e602                                      ; export func index
00016e6: 16                                        ; string length
00016e7: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00016f7: 5f75 2e61 6e64                           _u.and  ; export name
00016fd: 00                                        ; export kind
00016fe: e702                                      ; export func index
0001700: 15                                        ; string length
0001701: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
0001711: 752e 616e 64                             u.and  ; export name
0001716: 00                                        ; export kind
0001717: e802                                      ; export func index
0001719: 16                                        ; string length
000171a: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
000172a: 5f75 2e61 6e64                           _u.and  ; export name
0001730: 00                                        ; export kind
0001731: e902                                      ; export func index
0001733: 16                                        ; string length
0001734: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001744: 5f75 2e61 6e64                           _u.and  ; export name
000174a: 00                                        ; export kind
000174b: ea02                                      ; export func index
000174d: 11                                        ; string length
000174e: 6933 322e 6174 6f6d 6963 2e72 6d77 2e6f  i32.atomic.rmw.o
000175e: 72                                       r  ; export name
000175f: 00                                        ; export kind
0001760: eb02                                      ; export func index
0001762: 11                                        ; string length
0001763: 6936 342e 6174 6f6d 6963 2e72 6d77 2e6f  i64.atomic.rmw.o
0001773: 72                                       r  ; export name
0001774: 00                                        ; export kind
0001775: ec02                                      ; export func index
0001777: 14                                        ; string length
0001778: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
0001788: 752e 6f72                                u.or  ; export name
000178c: 00                                        ; export kind
000178d: ed02                                      ; export func index
000178f: 15                                        ; string length
0001790: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00017a0: 5f75 2e6f 72                             _u.or  ; export name
00017a5: 00                                        ; export kind
00017a6: ee02                                      ; export func index
00017a8: 14                                        ; string length
00017a9: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
00017b9: 752e 6f72                                u.or  ; export name
00017bd: 00                                        ; export kind
00017be: ef02                                      ; export func index
00017c0: 15                                        ; string length
00017c1: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00017d1: 5f75 2e6f 72                             _u.or  ; export name
00017d6: 00                                        ; export kind
00017d7: f002                                      ; export func index
00017d9: 15                                        ; string length
00017da: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00017ea: 5f75 2e6f 72                             _u.or  ; export name
00017ef: 00                                        ; export kind
00017f0: f102                                      ; export func index
00017f2: 12                                        ; string length
00017f3: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
0001803: 6f72                                     or  ; export name
0001805: 00                                        ; export kind
0001806: f202                                      ; export func index
0001808: 12                                        ; string length
0001809: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
0001819: 6f72                                     or  ; export name
000181b: 00                                        ; export kind
000181c: f302                                      ; export func index
000181e: 15                                        ; string length
000181f: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
000182f: 752e 786f 72                             u.xor  ; export name
0001834: 00                                        ; export kind
0001835: f402                                      ; export func index
0001837: 16                                        ; string length
0001838: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001848: 5f75 2e78 6f72                           _u.xor  ; export name
000184e: 00                                        ; export kind
000184f: f502                                      ; export func index
0001851: 15                                        ; string length
0001852: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
0001862: 752e 786f 72                             u.xor  ; export name
0001867: 00                                        ; export kind
0001868: f602                                      ; export func index
000186a: 16                                        ; string length
000186b: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
000187b: 5f75 2e78 6f72                           _u.xor  ; export name
0001881: 00                                        ; export kind
0001882: f702                                      ; export func index
0001884: 16                                        ; string length
0001885: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001895: 5f75 2e78 6f72                           _u.xor  ; export name
000189b: 00                                        ; export kind
000189c: f802                                      ; export func index
000189e: 13                                        ; string length
000189f: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
00018af: 6368 67                                  chg  ; export name
00018b2: 00                                        ; export kind
00018b3: f902                                      ; export func index
00018b5: 13                                        ; string length
00018b6: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
00018c6: 6368 67                                  chg  ; export name
00018c9: 00                                        ; export kind
00018ca: fa02                                      ; export func index
00018cc: 16                                        ; string length
00018cd: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
00018dd: 752e 7863 6867                           u.xchg  ; export name
00018e3: 00                                        ; export kind
00018e4: fb02                                      ; export func index
00018e6: 17                                        ; string length
00018e7: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00018f7: 5f75 2e78 6368 67                        _u.xchg  ; export name
00018fe: 00                                        ; export kind
00018ff: fc02                                      ; export func index
0001901: 16                                        ; string length
0001902: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
0001912: 752e 7863 6867                           u.xchg  ; export name
0001918: 00                                        ; export kind
0001919: fd02                                      ; export func index
000191b: 17                                        ; string length
000191c: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
000192c: 5f75 2e78 6368 67                        _u.xchg  ; export name
0001933: 00                                        ; export kind
0001934: fe02                                      ; export func index
0001936: 17                                        ; string length
0001937: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001947: 5f75 2e78 6368 67                        _u.xchg  ; export name
000194e: 00                                        ; export kind
000194f: ff02                                      ; export func index
0001951: 16                                        ; string length
0001952: 6933 322e 6174 6f6d 6963 2e72 6d77 2e63  i32.atomic.rmw.c
0001962: 6d70 7863 6867                           mpxchg  ; export name
0001968: 00                                        ; export kind
0001969: 8003                                      ; export func index
000196b: 16                                        ; string length
000196c: 6936 342e 6174 6f6d 6963 2e72 6d77 2e63  i64.atomic.rmw.c
000197c: 6d70 7863 6867                           mpxchg  ; export name
0001982: 00                                        ; export kind
0001983: 8103                                      ; export func index
0001985: 19                                        ; string length
0001986: 6933 322e 6174 6f6d 6963 2e72 6d77 385f  i32.atomic.rmw8_
0001996: 752e 636d 7078 6368 67                   u.cmpxchg  ; export name
000199f: 00                                        ; export kind
00019a0: 8203                                      ; export func index
00019a2: 1a                                        ; string length
00019a3: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00019b3: 5f75 2e63 6d70 7863 6867                 _u.cmpxchg  ; export name
00019bd: 00                                        ; export kind
00019be: 8303                                      ; export func index
00019c0: 19                                        ; string length
00019c1: 6936 342e 6174 6f6d 6963 2e72 6d77 385f  i64.atomic.rmw8_
00019d1: 752e 636d 7078 6368 67                   u.cmpxchg  ; export name
00019da: 00                                        ; export kind
00019db: 8403                                      ; export func index
00019dd: 1a                                        ; string length
00019de: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00019ee: 5f75 2e63 6d70 7863 6867                 _u.cmpxchg  ; export name
00019f8: 00                                        ; export kind
00019f9: 8503                                      ; export func index
00019fb: 1a                                        ; string length
00019fc: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001a0c: 5f75 2e63 6d70 7863 6867                 _u.cmpxchg  ; export name
0001a16: 00                                        ; export kind
0001a17: 8603                                      ; export func index
; move data: [1c4, 1a19) -> [1c5, 1a1a)
00001c3: d530                                      ; FIXUP section size
; section "Elem" (9)
0001a1a: 09                                        ; section code
0001a1b: 00                                        ; section size (guess)
0001a1c: 01                                        ; num elem segments
; elem segment header 0
0001a1d: 00                                        ; table index
0001a1e: 41                                        ; i32.const
0001a1f: 00                                        ; i32 literal
0001a20: 0b                                        ; end
0001a21: 02                                        ; num function indices
0001a22: 01                                        ; function index
0001a23: 01                                        ; function index
0001a1b: 08                                        ; FIXUP section size
; section "Code" (10)
0001a24: 0a                                        ; section code
0001a25: 00                                        ; section size (guess)
0001a26: 8603                                      ; num functions
; function body 0
0001a28: 00                                        ; func body size (guess)
0001a29: 00                                        ; local decl count
0001a2a: 0b                                        ; end
0001a28: 02                                        ; FIXUP func body size
; function body 1
0001a2b: 00                                        ; func body size (guess)
0001a2c: 00                                        ; local decl count
0001a2d: 00                                        ; unreachable
0001a2e: 0b                                        ; end
0001a2b: 03                                        ; FIXUP func body size
; function body 2
0001a2f: 00                                        ; func body size (guess)
0001a30: 00                                        ; local decl count
0001a31: 0c                                        ; br
0001a32: 00                                        ; break depth
0001a33: 0b                                        ; end
0001a2f: 04                                        ; FIXUP func body size
; function body 3
0001a34: 00                                        ; func body size (guess)
0001a35: 00                                        ; local decl count
0001a36: 41                                        ; i32.const
0001a37: 01                                        ; i32 literal
0001a38: 0e                                        ; br_table
0001a39: 00                                        ; num targets
0001a3a: 00                                        ; break depth for default
0001a3b: 0b                                        ; end
0001a34: 07                                        ; FIXUP func body size
; function body 4
0001a3c: 00                                        ; func body size (guess)
0001a3d: 00                                        ; local decl count
0001a3e: 0f                                        ; return
0001a3f: 0b                                        ; end
0001a3c: 03                                        ; FIXUP func body size
; function body 5
0001a40: 00                                        ; func body size (guess)
0001a41: 00                                        ; local decl count
0001a42: 10                                        ; call
0001a43: 01                                        ; function index
0001a44: 0b                                        ; end
0001a40: 04                                        ; FIXUP func body size
; function body 6
0001a45: 00                                        ; func body size (guess)
0001a46: 00                                        ; local decl count
0001a47: 41                                        ; i32.const
0001a48: 01                                        ; i32 literal
0001a49: 11                                        ; call_indirect
0001a4a: 00                                        ; signature index
0001a4b: 00                                        ; call_indirect reserved
0001a4c: 0b                                        ; end
0001a45: 07                                        ; FIXUP func body size
; function body 7
0001a4d: 00                                        ; func body size (guess)
0001a4e: 00                                        ; local decl count
0001a4f: 41                                        ; i32.const
0001a50: 01                                        ; i32 literal
0001a51: 1a                                        ; drop
0001a52: 0b                                        ; end
0001a4d: 05                                        ; FIXUP func body size
; function body 8
0001a53: 00                                        ; func body size (guess)
0001a54: 00                                        ; local decl count
0001a55: 41                                        ; i32.const
0001a56: 01                                        ; i32 literal
0001a57: 41                                        ; i32.const
0001a58: 02                                        ; i32 literal
0001a59: 41                                        ; i32.const
0001a5a: 03                                        ; i32 literal
0001a5b: 1b                                        ; select
0001a5c: 1a                                        ; drop
0001a5d: 0b                                        ; end
0001a53: 0a                                        ; FIXUP func body size
; function body 9
0001a5e: 00                                        ; func body size (guess)
0001a5f: 01                                        ; local decl count
0001a60: 01                                        ; local type count
0001a61: 7f                                        ; i32
0001a62: 20                                        ; get_local
0001a63: 00                                        ; local index
0001a64: 1a                                        ; drop
0001a65: 0b                                        ; end
0001a5e: 07                                        ; FIXUP func body size
; function body 10
0001a66: 00                                        ; func body size (guess)
0001a67: 01                                        ; local decl count
0001a68: 01                                        ; local type count
0001a69: 7f                                        ; i32
0001a6a: 41                                        ; i32.const
0001a6b: 01                                        ; i32 literal
0001a6c: 21                                        ; set_local
0001a6d: 00                                        ; local index
0001a6e: 0b                                        ; end
0001a66: 08                                        ; FIXUP func body size
; function body 11
0001a6f: 00                                        ; func body size (guess)
0001a70: 01                                        ; local decl count
0001a71: 01                                        ; local type count
0001a72: 7f                                        ; i32
0001a73: 41                                        ; i32.const
0001a74: 01                                        ; i32 literal
0001a75: 22                                        ; tee_local
0001a76: 00                                        ; local index
0001a77: 1a                                        ; drop
0001a78: 0b                                        ; end
0001a6f: 09                                        ; FIXUP func body size
; function body 12
0001a79: 00                                        ; func body size (guess)
0001a7a: 00                                        ; local decl count
0001a7b: 23                                        ; get_global
0001a7c: 00                                        ; global index
0001a7d: 1a                                        ; drop
0001a7e: 0b                                        ; end
0001a79: 05                                        ; FIXUP func body size
; function body 13
0001a7f: 00                                        ; func body size (guess)
0001a80: 00                                        ; local decl count
0001a81: 41                                        ; i32.const
0001a82: 01                                        ; i32 literal
0001a83: 24                                        ; set_global
0001a84: 00                                        ; global index
0001a85: 0b                                        ; end
0001a7f: 06                                        ; FIXUP func body size
; function body 14
0001a86: 00                                        ; func body size (guess)
0001a87: 00                                        ; local decl count
0001a88: 41                                        ; i32.const
0001a89: 01                                        ; i32 literal
0001a8a: 28                                        ; i32.load
0001a8b: 02                                        ; alignment
0001a8c: 02                                        ; load offset
0001a8d: 1a                                        ; drop
0001a8e: 0b                                        ; end
0001a86: 08                                        ; FIXUP func body size
; function body 15
0001a8f: 00                                        ; func body size (guess)
0001a90: 00                                        ; local decl count
0001a91: 41                                        ; i32.const
0001a92: 01                                        ; i32 literal
0001a93: 29                                        ; i64.load
0001a94: 03                                        ; alignment
0001a95: 02                                        ; load offset
0001a96: 1a                                        ; drop
0001a97: 0b                                        ; end
0001a8f: 08                                        ; FIXUP func body size
; function body 16
0001a98: 00                                        ; func body size (guess)
0001a99: 00                                        ; local decl count
0001a9a: 41                                        ; i32.const
0001a9b: 01                                        ; i32 literal
0001a9c: 2a                                        ; f32.load
0001a9d: 02                                        ; alignment
0001a9e: 02                                        ; load offset
0001a9f: 1a                                        ; drop
0001aa0: 0b                                        ; end
0001a98: 08                                        ; FIXUP func body size
; function body 17
0001aa1: 00                                        ; func body size (guess)
0001aa2: 00                                        ; local decl count
0001aa3: 41                                        ; i32.const
0001aa4: 01                                        ; i32 literal
0001aa5: 2b                                        ; f64.load
0001aa6: 03                                        ; alignment
0001aa7: 02                                        ; load offset
0001aa8: 1a                                        ; drop
0001aa9: 0b                                        ; end
0001aa1: 08                                        ; FIXUP func body size
; function body 18
0001aaa: 00                                        ; func body size (guess)
0001aab: 00                                        ; local decl count
0001aac: 41                                        ; i32.const
0001aad: 01                                        ; i32 literal
0001aae: 2c                                        ; i32.load8_s
0001aaf: 00                                        ; alignment
0001ab0: 02                                        ; load offset
0001ab1: 1a                                        ; drop
0001ab2: 0b                                        ; end
0001aaa: 08                                        ; FIXUP func body size
; function body 19
0001ab3: 00                                        ; func body size (guess)
0001ab4: 00                                        ; local decl count
0001ab5: 41                                        ; i32.const
0001ab6: 01                                        ; i32 literal
0001ab7: 2d                                        ; i32.load8_u
0001ab8: 00                                        ; alignment
0001ab9: 02                                        ; load offset
0001aba: 1a                                        ; drop
0001abb: 0b                                        ; end
0001ab3: 08                                        ; FIXUP func body size
; function body 20
0001abc: 00                                        ; func body size (guess)
0001abd: 00                                        ; local decl count
0001abe: 41                                        ; i32.const
0001abf: 01                                        ; i32 literal
0001ac0: 2e                                        ; i32.load16_s
0001ac1: 01                                        ; alignment
0001ac2: 02                                        ; load offset
0001ac3: 1a                                        ; drop
0001ac4: 0b                                        ; end
0001abc: 08                                        ; FIXUP func body size
; function body 21
0001ac5: 00                                        ; func body size (guess)
0001ac6: 00                                        ; local decl count
0001ac7: 41                                        ; i32.const
0001ac8: 01                                        ; i32 literal
0001ac9: 2f                                        ; i32.load16_u
0001aca: 01                                        ; alignment
0001acb: 02                                        ; load offset
0001acc: 1a                                        ; drop
0001acd: 0b                                        ; end
0001ac5: 08                                        ; FIXUP func body size
; function body 22
0001ace: 00                                        ; func body size (guess)
0001acf: 00                                        ; local decl count
0001ad0: 41                                        ; i32.const
0001ad1: 01                                        ; i32 literal
0001ad2: 30                                        ; i64.load8_s
0001ad3: 00                                        ; alignment
0001ad4: 02                                        ; load offset
0001ad5: 1a                                        ; drop
0001ad6: 0b                                        ; end
0001ace: 08                                        ; FIXUP func body size
; function body 23
0001ad7: 00                                        ; func body size (guess)
0001ad8: 00                                        ; local decl count
0001ad9: 41                                        ; i32.const
0001ada: 01                                        ; i32 literal
0001adb: 31                                        ; i64.load8_u
0001adc: 00                                        ; alignment
0001add: 02                                        ; load offset
0001ade: 1a                                        ; drop
0001adf: 0b                                        ; end
0001ad7: 08                                        ; FIXUP func body size
; function body 24
0001ae0: 00                                        ; func body size (guess)
0001ae1: 00                                        ; local decl count
0001ae2: 41                                        ; i32.const
0001ae3: 01                                        ; i32 literal
0001ae4: 32                                        ; i64.load16_s
0001ae5: 01                                        ; alignment
0001ae6: 02                                        ; load offset
0001ae7: 1a                                        ; drop
0001ae8: 0b                                        ; end
0001ae0: 08                                        ; FIXUP func body size
; function body 25
0001ae9: 00                                        ; func body size (guess)
0001aea: 00                                        ; local decl count
0001aeb: 41                                        ; i32.const
0001aec: 01                                        ; i32 literal
0001aed: 33                                        ; i64.load16_u
0001aee: 01                                        ; alignment
0001aef: 02                                        ; load offset
0001af0: 1a                                        ; drop
0001af1: 0b                                        ; end
0001ae9: 08                                        ; FIXUP func body size
; function body 26
0001af2: 00                                        ; func body size (guess)
0001af3: 00                                        ; local decl count
0001af4: 41                                        ; i32.const
0001af5: 01                                        ; i32 literal
0001af6: 34                                        ; i64.load32_s
0001af7: 02                                        ; alignment
0001af8: 02                                        ; load offset
0001af9: 1a                                        ; drop
0001afa: 0b                                        ; end
0001af2: 08                                        ; FIXUP func body size
; function body 27
0001afb: 00                                        ; func body size (guess)
0001afc: 00                                        ; local decl count
0001afd: 41                                        ; i32.const
0001afe: 01                                        ; i32 literal
0001aff: 35                                        ; i64.load32_u
0001b00: 02                                        ; alignment
0001b01: 02                                        ; load offset
0001b02: 1a                                        ; drop
0001b03: 0b                                        ; end
0001afb: 08                                        ; FIXUP func body size
; function body 28
0001b04: 00                                        ; func body size (guess)
0001b05: 00                                        ; local decl count
0001b06: 41                                        ; i32.const
0001b07: 01                                        ; i32 literal
0001b08: 41                                        ; i32.const
0001b09: 02                                        ; i32 literal
0001b0a: 36                                        ; i32.store
0001b0b: 02                                        ; alignment
0001b0c: 02                                        ; store offset
0001b0d: 0b                                        ; end
0001b04: 09                                        ; FIXUP func body size
; function body 29
0001b0e: 00                                        ; func body size (guess)
0001b0f: 00                                        ; local decl count
0001b10: 41                                        ; i32.const
0001b11: 01                                        ; i32 literal
0001b12: 42                                        ; i64.const
0001b13: 02                                        ; i64 literal
0001b14: 37                                        ; i64.store
0001b15: 03                                        ; alignment
0001b16: 02                                        ; store offset
0001b17: 0b                                        ; end
0001b0e: 09                                        ; FIXUP func body size
; function body 30
0001b18: 00                                        ; func body size (guess)
0001b19: 00                                        ; local decl count
0001b1a: 41                                        ; i32.const
0001b1b: 01                                        ; i32 literal
0001b1c: 43                                        ; f32.const
0001b1d: 0000 0040                                 ; f32 literal
0001b21: 38                                        ; f32.store
0001b22: 02                                        ; alignment
0001b23: 02                                        ; store offset
0001b24: 0b                                        ; end
0001b18: 0c                                        ; FIXUP func body size
; function body 31
0001b25: 00                                        ; func body size (guess)
0001b26: 00                                        ; local decl count
0001b27: 41                                        ; i32.const
0001b28: 01                                        ; i32 literal
0001b29: 44                                        ; f64.const
0001b2a: 0000 0000 0000 0040                       ; f64 literal
0001b32: 39                                        ; f64.store
0001b33: 03                                        ; alignment
0001b34: 02                                        ; store offset
0001b35: 0b                                        ; end
0001b25: 10                                        ; FIXUP func body size
; function body 32
0001b36: 00                                        ; func body size (guess)
0001b37: 00                                        ; local decl count
0001b38: 41                                        ; i32.const
0001b39: 01                                        ; i32 literal
0001b3a: 41                                        ; i32.const
0001b3b: 02                                        ; i32 literal
0001b3c: 3a                                        ; i32.store8
0001b3d: 00                                        ; alignment
0001b3e: 02                                        ; store offset
0001b3f: 0b                                        ; end
0001b36: 09                                        ; FIXUP func body size
; function body 33
0001b40: 00                                        ; func body size (guess)
0001b41: 00                                        ; local decl count
0001b42: 41                                        ; i32.const
0001b43: 01                                        ; i32 literal
0001b44: 41                                        ; i32.const
0001b45: 02                                        ; i32 literal
0001b46: 3b                                        ; i32.store16
0001b47: 01                                        ; alignment
0001b48: 02                                        ; store offset
0001b49: 0b                                        ; end
0001b40: 09                                        ; FIXUP func body size
; function body 34
0001b4a: 00                                        ; func body size (guess)
0001b4b: 00                                        ; local decl count
0001b4c: 41                                        ; i32.const
0001b4d: 01                                        ; i32 literal
0001b4e: 42                                        ; i64.const
0001b4f: 02                                        ; i64 literal
0001b50: 3c                                        ; i64.store8
0001b51: 00                                        ; alignment
0001b52: 02                                        ; store offset
0001b53: 0b                                        ; end
0001b4a: 09                                        ; FIXUP func body size
; function body 35
0001b54: 00                                        ; func body size (guess)
0001b55: 00                                        ; local decl count
0001b56: 41                                        ; i32.const
0001b57: 01                                        ; i32 literal
0001b58: 42                                        ; i64.const
0001b59: 02                                        ; i64 literal
0001b5a: 3d                                        ; i64.store16
0001b5b: 01                                        ; alignment
0001b5c: 02                                        ; store offset
0001b5d: 0b                                        ; end
0001b54: 09                                        ; FIXUP func body size
; function body 36
0001b5e: 00                                        ; func body size (guess)
0001b5f: 00                                        ; local decl count
0001b60: 41                                        ; i32.const
0001b61: 01                                        ; i32 literal
0001b62: 42                                        ; i64.const
0001b63: 02                                        ; i64 literal
0001b64: 3e                                        ; i64.store32
0001b65: 02                                        ; alignment
0001b66: 02                                        ; store offset
0001b67: 0b                                        ; end
0001b5e: 09                                        ; FIXUP func body size
; function body 37
0001b68: 00                                        ; func body size (guess)
0001b69: 00                                        ; local decl count
0001b6a: 3f                                        ; memory.size
0001b6b: 00                                        ; memory.size reserved
0001b6c: 1a                                        ; drop
0001b6d: 0b                                        ; end
0001b68: 05                                        ; FIXUP func body size
; function body 38
0001b6e: 00                                        ; func body size (guess)
0001b6f: 00                                        ; local decl count
0001b70: 41                                        ; i32.const
0001b71: 01                                        ; i32 literal
0001b72: 40                                        ; memory.grow
0001b73: 00                                        ; memory.grow reserved
0001b74: 1a                                        ; drop
0001b75: 0b                                        ; end
0001b6e: 07                                        ; FIXUP func body size
; function body 39
0001b76: 00                                        ; func body size (guess)
0001b77: 00                                        ; local decl count
0001b78: 41                                        ; i32.const
0001b79: 01                                        ; i32 literal
0001b7a: 1a                                        ; drop
0001b7b: 0b                                        ; end
0001b76: 05                                        ; FIXUP func body size
; function body 40
0001b7c: 00                                        ; func body size (guess)
0001b7d: 00                                        ; local decl count
0001b7e: 42                                        ; i64.const
0001b7f: 01                                        ; i64 literal
0001b80: 1a                                        ; drop
0001b81: 0b                                        ; end
0001b7c: 05                                        ; FIXUP func body size
; function body 41
0001b82: 00                                        ; func body size (guess)
0001b83: 00                                        ; local decl count
0001b84: 43                                        ; f32.const
0001b85: 0000 803f                                 ; f32 literal
0001b89: 1a                                        ; drop
0001b8a: 0b                                        ; end
0001b82: 08                                        ; FIXUP func body size
; function body 42
0001b8b: 00                                        ; func body size (guess)
0001b8c: 00                                        ; local decl count
0001b8d: 44                                        ; f64.const
0001b8e: 0000 0000 0000 f03f                       ; f64 literal
0001b96: 1a                                        ; drop
0001b97: 0b                                        ; end
0001b8b: 0c                                        ; FIXUP func body size
; function body 43
0001b98: 00                                        ; func body size (guess)
0001b99: 00                                        ; local decl count
0001b9a: 41                                        ; i32.const
0001b9b: 01                                        ; i32 literal
0001b9c: 45                                        ; i32.eqz
0001b9d: 1a                                        ; drop
0001b9e: 0b                                        ; end
0001b98: 06                                        ; FIXUP func body size
; function body 44
0001b9f: 00                                        ; func body size (guess)
0001ba0: 00                                        ; local decl count
0001ba1: 41                                        ; i32.const
0001ba2: 01                                        ; i32 literal
0001ba3: 41                                        ; i32.const
0001ba4: 02                                        ; i32 literal
0001ba5: 46                                        ; i32.eq
0001ba6: 1a                                        ; drop
0001ba7: 0b                                        ; end
0001b9f: 08                                        ; FIXUP func body size
; function body 45
0001ba8: 00                                        ; func body size (guess)
0001ba9: 00                                        ; local decl count
0001baa: 41                                        ; i32.const
0001bab: 01                                        ; i32 literal
0001bac: 41                                        ; i32.const
0001bad: 02                                        ; i32 literal
0001bae: 47                                        ; i32.ne
0001baf: 1a                                        ; drop
0001bb0: 0b                                        ; end
0001ba8: 08                                        ; FIXUP func body size
; function body 46
0001bb1: 00                                        ; func body size (guess)
0001bb2: 00                                        ; local decl count
0001bb3: 41                                        ; i32.const
0001bb4: 01                                        ; i32 literal
0001bb5: 41                                        ; i32.const
0001bb6: 02                                        ; i32 literal
0001bb7: 48                                        ; i32.lt_s
0001bb8: 1a                                        ; drop
0001bb9: 0b                                        ; end
0001bb1: 08                                        ; FIXUP func body size
; function body 47
0001bba: 00                                        ; func body size (guess)
0001bbb: 00                                        ; local decl count
0001bbc: 41                                        ; i32.const
0001bbd: 01                                        ; i32 literal
0001bbe: 41                                        ; i32.const
0001bbf: 02                                        ; i32 literal
0001bc0: 49                                        ; i32.lt_u
0001bc1: 1a                                        ; drop
0001bc2: 0b                                        ; end
0001bba: 08                                        ; FIXUP func body size
; function body 48
0001bc3: 00                                        ; func body size (guess)
0001bc4: 00                                        ; local decl count
0001bc5: 41                                        ; i32.const
0001bc6: 01                                        ; i32 literal
0001bc7: 41                                        ; i32.const
0001bc8: 02                                        ; i32 literal
0001bc9: 4a                                        ; i32.gt_s
0001bca: 1a                                        ; drop
0001bcb: 0b                                        ; end
0001bc3: 08                                        ; FIXUP func body size
; function body 49
0001bcc: 00                                        ; func body size (guess)
0001bcd: 00                                        ; local decl count
0001bce: 41                                        ; i32.const
0001bcf: 01                                        ; i32 literal
0001bd0: 41                                        ; i32.const
0001bd1: 02                                        ; i32 literal
0001bd2: 4b                                        ; i32.gt_u
0001bd3: 1a                                        ; drop
0001bd4: 0b                                        ; end
0001bcc: 08                                        ; FIXUP func body size
; function body 50
0001bd5: 00                                        ; func body size (guess)
0001bd6: 00                                        ; local decl count
0001bd7: 41                                        ; i32.const
0001bd8: 01                                        ; i32 literal
0001bd9: 41                                        ; i32.const
0001bda: 02                                        ; i32 literal
0001bdb: 4c                                        ; i32.le_s
0001bdc: 1a                                        ; drop
0001bdd: 0b                                        ; end
0001bd5: 08                                        ; FIXUP func body size
; function body 51
0001bde: 00                                        ; func body size (guess)
0001bdf: 00                                        ; local decl count
0001be0: 41                                        ; i32.const
0001be1: 01                                        ; i32 literal
0001be2: 41                                        ; i32.const
0001be3: 02                                        ; i32 literal
0001be4: 4d                                        ; i32.le_u
0001be5: 1a                                        ; drop
0001be6: 0b                                        ; end
0001bde: 08                                        ; FIXUP func body size
; function body 52
0001be7: 00                                        ; func body size (guess)
0001be8: 00                                        ; local decl count
0001be9: 41                                        ; i32.const
0001bea: 01                                        ; i32 literal
0001beb: 41                                        ; i32.const
0001bec: 02                                        ; i32 literal
0001bed: 4e                                        ; i32.ge_s
0001bee: 1a                                        ; drop
0001bef: 0b                                        ; end
0001be7: 08                                        ; FIXUP func body size
; function body 53
0001bf0: 00                                        ; func body size (guess)
0001bf1: 00                                        ; local decl count
0001bf2: 41                                        ; i32.const
0001bf3: 01                                        ; i32 literal
0001bf4: 41                                        ; i32.const
0001bf5: 02                                        ; i32 literal
0001bf6: 4f                                        ; i32.ge_u
0001bf7: 1a                                        ; drop
0001bf8: 0b                                        ; end
0001bf0: 08                                        ; FIXUP func body size
; function body 54
0001bf9: 00                                        ; func body size (guess)
0001bfa: 00                                        ; local decl count
0001bfb: 42                                        ; i64.const
0001bfc: 01                                        ; i64 literal
0001bfd: 50                                        ; i64.eqz
0001bfe: 1a                                        ; drop
0001bff: 0b                                        ; end
0001bf9: 06                                        ; FIXUP func body size
; function body 55
0001c00: 00                                        ; func body size (guess)
0001c01: 00                                        ; local decl count
0001c02: 42                                        ; i64.const
0001c03: 01                                        ; i64 literal
0001c04: 42                                        ; i64.const
0001c05: 02                                        ; i64 literal
0001c06: 51                                        ; i64.eq
0001c07: 1a                                        ; drop
0001c08: 0b                                        ; end
0001c00: 08                                        ; FIXUP func body size
; function body 56
0001c09: 00                                        ; func body size (guess)
0001c0a: 00                                        ; local decl count
0001c0b: 42                                        ; i64.const
0001c0c: 01                                        ; i64 literal
0001c0d: 42                                        ; i64.const
0001c0e: 02                                        ; i64 literal
0001c0f: 52                                        ; i64.ne
0001c10: 1a                                        ; drop
0001c11: 0b                                        ; end
0001c09: 08                                        ; FIXUP func body size
; function body 57
0001c12: 00                                        ; func body size (guess)
0001c13: 00                                        ; local decl count
0001c14: 42                                        ; i64.const
0001c15: 01                                        ; i64 literal
0001c16: 42                                        ; i64.const
0001c17: 02                                        ; i64 literal
0001c18: 53                                        ; i64.lt_s
0001c19: 1a                                        ; drop
0001c1a: 0b                                        ; end
0001c12: 08                                        ; FIXUP func body size
; function body 58
0001c1b: 00                                        ; func body size (guess)
0001c1c: 00                                        ; local decl count
0001c1d: 42                                        ; i64.const
0001c1e: 01                                        ; i64 literal
0001c1f: 42                                        ; i64.const
0001c20: 02                                        ; i64 literal
0001c21: 54                                        ; i64.lt_u
0001c22: 1a                                        ; drop
0001c23: 0b                                        ; end
0001c1b: 08                                        ; FIXUP func body size
; function body 59
0001c24: 00                                        ; func body size (guess)
0001c25: 00                                        ; local decl count
0001c26: 42                                        ; i64.const
0001c27: 01                                        ; i64 literal
0001c28: 42                                        ; i64.const
0001c29: 02                                        ; i64 literal
0001c2a: 55                                        ; i64.gt_s
0001c2b: 1a                                        ; drop
0001c2c: 0b                                        ; end
0001c24: 08                                        ; FIXUP func body size
; function body 60
0001c2d: 00                                        ; func body size (guess)
0001c2e: 00                                        ; local decl count
0001c2f: 42                                        ; i64.const
0001c30: 01                                        ; i64 literal
0001c31: 42                                        ; i64.const
0001c32: 02                                        ; i64 literal
0001c33: 56                                        ; i64.gt_u
0001c34: 1a                                        ; drop
0001c35: 0b                                        ; end
0001c2d: 08                                        ; FIXUP func body size
; function body 61
0001c36: 00                                        ; func body size (guess)
0001c37: 00                                        ; local decl count
0001c38: 42                                        ; i64.const
0001c39: 01                                        ; i64 literal
0001c3a: 42                                        ; i64.const
0001c3b: 02                                        ; i64 literal
0001c3c: 57                                        ; i64.le_s
0001c3d: 1a                                        ; drop
0001c3e: 0b                                        ; end
0001c36: 08                                        ; FIXUP func body size
; function body 62
0001c3f: 00                                        ; func body size (guess)
0001c40: 00                                        ; local decl count
0001c41: 42                                        ; i64.const
0001c42: 01                                        ; i64 literal
0001c43: 42                                        ; i64.const
0001c44: 02                                        ; i64 literal
0001c45: 58                                        ; i64.le_u
0001c46: 1a                                        ; drop
0001c47: 0b                                        ; end
0001c3f: 08                                        ; FIXUP func body size
; function body 63
0001c48: 00                                        ; func body size (guess)
0001c49: 00                                        ; local decl count
0001c4a: 42                                        ; i64.const
0001c4b: 01                                        ; i64 literal
0001c4c: 42                                        ; i64.const
0001c4d: 02                                        ; i64 literal
0001c4e: 59                                        ; i64.ge_s
0001c4f: 1a                                        ; drop
0001c50: 0b                                        ; end
0001c48: 08                                        ; FIXUP func body size
; function body 64
0001c51: 00                                        ; func body size (guess)
0001c52: 00                                        ; local decl count
0001c53: 42                                        ; i64.const
0001c54: 01                                        ; i64 literal
0001c55: 42                                        ; i64.const
0001c56: 02                                        ; i64 literal
0001c57: 5a                                        ; i64.ge_u
0001c58: 1a                                        ; drop
0001c59: 0b                                        ; end
0001c51: 08                                        ; FIXUP func body size
; function body 65
0001c5a: 00                                        ; func body size (guess)
0001c5b: 00                                        ; local decl count
0001c5c: 43                                        ; f32.const
0001c5d: 0000 803f                                 ; f32 literal
0001c61: 43                                        ; f32.const
0001c62: 0000 0040                                 ; f32 literal
0001c66: 5b                                        ; f32.eq
0001c67: 1a                                        ; drop
0001c68: 0b                                        ; end
0001c5a: 0e                                        ; FIXUP func body size
; function body 66
0001c69: 00                                        ; func body size (guess)
0001c6a: 00                                        ; local decl count
0001c6b: 43                                        ; f32.const
0001c6c: 0000 803f                                 ; f32 literal
0001c70: 43                                        ; f32.const
0001c71: 0000 0040                                 ; f32 literal
0001c75: 5c                                        ; f32.ne
0001c76: 1a                                        ; drop
0001c77: 0b                                        ; end
0001c69: 0e                                        ; FIXUP func body size
; function body 67
0001c78: 00                                        ; func body size (guess)
0001c79: 00                                        ; local decl count
0001c7a: 43                                        ; f32.const
0001c7b: 0000 803f                                 ; f32 literal
0001c7f: 43                                        ; f32.const
0001c80: 0000 0040                                 ; f32 literal
0001c84: 5d                                        ; f32.lt
0001c85: 1a                                        ; drop
0001c86: 0b                                        ; end
0001c78: 0e                                        ; FIXUP func body size
; function body 68
0001c87: 00                                        ; func body size (guess)
0001c88: 00                                        ; local decl count
0001c89: 43                                        ; f32.const
0001c8a: 0000 803f                                 ; f32 literal
0001c8e: 43                                        ; f32.const
0001c8f: 0000 0040                                 ; f32 literal
0001c93: 5e                                        ; f32.gt
0001c94: 1a                                        ; drop
0001c95: 0b                                        ; end
0001c87: 0e                                        ; FIXUP func body size
; function body 69
0001c96: 00                                        ; func body size (guess)
0001c97: 00                                        ; local decl count
0001c98: 43                                        ; f32.const
0001c99: 0000 803f                                 ; f32 literal
0001c9d: 43                                        ; f32.const
0001c9e: 0000 0040                                 ; f32 literal
0001ca2: 5f                                        ; f32.le
0001ca3: 1a                                        ; drop
0001ca4: 0b                                        ; end
0001c96: 0e                                        ; FIXUP func body size
; function body 70
0001ca5: 00                                        ; func body size (guess)
0001ca6: 00                                        ; local decl count
0001ca7: 43                                        ; f32.const
0001ca8: 0000 803f                                 ; f32 literal
0001cac: 43                                        ; f32.const
0001cad: 0000 0040                                 ; f32 literal
0001cb1: 60                                        ; f32.ge
0001cb2: 1a                                        ; drop
0001cb3: 0b                                        ; end
0001ca5: 0e                                        ; FIXUP func body size
; function body 71
0001cb4: 00                                        ; func body size (guess)
0001cb5: 00                                        ; local decl count
0001cb6: 44                                        ; f64.const
0001cb7: 0000 0000 0000 f03f                       ; f64 literal
0001cbf: 44                                        ; f64.const
0001cc0: 0000 0000 0000 0040                       ; f64 literal
0001cc8: 61                                        ; f64.eq
0001cc9: 1a                                        ; drop
0001cca: 0b                                        ; end
0001cb4: 16                                        ; FIXUP func body size
; function body 72
0001ccb: 00                                        ; func body size (guess)
0001ccc: 00                                        ; local decl count
0001ccd: 44                                        ; f64.const
0001cce: 0000 0000 0000 f03f                       ; f64 literal
0001cd6: 44                                        ; f64.const
0001cd7: 0000 0000 0000 0040                       ; f64 literal
0001cdf: 62                                        ; f64.ne
0001ce0: 1a                                        ; drop
0001ce1: 0b                                        ; end
0001ccb: 16                                        ; FIXUP func body size
; function body 73
0001ce2: 00                                        ; func body size (guess)
0001ce3: 00                                        ; local decl count
0001ce4: 44                                        ; f64.const
0001ce5: 0000 0000 0000 f03f                       ; f64 literal
0001ced: 44                                        ; f64.const
0001cee: 0000 0000 0000 0040                       ; f64 literal
0001cf6: 63                                        ; f64.lt
0001cf7: 1a                                        ; drop
0001cf8: 0b                                        ; end
0001ce2: 16                                        ; FIXUP func body size
; function body 74
0001cf9: 00                                        ; func body size (guess)
0001cfa: 00                                        ; local decl count
0001cfb: 44                                        ; f64.const
0001cfc: 0000 0000 0000 f03f                       ; f64 literal
0001d04: 44                                        ; f64.const
0001d05: 0000 0000 0000 0040                       ; f64 literal
0001d0d: 64                                        ; f64.gt
0001d0e: 1a                                        ; drop
0001d0f: 0b                                        ; end
0001cf9: 16                                        ; FIXUP func body size
; function body 75
0001d10: 00                                        ; func body size (guess)
0001d11: 00                                        ; local decl count
0001d12: 44                                        ; f64.const
0001d13: 0000 0000 0000 f03f                       ; f64 literal
0001d1b: 44                                        ; f64.const
0001d1c: 0000 0000 0000 0040                       ; f64 literal
0001d24: 65                                        ; f64.le
0001d25: 1a                                        ; drop
0001d26: 0b                                        ; end
0001d10: 16                                        ; FIXUP func body size
; function body 76
0001d27: 00                                        ; func body size (guess)
0001d28: 00                                        ; local decl count
0001d29: 44                                        ; f64.const
0001d2a: 0000 0000 0000 f03f                       ; f64 literal
0001d32: 44                                        ; f64.const
0001d33: 0000 0000 0000 0040                       ; f64 literal
0001d3b: 66                                        ; f64.ge
0001d3c: 1a                                        ; drop
0001d3d: 0b                                        ; end
0001d27: 16                                        ; FIXUP func body size
; function body 77
0001d3e: 00                                        ; func body size (guess)
0001d3f: 00                                        ; local decl count
0001d40: 41                                        ; i32.const
0001d41: 01                                        ; i32 literal
0001d42: 67                                        ; i32.clz
0001d43: 1a                                        ; drop
0001d44: 0b                                        ; end
0001d3e: 06                                        ; FIXUP func body size
; function body 78
0001d45: 00                                        ; func body size (guess)
0001d46: 00                                        ; local decl count
0001d47: 41                                        ; i32.const
0001d48: 01                                        ; i32 literal
0001d49: 68                                        ; i32.ctz
0001d4a: 1a                                        ; drop
0001d4b: 0b                                        ; end
0001d45: 06                                        ; FIXUP func body size
; function body 79
0001d4c: 00                                        ; func body size (guess)
0001d4d: 00                                        ; local decl count
0001d4e: 41                                        ; i32.const
0001d4f: 01                                        ; i32 literal
0001d50: 69                                        ; i32.popcnt
0001d51: 1a                                        ; drop
0001d52: 0b                                        ; end
0001d4c: 06                                        ; FIXUP func body size
; function body 80
0001d53: 00                                        ; func body size (guess)
0001d54: 00                                        ; local decl count
0001d55: 41                                        ; i32.const
0001d56: 01                                        ; i32 literal
0001d57: 41                                        ; i32.const
0001d58: 02                                        ; i32 literal
0001d59: 6a                                        ; i32.add
0001d5a: 1a                                        ; drop
0001d5b: 0b                                        ; end
0001d53: 08                                        ; FIXUP func body size
; function body 81
0001d5c: 00                                        ; func body size (guess)
0001d5d: 00                                        ; local decl count
0001d5e: 41                                        ; i32.const
0001d5f: 01                                        ; i32 literal
0001d60: 41                                        ; i32.const
0001d61: 02                                        ; i32 literal
0001d62: 6b                                        ; i32.sub
0001d63: 1a                                        ; drop
0001d64: 0b                                        ; end
0001d5c: 08                                        ; FIXUP func body size
; function body 82
0001d65: 00                                        ; func body size (guess)
0001d66: 00                                        ; local decl count
0001d67: 41                                        ; i32.const
0001d68: 01                                        ; i32 literal
0001d69: 41                                        ; i32.const
0001d6a: 02                                        ; i32 literal
0001d6b: 6c                                        ; i32.mul
0001d6c: 1a                                        ; drop
0001d6d: 0b                                        ; end
0001d65: 08                                        ; FIXUP func body size
; function body 83
0001d6e: 00                                        ; func body size (guess)
0001d6f: 00                                        ; local decl count
0001d70: 41                                        ; i32.const
0001d71: 01                                        ; i32 literal
0001d72: 41                                        ; i32.const
0001d73: 02                                        ; i32 literal
0001d74: 6d                                        ; i32.div_s
0001d75: 1a                                        ; drop
0001d76: 0b                                        ; end
0001d6e: 08                                        ; FIXUP func body size
; function body 84
0001d77: 00                                        ; func body size (guess)
0001d78: 00                                        ; local decl count
0001d79: 41                                        ; i32.const
0001d7a: 01                                        ; i32 literal
0001d7b: 41                                        ; i32.const
0001d7c: 02                                        ; i32 literal
0001d7d: 6e                                        ; i32.div_u
0001d7e: 1a                                        ; drop
0001d7f: 0b                                        ; end
0001d77: 08                                        ; FIXUP func body size
; function body 85
0001d80: 00                                        ; func body size (guess)
0001d81: 00                                        ; local decl count
0001d82: 41                                        ; i32.const
0001d83: 01                                        ; i32 literal
0001d84: 41                                        ; i32.const
0001d85: 02                                        ; i32 literal
0001d86: 6f                                        ; i32.rem_s
0001d87: 1a                                        ; drop
0001d88: 0b                                        ; end
0001d80: 08                                        ; FIXUP func body size
; function body 86
0001d89: 00                                        ; func body size (guess)
0001d8a: 00                                        ; local decl count
0001d8b: 41                                        ; i32.const
0001d8c: 01                                        ; i32 literal
0001d8d: 41                                        ; i32.const
0001d8e: 02                                        ; i32 literal
0001d8f: 70                                        ; i32.rem_u
0001d90: 1a                                        ; drop
0001d91: 0b                                        ; end
0001d89: 08                                        ; FIXUP func body size
; function body 87
0001d92: 00                                        ; func body size (guess)
0001d93: 00                                        ; local decl count
0001d94: 41                                        ; i32.const
0001d95: 01                                        ; i32 literal
0001d96: 41                                        ; i32.const
0001d97: 02                                        ; i32 literal
0001d98: 71                                        ; i32.and
0001d99: 1a                                        ; drop
0001d9a: 0b                                        ; end
0001d92: 08                                        ; FIXUP func body size
; function body 88
0001d9b: 00                                        ; func body size (guess)
0001d9c: 00                                        ; local decl count
0001d9d: 41                                        ; i32.const
0001d9e: 01                                        ; i32 literal
0001d9f: 41                                        ; i32.const
0001da0: 02                                        ; i32 literal
0001da1: 72                                        ; i32.or
0001da2: 1a                                        ; drop
0001da3: 0b                                        ; end
0001d9b: 08                                        ; FIXUP func body size
; function body 89
0001da4: 00                                        ; func body size (guess)
0001da5: 00                                        ; local decl count
0001da6: 41                                        ; i32.const
0001da7: 01                                        ; i32 literal
0001da8: 41                                        ; i32.const
0001da9: 02                                        ; i32 literal
0001daa: 73                                        ; i32.xor
0001dab: 1a                                        ; drop
0001dac: 0b                                        ; end
0001da4: 08                                        ; FIXUP func body size
; function body 90
0001dad: 00                                        ; func body size (guess)
0001dae: 00                                        ; local decl count
0001daf: 41                                        ; i32.const
0001db0: 01                                        ; i32 literal
0001db1: 41                                        ; i32.const
0001db2: 02                                        ; i32 literal
0001db3: 74                                        ; i32.shl
0001db4: 1a                                        ; drop
0001db5: 0b                                        ; end
0001dad: 08                                        ; FIXUP func body size
; function body 91
0001db6: 00                                        ; func body size (guess)
0001db7: 00                                        ; local decl count
0001db8: 41                                        ; i32.const
0001db9: 01                                        ; i32 literal
0001dba: 41                                        ; i32.const
0001dbb: 02                                        ; i32 literal
0001dbc: 75                                        ; i32.shr_s
0001dbd: 1a                                        ; drop
0001dbe: 0b                                        ; end
0001db6: 08                                        ; FIXUP func body size
; function body 92
0001dbf: 00                                        ; func body size (guess)
0001dc0: 00                                        ; local decl count
0001dc1: 41                                        ; i32.const
0001dc2: 01                                        ; i32 literal
0001dc3: 41                                        ; i32.const
0001dc4: 02                                        ; i32 literal
0001dc5: 76                                        ; i32.shr_u
0001dc6: 1a                                        ; drop
0001dc7: 0b                                        ; end
0001dbf: 08                                        ; FIXUP func body size
; function body 93
0001dc8: 00                                        ; func body size (guess)
0001dc9: 00                                        ; local decl count
0001dca: 41                                        ; i32.const
0001dcb: 01                                        ; i32 literal
0001dcc: 41                                        ; i32.const
0001dcd: 02                                        ; i32 literal
0001dce: 77                                        ; i32.rotl
0001dcf: 1a                                        ; drop
0001dd0: 0b                                        ; end
0001dc8: 08                                        ; FIXUP func body size
; function body 94
0001dd1: 00                                        ; func body size (guess)
0001dd2: 00                                        ; local decl count
0001dd3: 41                                        ; i32.const
0001dd4: 01                                        ; i32 literal
0001dd5: 41                                        ; i32.const
0001dd6: 02                                        ; i32 literal
0001dd7: 78                                        ; i32.rotr
0001dd8: 1a                                        ; drop
0001dd9: 0b                                        ; end
0001dd1: 08                                        ; FIXUP func body size
; function body 95
0001dda: 00                                        ; func body size (guess)
0001ddb: 00                                        ; local decl count
0001ddc: 42                                        ; i64.const
0001ddd: 01                                        ; i64 literal
0001dde: 79                                        ; i64.clz
0001ddf: 1a                                        ; drop
0001de0: 0b                                        ; end
0001dda: 06                                        ; FIXUP func body size
; function body 96
0001de1: 00                                        ; func body size (guess)
0001de2: 00                                        ; local decl count
0001de3: 42                                        ; i64.const
0001de4: 01                                        ; i64 literal
0001de5: 7a                                        ; i64.ctz
0001de6: 1a                                        ; drop
0001de7: 0b                                        ; end
0001de1: 06                                        ; FIXUP func body size
; function body 97
0001de8: 00                                        ; func body size (guess)
0001de9: 00                                        ; local decl count
0001dea: 42                                        ; i64.const
0001deb: 01                                        ; i64 literal
0001dec: 7b                                        ; i64.popcnt
0001ded: 1a                                        ; drop
0001dee: 0b                                        ; end
0001de8: 06                                        ; FIXUP func body size
; function body 98
0001def: 00                                        ; func body size (guess)
0001df0: 00                                        ; local decl count
0001df1: 42                                        ; i64.const
0001df2: 01                                        ; i64 literal
0001df3: 42                                        ; i64.const
0001df4: 02                                        ; i64 literal
0001df5: 7c                                        ; i64.add
0001df6: 1a                                        ; drop
0001df7: 0b                                        ; end
0001def: 08                                        ; FIXUP func body size
; function body 99
0001df8: 00                                        ; func body size (guess)
0001df9: 00                                        ; local decl count
0001dfa: 42                                        ; i64.const
0001dfb: 01                                        ; i64 literal
0001dfc: 42                                        ; i64.const
0001dfd: 02                                        ; i64 literal
0001dfe: 7d                                        ; i64.sub
0001dff: 1a                                        ; drop
0001e00: 0b                                        ; end
0001df8: 08                                        ; FIXUP func body size
; function body 100
0001e01: 00                                        ; func body size (guess)
0001e02: 00                                        ; local decl count
0001e03: 42                                        ; i64.const
0001e04: 01                                        ; i64 literal
0001e05: 42                                        ; i64.const
0001e06: 02                                        ; i64 literal
0001e07: 7e                                        ; i64.mul
0001e08: 1a                                        ; drop
0001e09: 0b                                        ; end
0001e01: 08                                        ; FIXUP func body size
; function body 101
0001e0a: 00                                        ; func body size (guess)
0001e0b: 00                                        ; local decl count
0001e0c: 42                                        ; i64.const
0001e0d: 01                                        ; i64 literal
0001e0e: 42                                        ; i64.const
0001e0f: 02                                        ; i64 literal
0001e10: 7f                                        ; i64.div_s
0001e11: 1a                                        ; drop
0001e12: 0b                                        ; end
0001e0a: 08                                        ; FIXUP func body size
; function body 102
0001e13: 00                                        ; func body size (guess)
0001e14: 00                                        ; local decl count
0001e15: 42                                        ; i64.const
0001e16: 01                                        ; i64 literal
0001e17: 42                                        ; i64.const
0001e18: 02                                        ; i64 literal
0001e19: 80                                        ; i64.div_u
0001e1a: 1a                                        ; drop
0001e1b: 0b                                        ; end
0001e13: 08                                        ; FIXUP func body size
; function body 103
0001e1c: 00                                        ; func body size (guess)
0001e1d: 00                                        ; local decl count
0001e1e: 42                                        ; i64.const
0001e1f: 01                                        ; i64 literal
0001e20: 42                                        ; i64.const
0001e21: 02                                        ; i64 literal
0001e22: 81                                        ; i64.rem_s
0001e23: 1a                                        ; drop
0001e24: 0b                                        ; end
0001e1c: 08                                        ; FIXUP func body size
; function body 104
0001e25: 00                                        ; func body size (guess)
0001e26: 00                                        ; local decl count
0001e27: 42                                        ; i64.const
0001e28: 01                                        ; i64 literal
0001e29: 42                                        ; i64.const
0001e2a: 02                                        ; i64 literal
0001e2b: 82                                        ; i64.rem_u
0001e2c: 1a                                        ; drop
0001e2d: 0b                                        ; end
0001e25: 08                                        ; FIXUP func body size
; function body 105
0001e2e: 00                                        ; func body size (guess)
0001e2f: 00                                        ; local decl count
0001e30: 42                                        ; i64.const
0001e31: 01                                        ; i64 literal
0001e32: 42                                        ; i64.const
0001e33: 02                                        ; i64 literal
0001e34: 83                                        ; i64.and
0001e35: 1a                                        ; drop
0001e36: 0b                                        ; end
0001e2e: 08                                        ; FIXUP func body size
; function body 106
0001e37: 00                                        ; func body size (guess)
0001e38: 00                                        ; local decl count
0001e39: 42                                        ; i64.const
0001e3a: 01                                        ; i64 literal
0001e3b: 42                                        ; i64.const
0001e3c: 02                                        ; i64 literal
0001e3d: 84                                        ; i64.or
0001e3e: 1a                                        ; drop
0001e3f: 0b                                        ; end
0001e37: 08                                        ; FIXUP func body size
; function body 107
0001e40: 00                                        ; func body size (guess)
0001e41: 00                                        ; local decl count
0001e42: 42                                        ; i64.const
0001e43: 01                                        ; i64 literal
0001e44: 42                                        ; i64.const
0001e45: 02                                        ; i64 literal
0001e46: 85                                        ; i64.xor
0001e47: 1a                                        ; drop
0001e48: 0b                                        ; end
0001e40: 08                                        ; FIXUP func body size
; function body 108
0001e49: 00                                        ; func body size (guess)
0001e4a: 00                                        ; local decl count
0001e4b: 42                                        ; i64.const
0001e4c: 01                                        ; i64 literal
0001e4d: 42                                        ; i64.const
0001e4e: 02                                        ; i64 literal
0001e4f: 86                                        ; i64.shl
0001e50: 1a                                        ; drop
0001e51: 0b                                        ; end
0001e49: 08                                        ; FIXUP func body size
; function body 109
0001e52: 00                                        ; func body size (guess)
0001e53: 00                                        ; local decl count
0001e54: 42                                        ; i64.const
0001e55: 01                                        ; i64 literal
0001e56: 42                                        ; i64.const
0001e57: 02                                        ; i64 literal
0001e58: 87                                        ; i64.shr_s
0001e59: 1a                                        ; drop
0001e5a: 0b                                        ; end
0001e52: 08                                        ; FIXUP func body size
; function body 110
0001e5b: 00                                        ; func body size (guess)
0001e5c: 00                                        ; local decl count
0001e5d: 42                                        ; i64.const
0001e5e: 01                                        ; i64 literal
0001e5f: 42                                        ; i64.const
0001e60: 02                                        ; i64 literal
0001e61: 88                                        ; i64.shr_u
0001e62: 1a                                        ; drop
0001e63: 0b                                        ; end
0001e5b: 08                                        ; FIXUP func body size
; function body 111
0001e64: 00                                        ; func body size (guess)
0001e65: 00                                        ; local decl count
0001e66: 42                                        ; i64.const
0001e67: 01                                        ; i64 literal
0001e68: 42                                        ; i64.const
0001e69: 02                                        ; i64 literal
0001e6a: 89                                        ; i64.rotl
0001e6b: 1a                                        ; drop
0001e6c: 0b                                        ; end
0001e64: 08                                        ; FIXUP func body size
; function body 112
0001e6d: 00                                        ; func body size (guess)
0001e6e: 00                                        ; local decl count
0001e6f: 42                                        ; i64.const
0001e70: 01                                        ; i64 literal
0001e71: 42                                        ; i64.const
0001e72: 02                                        ; i64 literal
0001e73: 8a                                        ; i64.rotr
0001e74: 1a                                        ; drop
0001e75: 0b                                        ; end
0001e6d: 08                                        ; FIXUP func body size
; function body 113
0001e76: 00                                        ; func body size (guess)
0001e77: 00                                        ; local decl count
0001e78: 43                                        ; f32.const
0001e79: 0000 803f                                 ; f32 literal
0001e7d: 8b                                        ; f32.abs
0001e7e: 1a                                        ; drop
0001e7f: 0b                                        ; end
0001e76: 09                                        ; FIXUP func body size
; function body 114
0001e80: 00                                        ; func body size (guess)
0001e81: 00                                        ; local decl count
0001e82: 43                                        ; f32.const
0001e83: 0000 803f                                 ; f32 literal
0001e87: 8c                                        ; f32.neg
0001e88: 1a                                        ; drop
0001e89: 0b                                        ; end
0001e80: 09                                        ; FIXUP func body size
; function body 115
0001e8a: 00                                        ; func body size (guess)
0001e8b: 00                                        ; local decl count
0001e8c: 43                                        ; f32.const
0001e8d: 0000 803f                                 ; f32 literal
0001e91: 8d                                        ; f32.ceil
0001e92: 1a                                        ; drop
0001e93: 0b                                        ; end
0001e8a: 09                                        ; FIXUP func body size
; function body 116
0001e94: 00                                        ; func body size (guess)
0001e95: 00                                        ; local decl count
0001e96: 43                                        ; f32.const
0001e97: 0000 803f                                 ; f32 literal
0001e9b: 8e                                        ; f32.floor
0001e9c: 1a                                        ; drop
0001e9d: 0b                                        ; end
0001e94: 09                                        ; FIXUP func body size
; function body 117
0001e9e: 00                                        ; func body size (guess)
0001e9f: 00                                        ; local decl count
0001ea0: 43                                        ; f32.const
0001ea1: 0000 803f                                 ; f32 literal
0001ea5: 8f                                        ; f32.trunc
0001ea6: 1a                                        ; drop
0001ea7: 0b                                        ; end
0001e9e: 09                                        ; FIXUP func body size
; function body 118
0001ea8: 00                                        ; func body size (guess)
0001ea9: 00                                        ; local decl count
0001eaa: 43                                        ; f32.const
0001eab: 0000 803f                                 ; f32 literal
0001eaf: 90                                        ; f32.nearest
0001eb0: 1a                                        ; drop
0001eb1: 0b                                        ; end
0001ea8: 09                                        ; FIXUP func body size
; function body 119
0001eb2: 00                                        ; func body size (guess)
0001eb3: 00                                        ; local decl count
0001eb4: 43                                        ; f32.const
0001eb5: 0000 803f                                 ; f32 literal
0001eb9: 91                                        ; f32.sqrt
0001eba: 1a                                        ; drop
0001ebb: 0b                                        ; end
0001eb2: 09                                        ; FIXUP func body size
; function body 120
0001ebc: 00                                        ; func body size (guess)
0001ebd: 00                                        ; local decl count
0001ebe: 43                                        ; f32.const
0001ebf: 0000 803f                                 ; f32 literal
0001ec3: 43                                        ; f32.const
0001ec4: 0000 0040                                 ; f32 literal
0001ec8: 92                                        ; f32.add
0001ec9: 1a                                        ; drop
0001eca: 0b                                        ; end
0001ebc: 0e                                        ; FIXUP func body size
; function body 121
0001ecb: 00                                        ; func body size (guess)
0001ecc: 00                                        ; local decl count
0001ecd: 43                                        ; f32.const
0001ece: 0000 803f                                 ; f32 literal
0001ed2: 43                                        ; f32.const
0001ed3: 0000 0040                                 ; f32 literal
0001ed7: 93                                        ; f32.sub
0001ed8: 1a                                        ; drop
0001ed9: 0b                                        ; end
0001ecb: 0e                                        ; FIXUP func body size
; function body 122
0001eda: 00                                        ; func body size (guess)
0001edb: 00                                        ; local decl count
0001edc: 43                                        ; f32.const
0001edd: 0000 803f                                 ; f32 literal
0001ee1: 43                                        ; f32.const
0001ee2: 0000 0040                                 ; f32 literal
0001ee6: 94                                        ; f32.mul
0001ee7: 1a                                        ; drop
0001ee8: 0b                                        ; end
0001eda: 0e                                        ; FIXUP func body size
; function body 123
0001ee9: 00                                        ; func body size (guess)
0001eea: 00                                        ; local decl count
0001eeb: 43                                        ; f32.const
0001eec: 0000 803f                                 ; f32 literal
0001ef0: 43                                        ; f32.const
0001ef1: 0000 0040                                 ; f32 literal
0001ef5: 95                                        ; f32.div
0001ef6: 1a                                        ; drop
0001ef7: 0b                                        ; end
0001ee9: 0e                                        ; FIXUP func body size
; function body 124
0001ef8: 00                                        ; func body size (guess)
0001ef9: 00                                        ; local decl count
0001efa: 43                                        ; f32.const
0001efb: 0000 803f                                 ; f32 literal
0001eff: 43                                        ; f32.const
0001f00: 0000 0040                                 ; f32 literal
0001f04: 96                                        ; f32.min
0001f05: 1a                                        ; drop
0001f06: 0b                                        ; end
0001ef8: 0e                                        ; FIXUP func body size
; function body 125
0001f07: 00                                        ; func body size (guess)
0001f08: 00                                        ; local decl count
0001f09: 43                                        ; f32.const
0001f0a: 0000 803f                                 ; f32 literal
0001f0e: 43                                        ; f32.const
0001f0f: 0000 0040                                 ; f32 literal
0001f13: 97                                        ; f32.max
0001f14: 1a                                        ; drop
0001f15: 0b                                        ; end
0001f07: 0e                                        ; FIXUP func body size
; function body 126
0001f16: 00                                        ; func body size (guess)
0001f17: 00                                        ; local decl count
0001f18: 43                                        ; f32.const
0001f19: 0000 803f                                 ; f32 literal
0001f1d: 43                                        ; f32.const
0001f1e: 0000 0040                                 ; f32 literal
0001f22: 98                                        ; f32.copysign
0001f23: 1a                                        ; drop
0001f24: 0b                                        ; end
0001f16: 0e                                        ; FIXUP func body size
; function body 127
0001f25: 00                                        ; func body size (guess)
0001f26: 00                                        ; local decl count
0001f27: 44                                        ; f64.const
0001f28: 0000 0000 0000 f03f                       ; f64 literal
0001f30: 99                                        ; f64.abs
0001f31: 1a                                        ; drop
0001f32: 0b                                        ; end
0001f25: 0d                                        ; FIXUP func body size
; function body 128
0001f33: 00                                        ; func body size (guess)
0001f34: 00                                        ; local decl count
0001f35: 44                                        ; f64.const
0001f36: 0000 0000 0000 f03f                       ; f64 literal
0001f3e: 9a                                        ; f64.neg
0001f3f: 1a                                        ; drop
0001f40: 0b                                        ; end
0001f33: 0d                                        ; FIXUP func body size
; function body 129
0001f41: 00                                        ; func body size (guess)
0001f42: 00                                        ; local decl count
0001f43: 44                                        ; f64.const
0001f44: 0000 0000 0000 f03f                       ; f64 literal
0001f4c: 9b                                        ; f64.ceil
0001f4d: 1a                                        ; drop
0001f4e: 0b                                        ; end
0001f41: 0d                                        ; FIXUP func body size
; function body 130
0001f4f: 00                                        ; func body size (guess)
0001f50: 00                                        ; local decl count
0001f51: 44                                        ; f64.const
0001f52: 0000 0000 0000 f03f                       ; f64 literal
0001f5a: 9c                                        ; f64.floor
0001f5b: 1a                                        ; drop
0001f5c: 0b                                        ; end
0001f4f: 0d                                        ; FIXUP func body size
; function body 131
0001f5d: 00                                        ; func body size (guess)
0001f5e: 00                                        ; local decl count
0001f5f: 44                                        ; f64.const
0001f60: 0000 0000 0000 f03f                       ; f64 literal
0001f68: 9d                                        ; f64.trunc
0001f69: 1a                                        ; drop
0001f6a: 0b                                        ; end
0001f5d: 0d                                        ; FIXUP func body size
; function body 132
0001f6b: 00                                        ; func body size (guess)
0001f6c: 00                                        ; local decl count
0001f6d: 44                                        ; f64.const
0001f6e: 0000 0000 0000 f03f                       ; f64 literal
0001f76: 9e                                        ; f64.nearest
0001f77: 1a                                        ; drop
0001f78: 0b                                        ; end
0001f6b: 0d                                        ; FIXUP func body size
; function body 133
0001f79: 00                                        ; func body size (guess)
0001f7a: 00                                        ; local decl count
0001f7b: 44                                        ; f64.const
0001f7c: 0000 0000 0000 f03f                       ; f64 literal
0001f84: 9f                                        ; f64.sqrt
0001f85: 1a                                        ; drop
0001f86: 0b                                        ; end
0001f79: 0d                                        ; FIXUP func body size
; function body 134
0001f87: 00                                        ; func body size (guess)
0001f88: 00                                        ; local decl count
0001f89: 44                                        ; f64.const
0001f8a: 0000 0000 0000 f03f                       ; f64 literal
0001f92: 44                                        ; f64.const
0001f93: 0000 0000 0000 0040                       ; f64 literal
0001f9b: a0                                        ; f64.add
0001f9c: 1a                                        ; drop
0001f9d: 0b                                        ; end
0001f87: 16                                        ; FIXUP func body size
; function body 135
0001f9e: 00                                        ; func body size (guess)
0001f9f: 00                                        ; local decl count
0001fa0: 44                                        ; f64.const
0001fa1: 0000 0000 0000 f03f                       ; f64 literal
0001fa9: 44                                        ; f64.const
0001faa: 0000 0000 0000 0040                       ; f64 literal
0001fb2: a1                                        ; f64.sub
0001fb3: 1a                                        ; drop
0001fb4: 0b                                        ; end
0001f9e: 16                                        ; FIXUP func body size
; function body 136
0001fb5: 00                                        ; func body size (guess)
0001fb6: 00                                        ; local decl count
0001fb7: 44                                        ; f64.const
0001fb8: 0000 0000 0000 f03f                       ; f64 literal
0001fc0: 44                                        ; f64.const
0001fc1: 0000 0000 0000 0040                       ; f64 literal
0001fc9: a2                                        ; f64.mul
0001fca: 1a                                        ; drop
0001fcb: 0b                                        ; end
0001fb5: 16                                        ; FIXUP func body size
; function body 137
0001fcc: 00                                        ; func body size (guess)
0001fcd: 00                                        ; local decl count
0001fce: 44                                        ; f64.const
0001fcf: 0000 0000 0000 f03f                       ; f64 literal
0001fd7: 44                                        ; f64.const
0001fd8: 0000 0000 0000 0040                       ; f64 literal
0001fe0: a3                                        ; f64.div
0001fe1: 1a                                        ; drop
0001fe2: 0b                                        ; end
0001fcc: 16                                        ; FIXUP func body size
; function body 138
0001fe3: 00                                        ; func body size (guess)
0001fe4: 00                                        ; local decl count
0001fe5: 44                                        ; f64.const
0001fe6: 0000 0000 0000 f03f                       ; f64 literal
0001fee: 44                                        ; f64.const
0001fef: 0000 0000 0000 0040                       ; f64 literal
0001ff7: a4                                        ; f64.min
0001ff8: 1a                                        ; drop
0001ff9: 0b                                        ; end
0001fe3: 16                                        ; FIXUP func body size
; function body 139
0001ffa: 00                                        ; func body size (guess)
0001ffb: 00                                        ; local decl count
0001ffc: 44                                        ; f64.const
0001ffd: 0000 0000 0000 f03f                       ; f64 literal
0002005: 44                                        ; f64.const
0002006: 0000 0000 0000 0040                       ; f64 literal
000200e: a5                                        ; f64.max
000200f: 1a                                        ; drop
0002010: 0b                                        ; end
0001ffa: 16                                        ; FIXUP func body size
; function body 140
0002011: 00                                        ; func body size (guess)
0002012: 00                                        ; local decl count
0002013: 44                                        ; f64.const
0002014: 0000 0000 0000 f03f                       ; f64 literal
000201c: 44                                        ; f64.const
000201d: 0000 0000 0000 0040                       ; f64 literal
0002025: a6                                        ; f64.copysign
0002026: 1a                                        ; drop
0002027: 0b                                        ; end
0002011: 16                                        ; FIXUP func body size
; function body 141
0002028: 00                                        ; func body size (guess)
0002029: 00                                        ; local decl count
000202a: 42                                        ; i64.const
000202b: 01                                        ; i64 literal
000202c: a7                                        ; i32.wrap/i64
000202d: 1a                                        ; drop
000202e: 0b                                        ; end
0002028: 06                                        ; FIXUP func body size
; function body 142
000202f: 00                                        ; func body size (guess)
0002030: 00                                        ; local decl count
0002031: 43                                        ; f32.const
0002032: 0000 803f                                 ; f32 literal
0002036: a8                                        ; i32.trunc_s/f32
0002037: 1a                                        ; drop
0002038: 0b                                        ; end
000202f: 09                                        ; FIXUP func body size
; function body 143
0002039: 00                                        ; func body size (guess)
000203a: 00                                        ; local decl count
000203b: 43                                        ; f32.const
000203c: 0000 803f                                 ; f32 literal
0002040: a9                                        ; i32.trunc_u/f32
0002041: 1a                                        ; drop
0002042: 0b                                        ; end
0002039: 09                                        ; FIXUP func body size
; function body 144
0002043: 00                                        ; func body size (guess)
0002044: 00                                        ; local decl count
0002045: 44                                        ; f64.const
0002046: 0000 0000 0000 f03f                       ; f64 literal
000204e: aa                                        ; i32.trunc_s/f64
000204f: 1a                                        ; drop
0002050: 0b                                        ; end
0002043: 0d                                        ; FIXUP func body size
; function body 145
0002051: 00                                        ; func body size (guess)
0002052: 00                                        ; local decl count
0002053: 44                                        ; f64.const
0002054: 0000 0000 0000 f03f                       ; f64 literal
000205c: ab                                        ; i32.trunc_u/f64
000205d: 1a                                        ; drop
000205e: 0b                                        ; end
0002051: 0d                                        ; FIXUP func body size
; function body 146
000205f: 00                                        ; func body size (guess)
0002060: 00                                        ; local decl count
0002061: 41                                        ; i32.const
0002062: 01                                        ; i32 literal
0002063: ac                                        ; i64.extend_s/i32
0002064: 1a                                        ; drop
0002065: 0b                                        ; end
000205f: 06                                        ; FIXUP func body size
; function body 147
0002066: 00                                        ; func body size (guess)
0002067: 00                                        ; local decl count
0002068: 41                                        ; i32.const
0002069: 01                                        ; i32 literal
000206a: ad                                        ; i64.extend_u/i32
000206b: 1a                                        ; drop
000206c: 0b                                        ; end
0002066: 06                                        ; FIXUP func body size
; function body 148
000206d: 00                                        ; func body size (guess)
000206e: 00                                        ; local decl count
000206f: 43                                        ; f32.const
0002070: 0000 803f                                 ; f32 literal
0002074: ae                                        ; i64.trunc_s/f32
0002075: 1a                                        ; drop
0002076: 0b                                        ; end
000206d: 09                                        ; FIXUP func body size
; function body 149
0002077: 00                                        ; func body size (guess)
0002078: 00                                        ; local decl count
0002079: 43                                        ; f32.const
000207a: 0000 803f                                 ; f32 literal
000207e: af                                        ; i64.trunc_u/f32
000207f: 1a                                        ; drop
0002080: 0b                                        ; end
0002077: 09                                        ; FIXUP func body size
; function body 150
0002081: 00                                        ; func body size (guess)
0002082: 00                                        ; local decl count
0002083: 44                                        ; f64.const
0002084: 0000 0000 0000 f03f                       ; f64 literal
000208c: b0                                        ; i64.trunc_s/f64
000208d: 1a                                        ; drop
000208e: 0b                                        ; end
0002081: 0d                                        ; FIXUP func body size
; function body 151
000208f: 00                                        ; func body size (guess)
0002090: 00                                        ; local decl count
0002091: 44                                        ; f64.const
0002092: 0000 0000 0000 f03f                       ; f64 literal
000209a: b1                                        ; i64.trunc_u/f64
000209b: 1a                                        ; drop
000209c: 0b                                        ; end
000208f: 0d                                        ; FIXUP func body size
; function body 152
000209d: 00                                        ; func body size (guess)
000209e: 00                                        ; local decl count
000209f: 41                                        ; i32.const
00020a0: 01                                        ; i32 literal
00020a1: b2                                        ; f32.convert_s/i32
00020a2: 1a                                        ; drop
00020a3: 0b                                        ; end
000209d: 06                                        ; FIXUP func body size
; function body 153
00020a4: 00                                        ; func body size (guess)
00020a5: 00                                        ; local decl count
00020a6: 41                                        ; i32.const
00020a7: 01                                        ; i32 literal
00020a8: b3                                        ; f32.convert_u/i32
00020a9: 1a                                        ; drop
00020aa: 0b                                        ; end
00020a4: 06                                        ; FIXUP func body size
; function body 154
00020ab: 00                                        ; func body size (guess)
00020ac: 00                                        ; local decl count
00020ad: 42                                        ; i64.const
00020ae: 01                                        ; i64 literal
00020af: b4                                        ; f32.convert_s/i64
00020b0: 1a                                        ; drop
00020b1: 0b                                        ; end
00020ab: 06                                        ; FIXUP func body size
; function body 155
00020b2: 00                                        ; func body size (guess)
00020b3: 00                                        ; local decl count
00020b4: 42                                        ; i64.const
00020b5: 01                                        ; i64 literal
00020b6: b5                                        ; f32.convert_u/i64
00020b7: 1a                                        ; drop
00020b8: 0b                                        ; end
00020b2: 06                                        ; FIXUP func body size
; function body 156
00020b9: 00                                        ; func body size (guess)
00020ba: 00                                        ; local decl count
00020bb: 44                                        ; f64.const
00020bc: 0000 0000 0000 f03f                       ; f64 literal
00020c4: b6                                        ; f32.demote/f64
00020c5: 1a                                        ; drop
00020c6: 0b                                        ; end
00020b9: 0d                                        ; FIXUP func body size
; function body 157
00020c7: 00                                        ; func body size (guess)
00020c8: 00                                        ; local decl count
00020c9: 41                                        ; i32.const
00020ca: 01                                        ; i32 literal
00020cb: b7                                        ; f64.convert_s/i32
00020cc: 1a                                        ; drop
00020cd: 0b                                        ; end
00020c7: 06                                        ; FIXUP func body size
; function body 158
00020ce: 00                                        ; func body size (guess)
00020cf: 00                                        ; local decl count
00020d0: 41                                        ; i32.const
00020d1: 01                                        ; i32 literal
00020d2: b8                                        ; f64.convert_u/i32
00020d3: 1a                                        ; drop
00020d4: 0b                                        ; end
00020ce: 06                                        ; FIXUP func body size
; function body 159
00020d5: 00                                        ; func body size (guess)
00020d6: 00                                        ; local decl count
00020d7: 42                                        ; i64.const
00020d8: 01                                        ; i64 literal
00020d9: b9                                        ; f64.convert_s/i64
00020da: 1a                                        ; drop
00020db: 0b                                        ; end
00020d5: 06                                        ; FIXUP func body size
; function body 160
00020dc: 00                                        ; func body size (guess)
00020dd: 00                                        ; local decl count
00020de: 42                                        ; i64.const
00020df: 01                                        ; i64 literal
00020e0: ba                                        ; f64.convert_u/i64
00020e1: 1a                                        ; drop
00020e2: 0b                                        ; end
00020dc: 06                                        ; FIXUP func body size
; function body 161
00020e3: 00                                        ; func body size (guess)
00020e4: 00                                        ; local decl count
00020e5: 43                                        ; f32.const
00020e6: 0000 803f                                 ; f32 literal
00020ea: bb                                        ; f64.promote/f32
00020eb: 1a                                        ; drop
00020ec: 0b                                        ; end
00020e3: 09                                        ; FIXUP func body size
; function body 162
00020ed: 00                                        ; func body size (guess)
00020ee: 00                                        ; local decl count
00020ef: 41                                        ; i32.const
00020f0: 01                                        ; i32 literal
00020f1: be                                        ; f32.reinterpret/i32
00020f2: 1a                                        ; drop
00020f3: 0b                                        ; end
00020ed: 06                                        ; FIXUP func body size
; function body 163
00020f4: 00                                        ; func body size (guess)
00020f5: 00                                        ; local decl count
00020f6: 43                                        ; f32.const
00020f7: 0000 803f                                 ; f32 literal
00020fb: bc                                        ; i32.reinterpret/f32
00020fc: 1a                                        ; drop
00020fd: 0b                                        ; end
00020f4: 09                                        ; FIXUP func body size
; function body 164
00020fe: 00                                        ; func body size (guess)
00020ff: 00                                        ; local decl count
0002100: 42                                        ; i64.const
0002101: 01                                        ; i64 literal
0002102: bf                                        ; f64.reinterpret/i64
0002103: 1a                                        ; drop
0002104: 0b                                        ; end
00020fe: 06                                        ; FIXUP func body size
; function body 165
0002105: 00                                        ; func body size (guess)
0002106: 00                                        ; local decl count
0002107: 44                                        ; f64.const
0002108: 0000 0000 0000 f03f                       ; f64 literal
0002110: bd                                        ; i64.reinterpret/f64
0002111: 1a                                        ; drop
0002112: 0b                                        ; end
0002105: 0d                                        ; FIXUP func body size
; function body 166
0002113: 00                                        ; func body size (guess)
0002114: 00                                        ; local decl count
0002115: 41                                        ; i32.const
0002116: 01                                        ; i32 literal
0002117: c0                                        ; i32.extend8_s
0002118: 1a                                        ; drop
0002119: 0b                                        ; end
0002113: 06                                        ; FIXUP func body size
; function body 167
000211a: 00                                        ; func body size (guess)
000211b: 00                                        ; local decl count
000211c: 41                                        ; i32.const
000211d: 01                                        ; i32 literal
000211e: c1                                        ; i32.extend16_s
000211f: 1a                                        ; drop
0002120: 0b                                        ; end
000211a: 06                                        ; FIXUP func body size
; function body 168
0002121: 00                                        ; func body size (guess)
0002122: 00                                        ; local decl count
0002123: 42                                        ; i64.const
0002124: 01                                        ; i64 literal
0002125: c2                                        ; i64.extend8_s
0002126: 1a                                        ; drop
0002127: 0b                                        ; end
0002121: 06                                        ; FIXUP func body size
; function body 169
0002128: 00                                        ; func body size (guess)
0002129: 00                                        ; local decl count
000212a: 42                                        ; i64.const
000212b: 01                                        ; i64 literal
000212c: c3                                        ; i64.extend16_s
000212d: 1a                                        ; drop
000212e: 0b                                        ; end
0002128: 06                                        ; FIXUP func body size
; function body 170
000212f: 00                                        ; func body size (guess)
0002130: 00                                        ; local decl count
0002131: 42                                        ; i64.const
0002132: 01                                        ; i64 literal
0002133: c4                                        ; i64.extend32_s
0002134: 1a                                        ; drop
0002135: 0b                                        ; end
000212f: 06                                        ; FIXUP func body size
; function body 171
0002136: 00                                        ; func body size (guess)
0002137: 01                                        ; local decl count
0002138: 01                                        ; local type count
0002139: 7f                                        ; i32
000213a: 0b                                        ; end
0002136: 04                                        ; FIXUP func body size
; function body 172
000213b: 00                                        ; func body size (guess)
000213c: 00                                        ; local decl count
000213d: 41                                        ; i32.const
000213e: 01                                        ; i32 literal
000213f: 0d                                        ; br_if
0002140: 00                                        ; break depth
0002141: 0b                                        ; end
000213b: 06                                        ; FIXUP func body size
; function body 173
0002142: 00                                        ; func body size (guess)
0002143: 00                                        ; local decl count
0002144: 41                                        ; i32.const
0002145: 01                                        ; i32 literal
0002146: 10                                        ; call
0002147: 00                                        ; function index
0002148: 0b                                        ; end
0002142: 06                                        ; FIXUP func body size
; function body 174
0002149: 00                                        ; func body size (guess)
000214a: 00                                        ; local decl count
000214b: 41                                        ; i32.const
000214c: 01                                        ; i32 literal
000214d: 0e                                        ; br_table
000214e: 00                                        ; num targets
000214f: 00                                        ; break depth for default
0002150: 0b                                        ; end
0002149: 07                                        ; FIXUP func body size
; function body 175
0002151: 00                                        ; func body size (guess)
0002152: 00                                        ; local decl count
0002153: 02                                        ; block
0002154: 7f                                        ; i32
0002155: 41                                        ; i32.const
0002156: 01                                        ; i32 literal
0002157: 41                                        ; i32.const
0002158: 02                                        ; i32 literal
0002159: 0c                                        ; br
000215a: 00                                        ; break depth
000215b: 0b                                        ; end
000215c: 1a                                        ; drop
000215d: 0b                                        ; end
0002151: 0c                                        ; FIXUP func body size
; function body 176
000215e: 00                                        ; func body size (guess)
000215f: 00                                        ; local decl count
0002160: 43                                        ; f32.const
0002161: 0000 803f                                 ; f32 literal
0002165: fc                                        ; prefix
0002166: 00                                        ; i32.trunc_s:sat/f32
0002167: 1a                                        ; drop
0002168: 0b                                        ; end
000215e: 0a                                        ; FIXUP func body size
; function body 177
0002169: 00                                        ; func body size (guess)
000216a: 00                                        ; local decl count
000216b: 43                                        ; f32.const
000216c: 0000 803f                                 ; f32 literal
0002170: fc                                        ; prefix
0002171: 01                                        ; i32.trunc_u:sat/f32
0002172: 1a                                        ; drop
0002173: 0b                                        ; end
0002169: 0a                                        ; FIXUP func body size
; function body 178
0002174: 00                                        ; func body size (guess)
0002175: 00                                        ; local decl count
0002176: 44                                        ; f64.const
0002177: 0000 0000 0000 f03f                       ; f64 literal
000217f: fc                                        ; prefix
0002180: 02                                        ; i32.trunc_s:sat/f64
0002181: 1a                                        ; drop
0002182: 0b                                        ; end
0002174: 0e                                        ; FIXUP func body size
; function body 179
0002183: 00                                        ; func body size (guess)
0002184: 00                                        ; local decl count
0002185: 44                                        ; f64.const
0002186: 0000 0000 0000 f03f                       ; f64 literal
000218e: fc                                        ; prefix
000218f: 03                                        ; i32.trunc_u:sat/f64
0002190: 1a                                        ; drop
0002191: 0b                                        ; end
0002183: 0e                                        ; FIXUP func body size
; function body 180
0002192: 00                                        ; func body size (guess)
0002193: 00                                        ; local decl count
0002194: 43                                        ; f32.const
0002195: 0000 803f                                 ; f32 literal
0002199: fc                                        ; prefix
000219a: 04                                        ; i64.trunc_s:sat/f32
000219b: 1a                                        ; drop
000219c: 0b                                        ; end
0002192: 0a                                        ; FIXUP func body size
; function body 181
000219d: 00                                        ; func body size (guess)
000219e: 00                                        ; local decl count
000219f: 43                                        ; f32.const
00021a0: 0000 803f                                 ; f32 literal
00021a4: fc                                        ; prefix
00021a5: 05                                        ; i64.trunc_u:sat/f32
00021a6: 1a                                        ; drop
00021a7: 0b                                        ; end
000219d: 0a                                        ; FIXUP func body size
; function body 182
00021a8: 00                                        ; func body size (guess)
00021a9: 00                                        ; local decl count
00021aa: 44                                        ; f64.const
00021ab: 0000 0000 0000 f03f                       ; f64 literal
00021b3: fc                                        ; prefix
00021b4: 06                                        ; i64.trunc_s:sat/f64
00021b5: 1a                                        ; drop
00021b6: 0b                                        ; end
00021a8: 0e                                        ; FIXUP func body size
; function body 183
00021b7: 00                                        ; func body size (guess)
00021b8: 00                                        ; local decl count
00021b9: 44                                        ; f64.const
00021ba: 0000 0000 0000 f03f                       ; f64 literal
00021c2: fc                                        ; prefix
00021c3: 07                                        ; i64.trunc_u:sat/f64
00021c4: 1a                                        ; drop
00021c5: 0b                                        ; end
00021b7: 0e                                        ; FIXUP func body size
; function body 184
00021c6: 00                                        ; func body size (guess)
00021c7: 00                                        ; local decl count
00021c8: fd                                        ; prefix
00021c9: 00                                        ; v128.const
00021ca: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00021da: 1a                                        ; drop
00021db: 0b                                        ; end
00021c6: 15                                        ; FIXUP func body size
; function body 185
00021dc: 00                                        ; func body size (guess)
00021dd: 00                                        ; local decl count
00021de: 41                                        ; i32.const
00021df: 01                                        ; i32 literal
00021e0: fd                                        ; prefix
00021e1: 01                                        ; v128.load
00021e2: 04                                        ; alignment
00021e3: 03                                        ; load offset
00021e4: 1a                                        ; drop
00021e5: 0b                                        ; end
00021dc: 09                                        ; FIXUP func body size
; function body 186
00021e6: 00                                        ; func body size (guess)
00021e7: 00                                        ; local decl count
00021e8: 41                                        ; i32.const
00021e9: 01                                        ; i32 literal
00021ea: fd                                        ; prefix
00021eb: 00                                        ; v128.const
00021ec: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00021fc: fd                                        ; prefix
00021fd: 02                                        ; v128.store
00021fe: 04                                        ; alignment
00021ff: 03                                        ; store offset
0002200: 0b                                        ; end
00021e6: 1a                                        ; FIXUP func body size
; function body 187
0002201: 00                                        ; func body size (guess)
0002202: 00                                        ; local decl count
0002203: 41                                        ; i32.const
0002204: 01                                        ; i32 literal
0002205: fd                                        ; prefix
0002206: 03                                        ; i8x16.splat
0002207: 1a                                        ; drop
0002208: 0b                                        ; end
0002201: 07                                        ; FIXUP func body size
; function body 188
0002209: 00                                        ; func body size (guess)
000220a: 00                                        ; local decl count
000220b: 41                                        ; i32.const
000220c: 01                                        ; i32 literal
000220d: fd                                        ; prefix
000220e: 04                                        ; i16x8.splat
000220f: 1a                                        ; drop
0002210: 0b                                        ; end
0002209: 07                                        ; FIXUP func body size
; function body 189
0002211: 00                                        ; func body size (guess)
0002212: 00                                        ; local decl count
0002213: 41                                        ; i32.const
0002214: 01                                        ; i32 literal
0002215: fd                                        ; prefix
0002216: 05                                        ; i32x4.splat
0002217: 1a                                        ; drop
0002218: 0b                                        ; end
0002211: 07                                        ; FIXUP func body size
; function body 190
0002219: 00                                        ; func body size (guess)
000221a: 00                                        ; local decl count
000221b: 42                                        ; i64.const
000221c: 01                                        ; i64 literal
000221d: fd                                        ; prefix
000221e: 06                                        ; i64x2.splat
000221f: 1a                                        ; drop
0002220: 0b                                        ; end
0002219: 07                                        ; FIXUP func body size
; function body 191
0002221: 00                                        ; func body size (guess)
0002222: 00                                        ; local decl count
0002223: 43                                        ; f32.const
0002224: 0000 803f                                 ; f32 literal
0002228: fd                                        ; prefix
0002229: 07                                        ; f32x4.splat
000222a: 1a                                        ; drop
000222b: 0b                                        ; end
0002221: 0a                                        ; FIXUP func body size
; function body 192
000222c: 00                                        ; func body size (guess)
000222d: 00                                        ; local decl count
000222e: 44                                        ; f64.const
000222f: 0000 0000 0000 f03f                       ; f64 literal
0002237: fd                                        ; prefix
0002238: 08                                        ; f64x2.splat
0002239: 1a                                        ; drop
000223a: 0b                                        ; end
000222c: 0e                                        ; FIXUP func body size
; function body 193
000223b: 00                                        ; func body size (guess)
000223c: 00                                        ; local decl count
000223d: fd                                        ; prefix
000223e: 00                                        ; v128.const
000223f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000224f: fd                                        ; prefix
0002250: 09                                        ; i8x16.extract_lane_s
0002251: 0f                                        ; Simd Lane literal
0002252: 1a                                        ; drop
0002253: 0b                                        ; end
000223b: 18                                        ; FIXUP func body size
; function body 194
0002254: 00                                        ; func body size (guess)
0002255: 00                                        ; local decl count
0002256: fd                                        ; prefix
0002257: 00                                        ; v128.const
0002258: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002268: fd                                        ; prefix
0002269: 0a                                        ; i8x16.extract_lane_u
000226a: 0f                                        ; Simd Lane literal
000226b: 1a                                        ; drop
000226c: 0b                                        ; end
0002254: 18                                        ; FIXUP func body size
; function body 195
000226d: 00                                        ; func body size (guess)
000226e: 00                                        ; local decl count
000226f: fd                                        ; prefix
0002270: 00                                        ; v128.const
0002271: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002281: fd                                        ; prefix
0002282: 0b                                        ; i16x8.extract_lane_s
0002283: 07                                        ; Simd Lane literal
0002284: 1a                                        ; drop
0002285: 0b                                        ; end
000226d: 18                                        ; FIXUP func body size
; function body 196
0002286: 00                                        ; func body size (guess)
0002287: 00                                        ; local decl count
0002288: fd                                        ; prefix
0002289: 00                                        ; v128.const
000228a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000229a: fd                                        ; prefix
000229b: 0c                                        ; i16x8.extract_lane_u
000229c: 07                                        ; Simd Lane literal
000229d: 1a                                        ; drop
000229e: 0b                                        ; end
0002286: 18                                        ; FIXUP func body size
; function body 197
000229f: 00                                        ; func body size (guess)
00022a0: 00                                        ; local decl count
00022a1: fd                                        ; prefix
00022a2: 00                                        ; v128.const
00022a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022b3: fd                                        ; prefix
00022b4: 0d                                        ; i32x4.extract_lane
00022b5: 03                                        ; Simd Lane literal
00022b6: 1a                                        ; drop
00022b7: 0b                                        ; end
000229f: 18                                        ; FIXUP func body size
; function body 198
00022b8: 00                                        ; func body size (guess)
00022b9: 00                                        ; local decl count
00022ba: fd                                        ; prefix
00022bb: 00                                        ; v128.const
00022bc: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022cc: fd                                        ; prefix
00022cd: 0e                                        ; i64x2.extract_lane
00022ce: 01                                        ; Simd Lane literal
00022cf: 1a                                        ; drop
00022d0: 0b                                        ; end
00022b8: 18                                        ; FIXUP func body size
; function body 199
00022d1: 00                                        ; func body size (guess)
00022d2: 00                                        ; local decl count
00022d3: fd                                        ; prefix
00022d4: 00                                        ; v128.const
00022d5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022e5: fd                                        ; prefix
00022e6: 0f                                        ; f32x4.extract_lane
00022e7: 03                                        ; Simd Lane literal
00022e8: 1a                                        ; drop
00022e9: 0b                                        ; end
00022d1: 18                                        ; FIXUP func body size
; function body 200
00022ea: 00                                        ; func body size (guess)
00022eb: 00                                        ; local decl count
00022ec: fd                                        ; prefix
00022ed: 00                                        ; v128.const
00022ee: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022fe: fd                                        ; prefix
00022ff: 10                                        ; f64x2.extract_lane
0002300: 01                                        ; Simd Lane literal
0002301: 1a                                        ; drop
0002302: 0b                                        ; end
00022ea: 18                                        ; FIXUP func body size
; function body 201
0002303: 00                                        ; func body size (guess)
0002304: 00                                        ; local decl count
0002305: fd                                        ; prefix
0002306: 00                                        ; v128.const
0002307: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002317: 41                                        ; i32.const
0002318: 00                                        ; i32 literal
0002319: fd                                        ; prefix
000231a: 11                                        ; i8x16.replace_lane
000231b: 0f                                        ; Simd Lane literal
000231c: 1a                                        ; drop
000231d: 0b                                        ; end
0002303: 1a                                        ; FIXUP func body size
; function body 202
000231e: 00                                        ; func body size (guess)
000231f: 00                                        ; local decl count
0002320: fd                                        ; prefix
0002321: 00                                        ; v128.const
0002322: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002332: 41                                        ; i32.const
0002333: 00                                        ; i32 literal
0002334: fd                                        ; prefix
0002335: 12                                        ; i16x8.replace_lane
0002336: 07                                        ; Simd Lane literal
0002337: 1a                                        ; drop
0002338: 0b                                        ; end
000231e: 1a                                        ; FIXUP func body size
; function body 203
0002339: 00                                        ; func body size (guess)
000233a: 00                                        ; local decl count
000233b: fd                                        ; prefix
000233c: 00                                        ; v128.const
000233d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000234d: 41                                        ; i32.const
000234e: 00                                        ; i32 literal
000234f: fd                                        ; prefix
0002350: 13                                        ; i32x4.replace_lane
0002351: 03                                        ; Simd Lane literal
0002352: 1a                                        ; drop
0002353: 0b                                        ; end
0002339: 1a                                        ; FIXUP func body size
; function body 204
0002354: 00                                        ; func body size (guess)
0002355: 00                                        ; local decl count
0002356: fd                                        ; prefix
0002357: 00                                        ; v128.const
0002358: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002368: 42                                        ; i64.const
0002369: 00                                        ; i64 literal
000236a: fd                                        ; prefix
000236b: 14                                        ; i64x2.replace_lane
000236c: 01                                        ; Simd Lane literal
000236d: 1a                                        ; drop
000236e: 0b                                        ; end
0002354: 1a                                        ; FIXUP func body size
; function body 205
000236f: 00                                        ; func body size (guess)
0002370: 00                                        ; local decl count
0002371: fd                                        ; prefix
0002372: 00                                        ; v128.const
0002373: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002383: 43                                        ; f32.const
0002384: 0000 0000                                 ; f32 literal
0002388: fd                                        ; prefix
0002389: 15                                        ; f32x4.replace_lane
000238a: 03                                        ; Simd Lane literal
000238b: 1a                                        ; drop
000238c: 0b                                        ; end
000236f: 1d                                        ; FIXUP func body size
; function body 206
000238d: 00                                        ; func body size (guess)
000238e: 00                                        ; local decl count
000238f: fd                                        ; prefix
0002390: 00                                        ; v128.const
0002391: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023a1: 44                                        ; f64.const
00023a2: 0000 0000 0000 0000                       ; f64 literal
00023aa: fd                                        ; prefix
00023ab: 16                                        ; f64x2.replace_lane
00023ac: 01                                        ; Simd Lane literal
00023ad: 1a                                        ; drop
00023ae: 0b                                        ; end
000238d: 21                                        ; FIXUP func body size
; function body 207
00023af: 00                                        ; func body size (guess)
00023b0: 00                                        ; local decl count
00023b1: fd                                        ; prefix
00023b2: 00                                        ; v128.const
00023b3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023c3: fd                                        ; prefix
00023c4: 00                                        ; v128.const
00023c5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00023d5: fd                                        ; prefix
00023d6: 17                                        ; v8x16.shuffle
00023d7: 0100 0000 0100 0000 0100 0000 0100 0000   ; Simd Lane[16] literal
00023e7: 1a                                        ; drop
00023e8: 0b                                        ; end
00023af: 39                                        ; FIXUP func body size
; function body 208
00023e9: 00                                        ; func body size (guess)
00023ea: 00                                        ; local decl count
00023eb: fd                                        ; prefix
00023ec: 00                                        ; v128.const
00023ed: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023fd: fd                                        ; prefix
00023fe: 00                                        ; v128.const
00023ff: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000240f: fd                                        ; prefix
0002410: 18                                        ; i8x16.add
0002411: 1a                                        ; drop
0002412: 0b                                        ; end
00023e9: 29                                        ; FIXUP func body size
; function body 209
0002413: 00                                        ; func body size (guess)
0002414: 00                                        ; local decl count
0002415: fd                                        ; prefix
0002416: 00                                        ; v128.const
0002417: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002427: fd                                        ; prefix
0002428: 00                                        ; v128.const
0002429: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002439: fd                                        ; prefix
000243a: 19                                        ; i16x8.add
000243b: 1a                                        ; drop
000243c: 0b                                        ; end
0002413: 29                                        ; FIXUP func body size
; function body 210
000243d: 00                                        ; func body size (guess)
000243e: 00                                        ; local decl count
000243f: fd                                        ; prefix
0002440: 00                                        ; v128.const
0002441: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002451: fd                                        ; prefix
0002452: 00                                        ; v128.const
0002453: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002463: fd                                        ; prefix
0002464: 1a                                        ; i32x4.add
0002465: 1a                                        ; drop
0002466: 0b                                        ; end
000243d: 29                                        ; FIXUP func body size
; function body 211
0002467: 00                                        ; func body size (guess)
0002468: 00                                        ; local decl count
0002469: fd                                        ; prefix
000246a: 00                                        ; v128.const
000246b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000247b: fd                                        ; prefix
000247c: 00                                        ; v128.const
000247d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000248d: fd                                        ; prefix
000248e: 1b                                        ; i64x2.add
000248f: 1a                                        ; drop
0002490: 0b                                        ; end
0002467: 29                                        ; FIXUP func body size
; function body 212
0002491: 00                                        ; func body size (guess)
0002492: 00                                        ; local decl count
0002493: fd                                        ; prefix
0002494: 00                                        ; v128.const
0002495: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024a5: fd                                        ; prefix
00024a6: 00                                        ; v128.const
00024a7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00024b7: fd                                        ; prefix
00024b8: 1c                                        ; i8x16.sub
00024b9: 1a                                        ; drop
00024ba: 0b                                        ; end
0002491: 29                                        ; FIXUP func body size
; function body 213
00024bb: 00                                        ; func body size (guess)
00024bc: 00                                        ; local decl count
00024bd: fd                                        ; prefix
00024be: 00                                        ; v128.const
00024bf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024cf: fd                                        ; prefix
00024d0: 00                                        ; v128.const
00024d1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00024e1: fd                                        ; prefix
00024e2: 1d                                        ; i16x8.sub
00024e3: 1a                                        ; drop
00024e4: 0b                                        ; end
00024bb: 29                                        ; FIXUP func body size
; function body 214
00024e5: 00                                        ; func body size (guess)
00024e6: 00                                        ; local decl count
00024e7: fd                                        ; prefix
00024e8: 00                                        ; v128.const
00024e9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024f9: fd                                        ; prefix
00024fa: 00                                        ; v128.const
00024fb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000250b: fd                                        ; prefix
000250c: 1e                                        ; i32x4.sub
000250d: 1a                                        ; drop
000250e: 0b                                        ; end
00024e5: 29                                        ; FIXUP func body size
; function body 215
000250f: 00                                        ; func body size (guess)
0002510: 00                                        ; local decl count
0002511: fd                                        ; prefix
0002512: 00                                        ; v128.const
0002513: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002523: fd                                        ; prefix
0002524: 00                                        ; v128.const
0002525: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002535: fd                                        ; prefix
0002536: 1f                                        ; i64x2.sub
0002537: 1a                                        ; drop
0002538: 0b                                        ; end
000250f: 29                                        ; FIXUP func body size
; function body 216
0002539: 00                                        ; func body size (guess)
000253a: 00                                        ; local decl count
000253b: fd                                        ; prefix
000253c: 00                                        ; v128.const
000253d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000254d: fd                                        ; prefix
000254e: 00                                        ; v128.const
000254f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000255f: fd                                        ; prefix
0002560: 20                                        ; i8x16.mul
0002561: 1a                                        ; drop
0002562: 0b                                        ; end
0002539: 29                                        ; FIXUP func body size
; function body 217
0002563: 00                                        ; func body size (guess)
0002564: 00                                        ; local decl count
0002565: fd                                        ; prefix
0002566: 00                                        ; v128.const
0002567: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002577: fd                                        ; prefix
0002578: 00                                        ; v128.const
0002579: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002589: fd                                        ; prefix
000258a: 21                                        ; i16x8.mul
000258b: 1a                                        ; drop
000258c: 0b                                        ; end
0002563: 29                                        ; FIXUP func body size
; function body 218
000258d: 00                                        ; func body size (guess)
000258e: 00                                        ; local decl count
000258f: fd                                        ; prefix
0002590: 00                                        ; v128.const
0002591: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025a1: fd                                        ; prefix
00025a2: 00                                        ; v128.const
00025a3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025b3: fd                                        ; prefix
00025b4: 22                                        ; i32x4.mul
00025b5: 1a                                        ; drop
00025b6: 0b                                        ; end
000258d: 29                                        ; FIXUP func body size
; function body 219
00025b7: 00                                        ; func body size (guess)
00025b8: 00                                        ; local decl count
00025b9: fd                                        ; prefix
00025ba: 00                                        ; v128.const
00025bb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025cb: fd                                        ; prefix
00025cc: 23                                        ; i8x16.neg
00025cd: 1a                                        ; drop
00025ce: 0b                                        ; end
00025b7: 17                                        ; FIXUP func body size
; function body 220
00025cf: 00                                        ; func body size (guess)
00025d0: 00                                        ; local decl count
00025d1: fd                                        ; prefix
00025d2: 00                                        ; v128.const
00025d3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025e3: fd                                        ; prefix
00025e4: 24                                        ; i16x8.neg
00025e5: 1a                                        ; drop
00025e6: 0b                                        ; end
00025cf: 17                                        ; FIXUP func body size
; function body 221
00025e7: 00                                        ; func body size (guess)
00025e8: 00                                        ; local decl count
00025e9: fd                                        ; prefix
00025ea: 00                                        ; v128.const
00025eb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025fb: fd                                        ; prefix
00025fc: 25                                        ; i32x4.neg
00025fd: 1a                                        ; drop
00025fe: 0b                                        ; end
00025e7: 17                                        ; FIXUP func body size
; function body 222
00025ff: 00                                        ; func body size (guess)
0002600: 00                                        ; local decl count
0002601: fd                                        ; prefix
0002602: 00                                        ; v128.const
0002603: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002613: fd                                        ; prefix
0002614: 26                                        ; i64x2.neg
0002615: 1a                                        ; drop
0002616: 0b                                        ; end
00025ff: 17                                        ; FIXUP func body size
; function body 223
0002617: 00                                        ; func body size (guess)
0002618: 00                                        ; local decl count
0002619: fd                                        ; prefix
000261a: 00                                        ; v128.const
000261b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000262b: fd                                        ; prefix
000262c: 00                                        ; v128.const
000262d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000263d: fd                                        ; prefix
000263e: 27                                        ; i8x16.add_saturate_s
000263f: 1a                                        ; drop
0002640: 0b                                        ; end
0002617: 29                                        ; FIXUP func body size
; function body 224
0002641: 00                                        ; func body size (guess)
0002642: 00                                        ; local decl count
0002643: fd                                        ; prefix
0002644: 00                                        ; v128.const
0002645: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002655: fd                                        ; prefix
0002656: 00                                        ; v128.const
0002657: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002667: fd                                        ; prefix
0002668: 28                                        ; i8x16.add_saturate_u
0002669: 1a                                        ; drop
000266a: 0b                                        ; end
0002641: 29                                        ; FIXUP func body size
; function body 225
000266b: 00                                        ; func body size (guess)
000266c: 00                                        ; local decl count
000266d: fd                                        ; prefix
000266e: 00                                        ; v128.const
000266f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000267f: fd                                        ; prefix
0002680: 00                                        ; v128.const
0002681: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002691: fd                                        ; prefix
0002692: 29                                        ; i16x8.add_saturate_s
0002693: 1a                                        ; drop
0002694: 0b                                        ; end
000266b: 29                                        ; FIXUP func body size
; function body 226
0002695: 00                                        ; func body size (guess)
0002696: 00                                        ; local decl count
0002697: fd                                        ; prefix
0002698: 00                                        ; v128.const
0002699: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026a9: fd                                        ; prefix
00026aa: 00                                        ; v128.const
00026ab: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026bb: fd                                        ; prefix
00026bc: 2a                                        ; i16x8.add_saturate_u
00026bd: 1a                                        ; drop
00026be: 0b                                        ; end
0002695: 29                                        ; FIXUP func body size
; function body 227
00026bf: 00                                        ; func body size (guess)
00026c0: 00                                        ; local decl count
00026c1: fd                                        ; prefix
00026c2: 00                                        ; v128.const
00026c3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026d3: fd                                        ; prefix
00026d4: 00                                        ; v128.const
00026d5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026e5: fd                                        ; prefix
00026e6: 2b                                        ; i8x16.sub_saturate_s
00026e7: 1a                                        ; drop
00026e8: 0b                                        ; end
00026bf: 29                                        ; FIXUP func body size
; function body 228
00026e9: 00                                        ; func body size (guess)
00026ea: 00                                        ; local decl count
00026eb: fd                                        ; prefix
00026ec: 00                                        ; v128.const
00026ed: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026fd: fd                                        ; prefix
00026fe: 00                                        ; v128.const
00026ff: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000270f: fd                                        ; prefix
0002710: 2c                                        ; i8x16.sub_saturate_u
0002711: 1a                                        ; drop
0002712: 0b                                        ; end
00026e9: 29                                        ; FIXUP func body size
; function body 229
0002713: 00                                        ; func body size (guess)
0002714: 00                                        ; local decl count
0002715: fd                                        ; prefix
0002716: 00                                        ; v128.const
0002717: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002727: fd                                        ; prefix
0002728: 00                                        ; v128.const
0002729: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002739: fd                                        ; prefix
000273a: 2d                                        ; i16x8.sub_saturate_s
000273b: 1a                                        ; drop
000273c: 0b                                        ; end
0002713: 29                                        ; FIXUP func body size
; function body 230
000273d: 00                                        ; func body size (guess)
000273e: 00                                        ; local decl count
000273f: fd                                        ; prefix
0002740: 00                                        ; v128.const
0002741: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002751: fd                                        ; prefix
0002752: 00                                        ; v128.const
0002753: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002763: fd                                        ; prefix
0002764: 2e                                        ; i16x8.sub_saturate_u
0002765: 1a                                        ; drop
0002766: 0b                                        ; end
000273d: 29                                        ; FIXUP func body size
; function body 231
0002767: 00                                        ; func body size (guess)
0002768: 00                                        ; local decl count
0002769: fd                                        ; prefix
000276a: 00                                        ; v128.const
000276b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000277b: 41                                        ; i32.const
000277c: 00                                        ; i32 literal
000277d: fd                                        ; prefix
000277e: 2f                                        ; i8x16.shl
000277f: 1a                                        ; drop
0002780: 0b                                        ; end
0002767: 19                                        ; FIXUP func body size
; function body 232
0002781: 00                                        ; func body size (guess)
0002782: 00                                        ; local decl count
0002783: fd                                        ; prefix
0002784: 00                                        ; v128.const
0002785: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002795: 41                                        ; i32.const
0002796: 00                                        ; i32 literal
0002797: fd                                        ; prefix
0002798: 30                                        ; i16x8.shl
0002799: 1a                                        ; drop
000279a: 0b                                        ; end
0002781: 19                                        ; FIXUP func body size
; function body 233
000279b: 00                                        ; func body size (guess)
000279c: 00                                        ; local decl count
000279d: fd                                        ; prefix
000279e: 00                                        ; v128.const
000279f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027af: 41                                        ; i32.const
00027b0: 00                                        ; i32 literal
00027b1: fd                                        ; prefix
00027b2: 31                                        ; i32x4.shl
00027b3: 1a                                        ; drop
00027b4: 0b                                        ; end
000279b: 19                                        ; FIXUP func body size
; function body 234
00027b5: 00                                        ; func body size (guess)
00027b6: 00                                        ; local decl count
00027b7: fd                                        ; prefix
00027b8: 00                                        ; v128.const
00027b9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027c9: 41                                        ; i32.const
00027ca: 00                                        ; i32 literal
00027cb: fd                                        ; prefix
00027cc: 32                                        ; i64x2.shl
00027cd: 1a                                        ; drop
00027ce: 0b                                        ; end
00027b5: 19                                        ; FIXUP func body size
; function body 235
00027cf: 00                                        ; func body size (guess)
00027d0: 00                                        ; local decl count
00027d1: fd                                        ; prefix
00027d2: 00                                        ; v128.const
00027d3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027e3: 41                                        ; i32.const
00027e4: 00                                        ; i32 literal
00027e5: fd                                        ; prefix
00027e6: 33                                        ; i8x16.shr_s
00027e7: 1a                                        ; drop
00027e8: 0b                                        ; end
00027cf: 19                                        ; FIXUP func body size
; function body 236
00027e9: 00                                        ; func body size (guess)
00027ea: 00                                        ; local decl count
00027eb: fd                                        ; prefix
00027ec: 00                                        ; v128.const
00027ed: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027fd: 41                                        ; i32.const
00027fe: 00                                        ; i32 literal
00027ff: fd                                        ; prefix
0002800: 34                                        ; i8x16.shr_u
0002801: 1a                                        ; drop
0002802: 0b                                        ; end
00027e9: 19                                        ; FIXUP func body size
; function body 237
0002803: 00                                        ; func body size (guess)
0002804: 00                                        ; local decl count
0002805: fd                                        ; prefix
0002806: 00                                        ; v128.const
0002807: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002817: 41                                        ; i32.const
0002818: 00                                        ; i32 literal
0002819: fd                                        ; prefix
000281a: 35                                        ; i16x8.shr_s
000281b: 1a                                        ; drop
000281c: 0b                                        ; end
0002803: 19                                        ; FIXUP func body size
; function body 238
000281d: 00                                        ; func body size (guess)
000281e: 00                                        ; local decl count
000281f: fd                                        ; prefix
0002820: 00                                        ; v128.const
0002821: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002831: 41                                        ; i32.const
0002832: 00                                        ; i32 literal
0002833: fd                                        ; prefix
0002834: 36                                        ; i16x8.shr_u
0002835: 1a                                        ; drop
0002836: 0b                                        ; end
000281d: 19                                        ; FIXUP func body size
; function body 239
0002837: 00                                        ; func body size (guess)
0002838: 00                                        ; local decl count
0002839: fd                                        ; prefix
000283a: 00                                        ; v128.const
000283b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000284b: 41                                        ; i32.const
000284c: 00                                        ; i32 literal
000284d: fd                                        ; prefix
000284e: 37                                        ; i32x4.shr_s
000284f: 1a                                        ; drop
0002850: 0b                                        ; end
0002837: 19                                        ; FIXUP func body size
; function body 240
0002851: 00                                        ; func body size (guess)
0002852: 00                                        ; local decl count
0002853: fd                                        ; prefix
0002854: 00                                        ; v128.const
0002855: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002865: 41                                        ; i32.const
0002866: 00                                        ; i32 literal
0002867: fd                                        ; prefix
0002868: 38                                        ; i32x4.shr_u
0002869: 1a                                        ; drop
000286a: 0b                                        ; end
0002851: 19                                        ; FIXUP func body size
; function body 241
000286b: 00                                        ; func body size (guess)
000286c: 00                                        ; local decl count
000286d: fd                                        ; prefix
000286e: 00                                        ; v128.const
000286f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000287f: 41                                        ; i32.const
0002880: 00                                        ; i32 literal
0002881: fd                                        ; prefix
0002882: 39                                        ; i64x2.shr_s
0002883: 1a                                        ; drop
0002884: 0b                                        ; end
000286b: 19                                        ; FIXUP func body size
; function body 242
0002885: 00                                        ; func body size (guess)
0002886: 00                                        ; local decl count
0002887: fd                                        ; prefix
0002888: 00                                        ; v128.const
0002889: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002899: 41                                        ; i32.const
000289a: 00                                        ; i32 literal
000289b: fd                                        ; prefix
000289c: 3a                                        ; i64x2.shr_u
000289d: 1a                                        ; drop
000289e: 0b                                        ; end
0002885: 19                                        ; FIXUP func body size
; function body 243
000289f: 00                                        ; func body size (guess)
00028a0: 00                                        ; local decl count
00028a1: fd                                        ; prefix
00028a2: 00                                        ; v128.const
00028a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028b3: fd                                        ; prefix
00028b4: 00                                        ; v128.const
00028b5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028c5: fd                                        ; prefix
00028c6: 3b                                        ; v128.and
00028c7: 1a                                        ; drop
00028c8: 0b                                        ; end
000289f: 29                                        ; FIXUP func body size
; function body 244
00028c9: 00                                        ; func body size (guess)
00028ca: 00                                        ; local decl count
00028cb: fd                                        ; prefix
00028cc: 00                                        ; v128.const
00028cd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028dd: fd                                        ; prefix
00028de: 00                                        ; v128.const
00028df: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028ef: fd                                        ; prefix
00028f0: 3c                                        ; v128.or
00028f1: 1a                                        ; drop
00028f2: 0b                                        ; end
00028c9: 29                                        ; FIXUP func body size
; function body 245
00028f3: 00                                        ; func body size (guess)
00028f4: 00                                        ; local decl count
00028f5: fd                                        ; prefix
00028f6: 00                                        ; v128.const
00028f7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002907: fd                                        ; prefix
0002908: 00                                        ; v128.const
0002909: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002919: fd                                        ; prefix
000291a: 3d                                        ; v128.xor
000291b: 1a                                        ; drop
000291c: 0b                                        ; end
00028f3: 29                                        ; FIXUP func body size
; function body 246
000291d: 00                                        ; func body size (guess)
000291e: 00                                        ; local decl count
000291f: fd                                        ; prefix
0002920: 00                                        ; v128.const
0002921: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002931: fd                                        ; prefix
0002932: 3e                                        ; v128.not
0002933: 1a                                        ; drop
0002934: 0b                                        ; end
000291d: 17                                        ; FIXUP func body size
; function body 247
0002935: 00                                        ; func body size (guess)
0002936: 00                                        ; local decl count
0002937: fd                                        ; prefix
0002938: 00                                        ; v128.const
0002939: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002949: fd                                        ; prefix
000294a: 00                                        ; v128.const
000294b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000295b: fd                                        ; prefix
000295c: 00                                        ; v128.const
000295d: 0300 0000 0300 0000 0300 0000 0300 0000   ; v128 literal
000296d: fd                                        ; prefix
000296e: 3f                                        ; v128.bitselect
000296f: 1a                                        ; drop
0002970: 0b                                        ; end
0002935: 3b                                        ; FIXUP func body size
; function body 248
0002971: 00                                        ; func body size (guess)
0002972: 00                                        ; local decl count
0002973: fd                                        ; prefix
0002974: 00                                        ; v128.const
0002975: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002985: fd                                        ; prefix
0002986: 40                                        ; i8x16.any_true
0002987: 1a                                        ; drop
0002988: 0b                                        ; end
0002971: 17                                        ; FIXUP func body size
; function body 249
0002989: 00                                        ; func body size (guess)
000298a: 00                                        ; local decl count
000298b: fd                                        ; prefix
000298c: 00                                        ; v128.const
000298d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000299d: fd                                        ; prefix
000299e: 41                                        ; i16x8.any_true
000299f: 1a                                        ; drop
00029a0: 0b                                        ; end
0002989: 17                                        ; FIXUP func body size
; function body 250
00029a1: 00                                        ; func body size (guess)
00029a2: 00                                        ; local decl count
00029a3: fd                                        ; prefix
00029a4: 00                                        ; v128.const
00029a5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029b5: fd                                        ; prefix
00029b6: 42                                        ; i32x4.any_true
00029b7: 1a                                        ; drop
00029b8: 0b                                        ; end
00029a1: 17                                        ; FIXUP func body size
; function body 251
00029b9: 00                                        ; func body size (guess)
00029ba: 00                                        ; local decl count
00029bb: fd                                        ; prefix
00029bc: 00                                        ; v128.const
00029bd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029cd: fd                                        ; prefix
00029ce: 43                                        ; i64x2.any_true
00029cf: 1a                                        ; drop
00029d0: 0b                                        ; end
00029b9: 17                                        ; FIXUP func body size
; function body 252
00029d1: 00                                        ; func body size (guess)
00029d2: 00                                        ; local decl count
00029d3: fd                                        ; prefix
00029d4: 00                                        ; v128.const
00029d5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029e5: fd                                        ; prefix
00029e6: 44                                        ; i8x16.all_true
00029e7: 1a                                        ; drop
00029e8: 0b                                        ; end
00029d1: 17                                        ; FIXUP func body size
; function body 253
00029e9: 00                                        ; func body size (guess)
00029ea: 00                                        ; local decl count
00029eb: fd                                        ; prefix
00029ec: 00                                        ; v128.const
00029ed: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029fd: fd                                        ; prefix
00029fe: 45                                        ; i16x8.all_true
00029ff: 1a                                        ; drop
0002a00: 0b                                        ; end
00029e9: 17                                        ; FIXUP func body size
; function body 254
0002a01: 00                                        ; func body size (guess)
0002a02: 00                                        ; local decl count
0002a03: fd                                        ; prefix
0002a04: 00                                        ; v128.const
0002a05: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a15: fd                                        ; prefix
0002a16: 46                                        ; i32x4.all_true
0002a17: 1a                                        ; drop
0002a18: 0b                                        ; end
0002a01: 17                                        ; FIXUP func body size
; function body 255
0002a19: 00                                        ; func body size (guess)
0002a1a: 00                                        ; local decl count
0002a1b: fd                                        ; prefix
0002a1c: 00                                        ; v128.const
0002a1d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a2d: fd                                        ; prefix
0002a2e: 47                                        ; i64x2.all_true
0002a2f: 1a                                        ; drop
0002a30: 0b                                        ; end
0002a19: 17                                        ; FIXUP func body size
; function body 256
0002a31: 00                                        ; func body size (guess)
0002a32: 00                                        ; local decl count
0002a33: fd                                        ; prefix
0002a34: 00                                        ; v128.const
0002a35: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a45: fd                                        ; prefix
0002a46: 00                                        ; v128.const
0002a47: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a57: fd                                        ; prefix
0002a58: 48                                        ; i8x16.eq
0002a59: 1a                                        ; drop
0002a5a: 0b                                        ; end
0002a31: 29                                        ; FIXUP func body size
; function body 257
0002a5b: 00                                        ; func body size (guess)
0002a5c: 00                                        ; local decl count
0002a5d: fd                                        ; prefix
0002a5e: 00                                        ; v128.const
0002a5f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a6f: fd                                        ; prefix
0002a70: 00                                        ; v128.const
0002a71: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a81: fd                                        ; prefix
0002a82: 49                                        ; i16x8.eq
0002a83: 1a                                        ; drop
0002a84: 0b                                        ; end
0002a5b: 29                                        ; FIXUP func body size
; function body 258
0002a85: 00                                        ; func body size (guess)
0002a86: 00                                        ; local decl count
0002a87: fd                                        ; prefix
0002a88: 00                                        ; v128.const
0002a89: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a99: fd                                        ; prefix
0002a9a: 00                                        ; v128.const
0002a9b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002aab: fd                                        ; prefix
0002aac: 4a                                        ; i32x4.eq
0002aad: 1a                                        ; drop
0002aae: 0b                                        ; end
0002a85: 29                                        ; FIXUP func body size
; function body 259
0002aaf: 00                                        ; func body size (guess)
0002ab0: 00                                        ; local decl count
0002ab1: fd                                        ; prefix
0002ab2: 00                                        ; v128.const
0002ab3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ac3: fd                                        ; prefix
0002ac4: 00                                        ; v128.const
0002ac5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ad5: fd                                        ; prefix
0002ad6: 4b                                        ; f32x4.eq
0002ad7: 1a                                        ; drop
0002ad8: 0b                                        ; end
0002aaf: 29                                        ; FIXUP func body size
; function body 260
0002ad9: 00                                        ; func body size (guess)
0002ada: 00                                        ; local decl count
0002adb: fd                                        ; prefix
0002adc: 00                                        ; v128.const
0002add: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002aed: fd                                        ; prefix
0002aee: 00                                        ; v128.const
0002aef: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002aff: fd                                        ; prefix
0002b00: 4c                                        ; f64x2.eq
0002b01: 1a                                        ; drop
0002b02: 0b                                        ; end
0002ad9: 29                                        ; FIXUP func body size
; function body 261
0002b03: 00                                        ; func body size (guess)
0002b04: 00                                        ; local decl count
0002b05: fd                                        ; prefix
0002b06: 00                                        ; v128.const
0002b07: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b17: fd                                        ; prefix
0002b18: 00                                        ; v128.const
0002b19: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b29: fd                                        ; prefix
0002b2a: 4d                                        ; i8x16.ne
0002b2b: 1a                                        ; drop
0002b2c: 0b                                        ; end
0002b03: 29                                        ; FIXUP func body size
; function body 262
0002b2d: 00                                        ; func body size (guess)
0002b2e: 00                                        ; local decl count
0002b2f: fd                                        ; prefix
0002b30: 00                                        ; v128.const
0002b31: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b41: fd                                        ; prefix
0002b42: 00                                        ; v128.const
0002b43: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b53: fd                                        ; prefix
0002b54: 4e                                        ; i16x8.ne
0002b55: 1a                                        ; drop
0002b56: 0b                                        ; end
0002b2d: 29                                        ; FIXUP func body size
; function body 263
0002b57: 00                                        ; func body size (guess)
0002b58: 00                                        ; local decl count
0002b59: fd                                        ; prefix
0002b5a: 00                                        ; v128.const
0002b5b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b6b: fd                                        ; prefix
0002b6c: 00                                        ; v128.const
0002b6d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b7d: fd                                        ; prefix
0002b7e: 4f                                        ; i32x4.ne
0002b7f: 1a                                        ; drop
0002b80: 0b                                        ; end
0002b57: 29                                        ; FIXUP func body size
; function body 264
0002b81: 00                                        ; func body size (guess)
0002b82: 00                                        ; local decl count
0002b83: fd                                        ; prefix
0002b84: 00                                        ; v128.const
0002b85: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b95: fd                                        ; prefix
0002b96: 00                                        ; v128.const
0002b97: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ba7: fd                                        ; prefix
0002ba8: 50                                        ; f32x4.ne
0002ba9: 1a                                        ; drop
0002baa: 0b                                        ; end
0002b81: 29                                        ; FIXUP func body size
; function body 265
0002bab: 00                                        ; func body size (guess)
0002bac: 00                                        ; local decl count
0002bad: fd                                        ; prefix
0002bae: 00                                        ; v128.const
0002baf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bbf: fd                                        ; prefix
0002bc0: 00                                        ; v128.const
0002bc1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bd1: fd                                        ; prefix
0002bd2: 51                                        ; f64x2.ne
0002bd3: 1a                                        ; drop
0002bd4: 0b                                        ; end
0002bab: 29                                        ; FIXUP func body size
; function body 266
0002bd5: 00                                        ; func body size (guess)
0002bd6: 00                                        ; local decl count
0002bd7: fd                                        ; prefix
0002bd8: 00                                        ; v128.const
0002bd9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002be9: fd                                        ; prefix
0002bea: 00                                        ; v128.const
0002beb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bfb: fd                                        ; prefix
0002bfc: 52                                        ; i8x16.lt_s
0002bfd: 1a                                        ; drop
0002bfe: 0b                                        ; end
0002bd5: 29                                        ; FIXUP func body size
; function body 267
0002bff: 00                                        ; func body size (guess)
0002c00: 00                                        ; local decl count
0002c01: fd                                        ; prefix
0002c02: 00                                        ; v128.const
0002c03: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c13: fd                                        ; prefix
0002c14: 00                                        ; v128.const
0002c15: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c25: fd                                        ; prefix
0002c26: 53                                        ; i8x16.lt_u
0002c27: 1a                                        ; drop
0002c28: 0b                                        ; end
0002bff: 29                                        ; FIXUP func body size
; function body 268
0002c29: 00                                        ; func body size (guess)
0002c2a: 00                                        ; local decl count
0002c2b: fd                                        ; prefix
0002c2c: 00                                        ; v128.const
0002c2d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c3d: fd                                        ; prefix
0002c3e: 00                                        ; v128.const
0002c3f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c4f: fd                                        ; prefix
0002c50: 54                                        ; i16x8.lt_s
0002c51: 1a                                        ; drop
0002c52: 0b                                        ; end
0002c29: 29                                        ; FIXUP func body size
; function body 269
0002c53: 00                                        ; func body size (guess)
0002c54: 00                                        ; local decl count
0002c55: fd                                        ; prefix
0002c56: 00                                        ; v128.const
0002c57: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c67: fd                                        ; prefix
0002c68: 00                                        ; v128.const
0002c69: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c79: fd                                        ; prefix
0002c7a: 55                                        ; i16x8.lt_u
0002c7b: 1a                                        ; drop
0002c7c: 0b                                        ; end
0002c53: 29                                        ; FIXUP func body size
; function body 270
0002c7d: 00                                        ; func body size (guess)
0002c7e: 00                                        ; local decl count
0002c7f: fd                                        ; prefix
0002c80: 00                                        ; v128.const
0002c81: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c91: fd                                        ; prefix
0002c92: 00                                        ; v128.const
0002c93: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ca3: fd                                        ; prefix
0002ca4: 56                                        ; i32x4.lt_s
0002ca5: 1a                                        ; drop
0002ca6: 0b                                        ; end
0002c7d: 29                                        ; FIXUP func body size
; function body 271
0002ca7: 00                                        ; func body size (guess)
0002ca8: 00                                        ; local decl count
0002ca9: fd                                        ; prefix
0002caa: 00                                        ; v128.const
0002cab: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cbb: fd                                        ; prefix
0002cbc: 00                                        ; v128.const
0002cbd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ccd: fd                                        ; prefix
0002cce: 57                                        ; i32x4.lt_u
0002ccf: 1a                                        ; drop
0002cd0: 0b                                        ; end
0002ca7: 29                                        ; FIXUP func body size
; function body 272
0002cd1: 00                                        ; func body size (guess)
0002cd2: 00                                        ; local decl count
0002cd3: fd                                        ; prefix
0002cd4: 00                                        ; v128.const
0002cd5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ce5: fd                                        ; prefix
0002ce6: 00                                        ; v128.const
0002ce7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002cf7: fd                                        ; prefix
0002cf8: 58                                        ; f32x4.lt
0002cf9: 1a                                        ; drop
0002cfa: 0b                                        ; end
0002cd1: 29                                        ; FIXUP func body size
; function body 273
0002cfb: 00                                        ; func body size (guess)
0002cfc: 00                                        ; local decl count
0002cfd: fd                                        ; prefix
0002cfe: 00                                        ; v128.const
0002cff: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d0f: fd                                        ; prefix
0002d10: 00                                        ; v128.const
0002d11: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d21: fd                                        ; prefix
0002d22: 59                                        ; f64x2.lt
0002d23: 1a                                        ; drop
0002d24: 0b                                        ; end
0002cfb: 29                                        ; FIXUP func body size
; function body 274
0002d25: 00                                        ; func body size (guess)
0002d26: 00                                        ; local decl count
0002d27: fd                                        ; prefix
0002d28: 00                                        ; v128.const
0002d29: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d39: fd                                        ; prefix
0002d3a: 00                                        ; v128.const
0002d3b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d4b: fd                                        ; prefix
0002d4c: 5a                                        ; i8x16.le_s
0002d4d: 1a                                        ; drop
0002d4e: 0b                                        ; end
0002d25: 29                                        ; FIXUP func body size
; function body 275
0002d4f: 00                                        ; func body size (guess)
0002d50: 00                                        ; local decl count
0002d51: fd                                        ; prefix
0002d52: 00                                        ; v128.const
0002d53: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d63: fd                                        ; prefix
0002d64: 00                                        ; v128.const
0002d65: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d75: fd                                        ; prefix
0002d76: 5b                                        ; i8x16.le_u
0002d77: 1a                                        ; drop
0002d78: 0b                                        ; end
0002d4f: 29                                        ; FIXUP func body size
; function body 276
0002d79: 00                                        ; func body size (guess)
0002d7a: 00                                        ; local decl count
0002d7b: fd                                        ; prefix
0002d7c: 00                                        ; v128.const
0002d7d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d8d: fd                                        ; prefix
0002d8e: 00                                        ; v128.const
0002d8f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d9f: fd                                        ; prefix
0002da0: 5c                                        ; i16x8.le_s
0002da1: 1a                                        ; drop
0002da2: 0b                                        ; end
0002d79: 29                                        ; FIXUP func body size
; function body 277
0002da3: 00                                        ; func body size (guess)
0002da4: 00                                        ; local decl count
0002da5: fd                                        ; prefix
0002da6: 00                                        ; v128.const
0002da7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002db7: fd                                        ; prefix
0002db8: 00                                        ; v128.const
0002db9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002dc9: fd                                        ; prefix
0002dca: 5d                                        ; i16x8.le_u
0002dcb: 1a                                        ; drop
0002dcc: 0b                                        ; end
0002da3: 29                                        ; FIXUP func body size
; function body 278
0002dcd: 00                                        ; func body size (guess)
0002dce: 00                                        ; local decl count
0002dcf: fd                                        ; prefix
0002dd0: 00                                        ; v128.const
0002dd1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002de1: fd                                        ; prefix
0002de2: 00                                        ; v128.const
0002de3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002df3: fd                                        ; prefix
0002df4: 5e                                        ; i32x4.le_s
0002df5: 1a                                        ; drop
0002df6: 0b                                        ; end
0002dcd: 29                                        ; FIXUP func body size
; function body 279
0002df7: 00                                        ; func body size (guess)
0002df8: 00                                        ; local decl count
0002df9: fd                                        ; prefix
0002dfa: 00                                        ; v128.const
0002dfb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e0b: fd                                        ; prefix
0002e0c: 00                                        ; v128.const
0002e0d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e1d: fd                                        ; prefix
0002e1e: 5f                                        ; i32x4.le_u
0002e1f: 1a                                        ; drop
0002e20: 0b                                        ; end
0002df7: 29                                        ; FIXUP func body size
; function body 280
0002e21: 00                                        ; func body size (guess)
0002e22: 00                                        ; local decl count
0002e23: fd                                        ; prefix
0002e24: 00                                        ; v128.const
0002e25: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e35: fd                                        ; prefix
0002e36: 00                                        ; v128.const
0002e37: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e47: fd                                        ; prefix
0002e48: 60                                        ; f32x4.le
0002e49: 1a                                        ; drop
0002e4a: 0b                                        ; end
0002e21: 29                                        ; FIXUP func body size
; function body 281
0002e4b: 00                                        ; func body size (guess)
0002e4c: 00                                        ; local decl count
0002e4d: fd                                        ; prefix
0002e4e: 00                                        ; v128.const
0002e4f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e5f: fd                                        ; prefix
0002e60: 00                                        ; v128.const
0002e61: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e71: fd                                        ; prefix
0002e72: 61                                        ; f64x2.le
0002e73: 1a                                        ; drop
0002e74: 0b                                        ; end
0002e4b: 29                                        ; FIXUP func body size
; function body 282
0002e75: 00                                        ; func body size (guess)
0002e76: 00                                        ; local decl count
0002e77: fd                                        ; prefix
0002e78: 00                                        ; v128.const
0002e79: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e89: fd                                        ; prefix
0002e8a: 00                                        ; v128.const
0002e8b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e9b: fd                                        ; prefix
0002e9c: 62                                        ; i8x16.gt_s
0002e9d: 1a                                        ; drop
0002e9e: 0b                                        ; end
0002e75: 29                                        ; FIXUP func body size
; function body 283
0002e9f: 00                                        ; func body size (guess)
0002ea0: 00                                        ; local decl count
0002ea1: fd                                        ; prefix
0002ea2: 00                                        ; v128.const
0002ea3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002eb3: fd                                        ; prefix
0002eb4: 00                                        ; v128.const
0002eb5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ec5: fd                                        ; prefix
0002ec6: 63                                        ; i8x16.gt_u
0002ec7: 1a                                        ; drop
0002ec8: 0b                                        ; end
0002e9f: 29                                        ; FIXUP func body size
; function body 284
0002ec9: 00                                        ; func body size (guess)
0002eca: 00                                        ; local decl count
0002ecb: fd                                        ; prefix
0002ecc: 00                                        ; v128.const
0002ecd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002edd: fd                                        ; prefix
0002ede: 00                                        ; v128.const
0002edf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002eef: fd                                        ; prefix
0002ef0: 64                                        ; i16x8.gt_s
0002ef1: 1a                                        ; drop
0002ef2: 0b                                        ; end
0002ec9: 29                                        ; FIXUP func body size
; function body 285
0002ef3: 00                                        ; func body size (guess)
0002ef4: 00                                        ; local decl count
0002ef5: fd                                        ; prefix
0002ef6: 00                                        ; v128.const
0002ef7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f07: fd                                        ; prefix
0002f08: 00                                        ; v128.const
0002f09: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f19: fd                                        ; prefix
0002f1a: 65                                        ; i16x8.gt_u
0002f1b: 1a                                        ; drop
0002f1c: 0b                                        ; end
0002ef3: 29                                        ; FIXUP func body size
; function body 286
0002f1d: 00                                        ; func body size (guess)
0002f1e: 00                                        ; local decl count
0002f1f: fd                                        ; prefix
0002f20: 00                                        ; v128.const
0002f21: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f31: fd                                        ; prefix
0002f32: 00                                        ; v128.const
0002f33: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f43: fd                                        ; prefix
0002f44: 66                                        ; i32x4.gt_s
0002f45: 1a                                        ; drop
0002f46: 0b                                        ; end
0002f1d: 29                                        ; FIXUP func body size
; function body 287
0002f47: 00                                        ; func body size (guess)
0002f48: 00                                        ; local decl count
0002f49: fd                                        ; prefix
0002f4a: 00                                        ; v128.const
0002f4b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f5b: fd                                        ; prefix
0002f5c: 00                                        ; v128.const
0002f5d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f6d: fd                                        ; prefix
0002f6e: 67                                        ; i32x4.gt_u
0002f6f: 1a                                        ; drop
0002f70: 0b                                        ; end
0002f47: 29                                        ; FIXUP func body size
; function body 288
0002f71: 00                                        ; func body size (guess)
0002f72: 00                                        ; local decl count
0002f73: fd                                        ; prefix
0002f74: 00                                        ; v128.const
0002f75: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f85: fd                                        ; prefix
0002f86: 00                                        ; v128.const
0002f87: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f97: fd                                        ; prefix
0002f98: 68                                        ; f32x4.gt
0002f99: 1a                                        ; drop
0002f9a: 0b                                        ; end
0002f71: 29                                        ; FIXUP func body size
; function body 289
0002f9b: 00                                        ; func body size (guess)
0002f9c: 00                                        ; local decl count
0002f9d: fd                                        ; prefix
0002f9e: 00                                        ; v128.const
0002f9f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002faf: fd                                        ; prefix
0002fb0: 00                                        ; v128.const
0002fb1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002fc1: fd                                        ; prefix
0002fc2: 69                                        ; f64x2.gt
0002fc3: 1a                                        ; drop
0002fc4: 0b                                        ; end
0002f9b: 29                                        ; FIXUP func body size
; function body 290
0002fc5: 00                                        ; func body size (guess)
0002fc6: 00                                        ; local decl count
0002fc7: fd                                        ; prefix
0002fc8: 00                                        ; v128.const
0002fc9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fd9: fd                                        ; prefix
0002fda: 00                                        ; v128.const
0002fdb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002feb: fd                                        ; prefix
0002fec: 6a                                        ; i8x16.ge_s
0002fed: 1a                                        ; drop
0002fee: 0b                                        ; end
0002fc5: 29                                        ; FIXUP func body size
; function body 291
0002fef: 00                                        ; func body size (guess)
0002ff0: 00                                        ; local decl count
0002ff1: fd                                        ; prefix
0002ff2: 00                                        ; v128.const
0002ff3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003003: fd                                        ; prefix
0003004: 00                                        ; v128.const
0003005: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003015: fd                                        ; prefix
0003016: 6b                                        ; i8x16.ge_u
0003017: 1a                                        ; drop
0003018: 0b                                        ; end
0002fef: 29                                        ; FIXUP func body size
; function body 292
0003019: 00                                        ; func body size (guess)
000301a: 00                                        ; local decl count
000301b: fd                                        ; prefix
000301c: 00                                        ; v128.const
000301d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000302d: fd                                        ; prefix
000302e: 00                                        ; v128.const
000302f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000303f: fd                                        ; prefix
0003040: 6c                                        ; i16x8.ge_s
0003041: 1a                                        ; drop
0003042: 0b                                        ; end
0003019: 29                                        ; FIXUP func body size
; function body 293
0003043: 00                                        ; func body size (guess)
0003044: 00                                        ; local decl count
0003045: fd                                        ; prefix
0003046: 00                                        ; v128.const
0003047: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003057: fd                                        ; prefix
0003058: 00                                        ; v128.const
0003059: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003069: fd                                        ; prefix
000306a: 6d                                        ; i16x8.ge_u
000306b: 1a                                        ; drop
000306c: 0b                                        ; end
0003043: 29                                        ; FIXUP func body size
; function body 294
000306d: 00                                        ; func body size (guess)
000306e: 00                                        ; local decl count
000306f: fd                                        ; prefix
0003070: 00                                        ; v128.const
0003071: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003081: fd                                        ; prefix
0003082: 00                                        ; v128.const
0003083: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003093: fd                                        ; prefix
0003094: 6e                                        ; i32x4.ge_s
0003095: 1a                                        ; drop
0003096: 0b                                        ; end
000306d: 29                                        ; FIXUP func body size
; function body 295
0003097: 00                                        ; func body size (guess)
0003098: 00                                        ; local decl count
0003099: fd                                        ; prefix
000309a: 00                                        ; v128.const
000309b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030ab: fd                                        ; prefix
00030ac: 00                                        ; v128.const
00030ad: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00030bd: fd                                        ; prefix
00030be: 6f                                        ; i32x4.ge_u
00030bf: 1a                                        ; drop
00030c0: 0b                                        ; end
0003097: 29                                        ; FIXUP func body size
; function body 296
00030c1: 00                                        ; func body size (guess)
00030c2: 00                                        ; local decl count
00030c3: fd                                        ; prefix
00030c4: 00                                        ; v128.const
00030c5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030d5: fd                                        ; prefix
00030d6: 00                                        ; v128.const
00030d7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00030e7: fd                                        ; prefix
00030e8: 70                                        ; f32x4.ge
00030e9: 1a                                        ; drop
00030ea: 0b                                        ; end
00030c1: 29                                        ; FIXUP func body size
; function body 297
00030eb: 00                                        ; func body size (guess)
00030ec: 00                                        ; local decl count
00030ed: fd                                        ; prefix
00030ee: 00                                        ; v128.const
00030ef: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030ff: fd                                        ; prefix
0003100: 00                                        ; v128.const
0003101: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003111: fd                                        ; prefix
0003112: 71                                        ; f64x2.ge
0003113: 1a                                        ; drop
0003114: 0b                                        ; end
00030eb: 29                                        ; FIXUP func body size
; function body 298
0003115: 00                                        ; func body size (guess)
0003116: 00                                        ; local decl count
0003117: fd                                        ; prefix
0003118: 00                                        ; v128.const
0003119: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003129: fd                                        ; prefix
000312a: 72                                        ; f32x4.neg
000312b: 1a                                        ; drop
000312c: 0b                                        ; end
0003115: 17                                        ; FIXUP func body size
; function body 299
000312d: 00                                        ; func body size (guess)
000312e: 00                                        ; local decl count
000312f: fd                                        ; prefix
0003130: 00                                        ; v128.const
0003131: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003141: fd                                        ; prefix
0003142: 73                                        ; f64x2.neg
0003143: 1a                                        ; drop
0003144: 0b                                        ; end
000312d: 17                                        ; FIXUP func body size
; function body 300
0003145: 00                                        ; func body size (guess)
0003146: 00                                        ; local decl count
0003147: fd                                        ; prefix
0003148: 00                                        ; v128.const
0003149: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003159: fd                                        ; prefix
000315a: 74                                        ; f32x4.abs
000315b: 1a                                        ; drop
000315c: 0b                                        ; end
0003145: 17                                        ; FIXUP func body size
; function body 301
000315d: 00                                        ; func body size (guess)
000315e: 00                                        ; local decl count
000315f: fd                                        ; prefix
0003160: 00                                        ; v128.const
0003161: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003171: fd                                        ; prefix
0003172: 75                                        ; f64x2.abs
0003173: 1a                                        ; drop
0003174: 0b                                        ; end
000315d: 17                                        ; FIXUP func body size
; function body 302
0003175: 00                                        ; func body size (guess)
0003176: 00                                        ; local decl count
0003177: fd                                        ; prefix
0003178: 00                                        ; v128.const
0003179: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003189: fd                                        ; prefix
000318a: 00                                        ; v128.const
000318b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000319b: fd                                        ; prefix
000319c: 76                                        ; f32x4.min
000319d: 1a                                        ; drop
000319e: 0b                                        ; end
0003175: 29                                        ; FIXUP func body size
; function body 303
000319f: 00                                        ; func body size (guess)
00031a0: 00                                        ; local decl count
00031a1: fd                                        ; prefix
00031a2: 00                                        ; v128.const
00031a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031b3: fd                                        ; prefix
00031b4: 00                                        ; v128.const
00031b5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00031c5: fd                                        ; prefix
00031c6: 77                                        ; f64x2.min
00031c7: 1a                                        ; drop
00031c8: 0b                                        ; end
000319f: 29                                        ; FIXUP func body size
; function body 304
00031c9: 00                                        ; func body size (guess)
00031ca: 00                                        ; local decl count
00031cb: fd                                        ; prefix
00031cc: 00                                        ; v128.const
00031cd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031dd: fd                                        ; prefix
00031de: 00                                        ; v128.const
00031df: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00031ef: fd                                        ; prefix
00031f0: 78                                        ; f32x4.max
00031f1: 1a                                        ; drop
00031f2: 0b                                        ; end
00031c9: 29                                        ; FIXUP func body size
; function body 305
00031f3: 00                                        ; func body size (guess)
00031f4: 00                                        ; local decl count
00031f5: fd                                        ; prefix
00031f6: 00                                        ; v128.const
00031f7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003207: fd                                        ; prefix
0003208: 00                                        ; v128.const
0003209: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003219: fd                                        ; prefix
000321a: 79                                        ; f64x2.max
000321b: 1a                                        ; drop
000321c: 0b                                        ; end
00031f3: 29                                        ; FIXUP func body size
; function body 306
000321d: 00                                        ; func body size (guess)
000321e: 00                                        ; local decl count
000321f: fd                                        ; prefix
0003220: 00                                        ; v128.const
0003221: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003231: fd                                        ; prefix
0003232: 00                                        ; v128.const
0003233: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003243: fd                                        ; prefix
0003244: 7a                                        ; f32x4.add
0003245: 1a                                        ; drop
0003246: 0b                                        ; end
000321d: 29                                        ; FIXUP func body size
; function body 307
0003247: 00                                        ; func body size (guess)
0003248: 00                                        ; local decl count
0003249: fd                                        ; prefix
000324a: 00                                        ; v128.const
000324b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000325b: fd                                        ; prefix
000325c: 00                                        ; v128.const
000325d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000326d: fd                                        ; prefix
000326e: 7b                                        ; f64x2.add
000326f: 1a                                        ; drop
0003270: 0b                                        ; end
0003247: 29                                        ; FIXUP func body size
; function body 308
0003271: 00                                        ; func body size (guess)
0003272: 00                                        ; local decl count
0003273: fd                                        ; prefix
0003274: 00                                        ; v128.const
0003275: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003285: fd                                        ; prefix
0003286: 00                                        ; v128.const
0003287: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003297: fd                                        ; prefix
0003298: 7c                                        ; f32x4.sub
0003299: 1a                                        ; drop
000329a: 0b                                        ; end
0003271: 29                                        ; FIXUP func body size
; function body 309
000329b: 00                                        ; func body size (guess)
000329c: 00                                        ; local decl count
000329d: fd                                        ; prefix
000329e: 00                                        ; v128.const
000329f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032af: fd                                        ; prefix
00032b0: 00                                        ; v128.const
00032b1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032c1: fd                                        ; prefix
00032c2: 7d                                        ; f64x2.sub
00032c3: 1a                                        ; drop
00032c4: 0b                                        ; end
000329b: 29                                        ; FIXUP func body size
; function body 310
00032c5: 00                                        ; func body size (guess)
00032c6: 00                                        ; local decl count
00032c7: fd                                        ; prefix
00032c8: 00                                        ; v128.const
00032c9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032d9: fd                                        ; prefix
00032da: 00                                        ; v128.const
00032db: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032eb: fd                                        ; prefix
00032ec: 7e                                        ; f32x4.div
00032ed: 1a                                        ; drop
00032ee: 0b                                        ; end
00032c5: 29                                        ; FIXUP func body size
; function body 311
00032ef: 00                                        ; func body size (guess)
00032f0: 00                                        ; local decl count
00032f1: fd                                        ; prefix
00032f2: 00                                        ; v128.const
00032f3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003303: fd                                        ; prefix
0003304: 00                                        ; v128.const
0003305: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003315: fd                                        ; prefix
0003316: 7f                                        ; f64x2.div
0003317: 1a                                        ; drop
0003318: 0b                                        ; end
00032ef: 29                                        ; FIXUP func body size
; function body 312
0003319: 00                                        ; func body size (guess)
000331a: 00                                        ; local decl count
000331b: fd                                        ; prefix
000331c: 00                                        ; v128.const
000331d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000332d: fd                                        ; prefix
000332e: 00                                        ; v128.const
000332f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000333f: fd                                        ; prefix
0003340: 8001                                      ; f32x4.mul
0003342: 1a                                        ; drop
0003343: 0b                                        ; end
0003319: 2a                                        ; FIXUP func body size
; function body 313
0003344: 00                                        ; func body size (guess)
0003345: 00                                        ; local decl count
0003346: fd                                        ; prefix
0003347: 00                                        ; v128.const
0003348: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003358: fd                                        ; prefix
0003359: 00                                        ; v128.const
000335a: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000336a: fd                                        ; prefix
000336b: 8101                                      ; f64x2.mul
000336d: 1a                                        ; drop
000336e: 0b                                        ; end
0003344: 2a                                        ; FIXUP func body size
; function body 314
000336f: 00                                        ; func body size (guess)
0003370: 00                                        ; local decl count
0003371: fd                                        ; prefix
0003372: 00                                        ; v128.const
0003373: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003383: fd                                        ; prefix
0003384: 8201                                      ; f32x4.sqrt
0003386: 1a                                        ; drop
0003387: 0b                                        ; end
000336f: 18                                        ; FIXUP func body size
; function body 315
0003388: 00                                        ; func body size (guess)
0003389: 00                                        ; local decl count
000338a: fd                                        ; prefix
000338b: 00                                        ; v128.const
000338c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000339c: fd                                        ; prefix
000339d: 8301                                      ; f64x2.sqrt
000339f: 1a                                        ; drop
00033a0: 0b                                        ; end
0003388: 18                                        ; FIXUP func body size
; function body 316
00033a1: 00                                        ; func body size (guess)
00033a2: 00                                        ; local decl count
00033a3: fd                                        ; prefix
00033a4: 00                                        ; v128.const
00033a5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033b5: fd                                        ; prefix
00033b6: 8401                                      ; f32x4.convert_s/i32x4
00033b8: 1a                                        ; drop
00033b9: 0b                                        ; end
00033a1: 18                                        ; FIXUP func body size
; function body 317
00033ba: 00                                        ; func body size (guess)
00033bb: 00                                        ; local decl count
00033bc: fd                                        ; prefix
00033bd: 00                                        ; v128.const
00033be: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033ce: fd                                        ; prefix
00033cf: 8501                                      ; f32x4.convert_u/i32x4
00033d1: 1a                                        ; drop
00033d2: 0b                                        ; end
00033ba: 18                                        ; FIXUP func body size
; function body 318
00033d3: 00                                        ; func body size (guess)
00033d4: 00                                        ; local decl count
00033d5: fd                                        ; prefix
00033d6: 00                                        ; v128.const
00033d7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033e7: fd                                        ; prefix
00033e8: 8601                                      ; f64x2.convert_s/i64x2
00033ea: 1a                                        ; drop
00033eb: 0b                                        ; end
00033d3: 18                                        ; FIXUP func body size
; function body 319
00033ec: 00                                        ; func body size (guess)
00033ed: 00                                        ; local decl count
00033ee: fd                                        ; prefix
00033ef: 00                                        ; v128.const
00033f0: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003400: fd                                        ; prefix
0003401: 8701                                      ; f64x2.convert_u/i64x2
0003403: 1a                                        ; drop
0003404: 0b                                        ; end
00033ec: 18                                        ; FIXUP func body size
; function body 320
0003405: 00                                        ; func body size (guess)
0003406: 00                                        ; local decl count
0003407: fd                                        ; prefix
0003408: 00                                        ; v128.const
0003409: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003419: fd                                        ; prefix
000341a: 8801                                      ; i32x4.trunc_s/f32x4:sat
000341c: 1a                                        ; drop
000341d: 0b                                        ; end
0003405: 18                                        ; FIXUP func body size
; function body 321
000341e: 00                                        ; func body size (guess)
000341f: 00                                        ; local decl count
0003420: fd                                        ; prefix
0003421: 00                                        ; v128.const
0003422: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003432: fd                                        ; prefix
0003433: 8901                                      ; i32x4.trunc_u/f32x4:sat
0003435: 1a                                        ; drop
0003436: 0b                                        ; end
000341e: 18                                        ; FIXUP func body size
; function body 322
0003437: 00                                        ; func body size (guess)
0003438: 00                                        ; local decl count
0003439: fd                                        ; prefix
000343a: 00                                        ; v128.const
000343b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000344b: fd                                        ; prefix
000344c: 8a01                                      ; i64x2.trunc_s/f64x2:sat
000344e: 1a                                        ; drop
000344f: 0b                                        ; end
0003437: 18                                        ; FIXUP func body size
; function body 323
0003450: 00                                        ; func body size (guess)
0003451: 00                                        ; local decl count
0003452: fd                                        ; prefix
0003453: 00                                        ; v128.const
0003454: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003464: fd                                        ; prefix
0003465: 8b01                                      ; i64x2.trunc_u/f64x2:sat
0003467: 1a                                        ; drop
0003468: 0b                                        ; end
0003450: 18                                        ; FIXUP func body size
; function body 324
0003469: 00                                        ; func body size (guess)
000346a: 00                                        ; local decl count
000346b: 41                                        ; i32.const
000346c: 01                                        ; i32 literal
000346d: 41                                        ; i32.const
000346e: 02                                        ; i32 literal
000346f: fe                                        ; prefix
0003470: 00                                        ; atomic.wake
0003471: 02                                        ; alignment
0003472: 03                                        ; memory offset
0003473: 1a                                        ; drop
0003474: 0b                                        ; end
0003469: 0b                                        ; FIXUP func body size
; function body 325
0003475: 00                                        ; func body size (guess)
0003476: 00                                        ; local decl count
0003477: 41                                        ; i32.const
0003478: 01                                        ; i32 literal
0003479: 41                                        ; i32.const
000347a: 02                                        ; i32 literal
000347b: 42                                        ; i64.const
000347c: 03                                        ; i64 literal
000347d: fe                                        ; prefix
000347e: 01                                        ; i32.atomic.wait
000347f: 02                                        ; alignment
0003480: 03                                        ; memory offset
0003481: 1a                                        ; drop
0003482: 0b                                        ; end
0003475: 0d                                        ; FIXUP func body size
; function body 326
0003483: 00                                        ; func body size (guess)
0003484: 00                                        ; local decl count
0003485: 41                                        ; i32.const
0003486: 01                                        ; i32 literal
0003487: 42                                        ; i64.const
0003488: 02                                        ; i64 literal
0003489: 42                                        ; i64.const
000348a: 03                                        ; i64 literal
000348b: fe                                        ; prefix
000348c: 02                                        ; i64.atomic.wait
000348d: 03                                        ; alignment
000348e: 03                                        ; memory offset
000348f: 1a                                        ; drop
0003490: 0b                                        ; end
0003483: 0d                                        ; FIXUP func body size
; function body 327
0003491: 00                                        ; func body size (guess)
0003492: 00                                        ; local decl count
0003493: 41                                        ; i32.const
0003494: 01                                        ; i32 literal
0003495: fe                                        ; prefix
0003496: 10                                        ; i32.atomic.load
0003497: 02                                        ; alignment
0003498: 03                                        ; memory offset
0003499: 1a                                        ; drop
000349a: 0b                                        ; end
0003491: 09                                        ; FIXUP func body size
; function body 328
000349b: 00                                        ; func body size (guess)
000349c: 00                                        ; local decl count
000349d: 41                                        ; i32.const
000349e: 01                                        ; i32 literal
000349f: fe                                        ; prefix
00034a0: 11                                        ; i64.atomic.load
00034a1: 03                                        ; alignment
00034a2: 07                                        ; memory offset
00034a3: 1a                                        ; drop
00034a4: 0b                                        ; end
000349b: 09                                        ; FIXUP func body size
; function body 329
00034a5: 00                                        ; func body size (guess)
00034a6: 00                                        ; local decl count
00034a7: 41                                        ; i32.const
00034a8: 01                                        ; i32 literal
00034a9: fe                                        ; prefix
00034aa: 12                                        ; i32.atomic.load8_u
00034ab: 00                                        ; alignment
00034ac: 03                                        ; memory offset
00034ad: 1a                                        ; drop
00034ae: 0b                                        ; end
00034a5: 09                                        ; FIXUP func body size
; function body 330
00034af: 00                                        ; func body size (guess)
00034b0: 00                                        ; local decl count
00034b1: 41                                        ; i32.const
00034b2: 01                                        ; i32 literal
00034b3: fe                                        ; prefix
00034b4: 13                                        ; i32.atomic.load16_u
00034b5: 01                                        ; alignment
00034b6: 03                                        ; memory offset
00034b7: 1a                                        ; drop
00034b8: 0b                                        ; end
00034af: 09                                        ; FIXUP func body size
; function body 331
00034b9: 00                                        ; func body size (guess)
00034ba: 00                                        ; local decl count
00034bb: 41                                        ; i32.const
00034bc: 01                                        ; i32 literal
00034bd: fe                                        ; prefix
00034be: 14                                        ; i64.atomic.load8_u
00034bf: 00                                        ; alignment
00034c0: 03                                        ; memory offset
00034c1: 1a                                        ; drop
00034c2: 0b                                        ; end
00034b9: 09                                        ; FIXUP func body size
; function body 332
00034c3: 00                                        ; func body size (guess)
00034c4: 00                                        ; local decl count
00034c5: 41                                        ; i32.const
00034c6: 01                                        ; i32 literal
00034c7: fe                                        ; prefix
00034c8: 15                                        ; i64.atomic.load16_u
00034c9: 01                                        ; alignment
00034ca: 03                                        ; memory offset
00034cb: 1a                                        ; drop
00034cc: 0b                                        ; end
00034c3: 09                                        ; FIXUP func body size
; function body 333
00034cd: 00                                        ; func body size (guess)
00034ce: 00                                        ; local decl count
00034cf: 41                                        ; i32.const
00034d0: 01                                        ; i32 literal
00034d1: fe                                        ; prefix
00034d2: 16                                        ; i64.atomic.load32_u
00034d3: 02                                        ; alignment
00034d4: 03                                        ; memory offset
00034d5: 1a                                        ; drop
00034d6: 0b                                        ; end
00034cd: 09                                        ; FIXUP func body size
; function body 334
00034d7: 00                                        ; func body size (guess)
00034d8: 00                                        ; local decl count
00034d9: 41                                        ; i32.const
00034da: 01                                        ; i32 literal
00034db: 41                                        ; i32.const
00034dc: 02                                        ; i32 literal
00034dd: fe                                        ; prefix
00034de: 17                                        ; i32.atomic.store
00034df: 02                                        ; alignment
00034e0: 03                                        ; memory offset
00034e1: 0b                                        ; end
00034d7: 0a                                        ; FIXUP func body size
; function body 335
00034e2: 00                                        ; func body size (guess)
00034e3: 00                                        ; local decl count
00034e4: 41                                        ; i32.const
00034e5: 01                                        ; i32 literal
00034e6: 42                                        ; i64.const
00034e7: 02                                        ; i64 literal
00034e8: fe                                        ; prefix
00034e9: 18                                        ; i64.atomic.store
00034ea: 03                                        ; alignment
00034eb: 07                                        ; memory offset
00034ec: 0b                                        ; end
00034e2: 0a                                        ; FIXUP func body size
; function body 336
00034ed: 00                                        ; func body size (guess)
00034ee: 00                                        ; local decl count
00034ef: 41                                        ; i32.const
00034f0: 01                                        ; i32 literal
00034f1: 41                                        ; i32.const
00034f2: 02                                        ; i32 literal
00034f3: fe                                        ; prefix
00034f4: 19                                        ; i32.atomic.store8
00034f5: 00                                        ; alignment
00034f6: 03                                        ; memory offset
00034f7: 0b                                        ; end
00034ed: 0a                                        ; FIXUP func body size
; function body 337
00034f8: 00                                        ; func body size (guess)
00034f9: 00                                        ; local decl count
00034fa: 41                                        ; i32.const
00034fb: 01                                        ; i32 literal
00034fc: 41                                        ; i32.const
00034fd: 02                                        ; i32 literal
00034fe: fe                                        ; prefix
00034ff: 1a                                        ; i32.atomic.store16
0003500: 01                                        ; alignment
0003501: 03                                        ; memory offset
0003502: 0b                                        ; end
00034f8: 0a                                        ; FIXUP func body size
; function body 338
0003503: 00                                        ; func body size (guess)
0003504: 00                                        ; local decl count
0003505: 41                                        ; i32.const
0003506: 01                                        ; i32 literal
0003507: 42                                        ; i64.const
0003508: 02                                        ; i64 literal
0003509: fe                                        ; prefix
000350a: 1b                                        ; i64.atomic.store8
000350b: 00                                        ; alignment
000350c: 03                                        ; memory offset
000350d: 0b                                        ; end
0003503: 0a                                        ; FIXUP func body size
; function body 339
000350e: 00                                        ; func body size (guess)
000350f: 00                                        ; local decl count
0003510: 41                                        ; i32.const
0003511: 01                                        ; i32 literal
0003512: 42                                        ; i64.const
0003513: 02                                        ; i64 literal
0003514: fe                                        ; prefix
0003515: 1c                                        ; i64.atomic.store16
0003516: 01                                        ; alignment
0003517: 03                                        ; memory offset
0003518: 0b                                        ; end
000350e: 0a                                        ; FIXUP func body size
; function body 340
0003519: 00                                        ; func body size (guess)
000351a: 00                                        ; local decl count
000351b: 41                                        ; i32.const
000351c: 01                                        ; i32 literal
000351d: 42                                        ; i64.const
000351e: 02                                        ; i64 literal
000351f: fe                                        ; prefix
0003520: 1d                                        ; i64.atomic.store32
0003521: 02                                        ; alignment
0003522: 03                                        ; memory offset
0003523: 0b                                        ; end
0003519: 0a                                        ; FIXUP func body size
; function body 341
0003524: 00                                        ; func body size (guess)
0003525: 00                                        ; local decl count
0003526: 41                                        ; i32.const
0003527: 01                                        ; i32 literal
0003528: 41                                        ; i32.const
0003529: 02                                        ; i32 literal
000352a: fe                                        ; prefix
000352b: 1e                                        ; i32.atomic.rmw.add
000352c: 02                                        ; alignment
000352d: 03                                        ; memory offset
000352e: 1a                                        ; drop
000352f: 0b                                        ; end
0003524: 0b                                        ; FIXUP func body size
; function body 342
0003530: 00                                        ; func body size (guess)
0003531: 00                                        ; local decl count
0003532: 41                                        ; i32.const
0003533: 01                                        ; i32 literal
0003534: 42                                        ; i64.const
0003535: 02                                        ; i64 literal
0003536: fe                                        ; prefix
0003537: 1f                                        ; i64.atomic.rmw.add
0003538: 03                                        ; alignment
0003539: 07                                        ; memory offset
000353a: 1a                                        ; drop
000353b: 0b                                        ; end
0003530: 0b                                        ; FIXUP func body size
; function body 343
000353c: 00                                        ; func body size (guess)
000353d: 00                                        ; local decl count
000353e: 41                                        ; i32.const
000353f: 01                                        ; i32 literal
0003540: 41                                        ; i32.const
0003541: 02                                        ; i32 literal
0003542: fe                                        ; prefix
0003543: 20                                        ; i32.atomic.rmw8_u.add
0003544: 00                                        ; alignment
0003545: 03                                        ; memory offset
0003546: 1a                                        ; drop
0003547: 0b                                        ; end
000353c: 0b                                        ; FIXUP func body size
; function body 344
0003548: 00                                        ; func body size (guess)
0003549: 00                                        ; local decl count
000354a: 41                                        ; i32.const
000354b: 01                                        ; i32 literal
000354c: 41                                        ; i32.const
000354d: 02                                        ; i32 literal
000354e: fe                                        ; prefix
000354f: 21                                        ; i32.atomic.rmw16_u.add
0003550: 01                                        ; alignment
0003551: 03                                        ; memory offset
0003552: 1a                                        ; drop
0003553: 0b                                        ; end
0003548: 0b                                        ; FIXUP func body size
; function body 345
0003554: 00                                        ; func body size (guess)
0003555: 00                                        ; local decl count
0003556: 41                                        ; i32.const
0003557: 01                                        ; i32 literal
0003558: 42                                        ; i64.const
0003559: 02                                        ; i64 literal
000355a: fe                                        ; prefix
000355b: 22                                        ; i64.atomic.rmw8_u.add
000355c: 00                                        ; alignment
000355d: 03                                        ; memory offset
000355e: 1a                                        ; drop
000355f: 0b                                        ; end
0003554: 0b                                        ; FIXUP func body size
; function body 346
0003560: 00                                        ; func body size (guess)
0003561: 00                                        ; local decl count
0003562: 41                                        ; i32.const
0003563: 01                                        ; i32 literal
0003564: 42                                        ; i64.const
0003565: 02                                        ; i64 literal
0003566: fe                                        ; prefix
0003567: 23                                        ; i64.atomic.rmw16_u.add
0003568: 01                                        ; alignment
0003569: 03                                        ; memory offset
000356a: 1a                                        ; drop
000356b: 0b                                        ; end
0003560: 0b                                        ; FIXUP func body size
; function body 347
000356c: 00                                        ; func body size (guess)
000356d: 00                                        ; local decl count
000356e: 41                                        ; i32.const
000356f: 01                                        ; i32 literal
0003570: 42                                        ; i64.const
0003571: 02                                        ; i64 literal
0003572: fe                                        ; prefix
0003573: 24                                        ; i64.atomic.rmw32_u.add
0003574: 02                                        ; alignment
0003575: 03                                        ; memory offset
0003576: 1a                                        ; drop
0003577: 0b                                        ; end
000356c: 0b                                        ; FIXUP func body size
; function body 348
0003578: 00                                        ; func body size (guess)
0003579: 00                                        ; local decl count
000357a: 41                                        ; i32.const
000357b: 01                                        ; i32 literal
000357c: 41                                        ; i32.const
000357d: 02                                        ; i32 literal
000357e: fe                                        ; prefix
000357f: 25                                        ; i32.atomic.rmw.sub
0003580: 02                                        ; alignment
0003581: 03                                        ; memory offset
0003582: 1a                                        ; drop
0003583: 0b                                        ; end
0003578: 0b                                        ; FIXUP func body size
; function body 349
0003584: 00                                        ; func body size (guess)
0003585: 00                                        ; local decl count
0003586: 41                                        ; i32.const
0003587: 01                                        ; i32 literal
0003588: 42                                        ; i64.const
0003589: 02                                        ; i64 literal
000358a: fe                                        ; prefix
000358b: 26                                        ; i64.atomic.rmw.sub
000358c: 03                                        ; alignment
000358d: 07                                        ; memory offset
000358e: 1a                                        ; drop
000358f: 0b                                        ; end
0003584: 0b                                        ; FIXUP func body size
; function body 350
0003590: 00                                        ; func body size (guess)
0003591: 00                                        ; local decl count
0003592: 41                                        ; i32.const
0003593: 01                                        ; i32 literal
0003594: 41                                        ; i32.const
0003595: 02                                        ; i32 literal
0003596: fe                                        ; prefix
0003597: 27                                        ; i32.atomic.rmw8_u.sub
0003598: 00                                        ; alignment
0003599: 03                                        ; memory offset
000359a: 1a                                        ; drop
000359b: 0b                                        ; end
0003590: 0b                                        ; FIXUP func body size
; function body 351
000359c: 00                                        ; func body size (guess)
000359d: 00                                        ; local decl count
000359e: 41                                        ; i32.const
000359f: 01                                        ; i32 literal
00035a0: 41                                        ; i32.const
00035a1: 02                                        ; i32 literal
00035a2: fe                                        ; prefix
00035a3: 28                                        ; i32.atomic.rmw16_u.sub
00035a4: 01                                        ; alignment
00035a5: 03                                        ; memory offset
00035a6: 1a                                        ; drop
00035a7: 0b                                        ; end
000359c: 0b                                        ; FIXUP func body size
; function body 352
00035a8: 00                                        ; func body size (guess)
00035a9: 00                                        ; local decl count
00035aa: 41                                        ; i32.const
00035ab: 01                                        ; i32 literal
00035ac: 42                                        ; i64.const
00035ad: 02                                        ; i64 literal
00035ae: fe                                        ; prefix
00035af: 29                                        ; i64.atomic.rmw8_u.sub
00035b0: 00                                        ; alignment
00035b1: 03                                        ; memory offset
00035b2: 1a                                        ; drop
00035b3: 0b                                        ; end
00035a8: 0b                                        ; FIXUP func body size
; function body 353
00035b4: 00                                        ; func body size (guess)
00035b5: 00                                        ; local decl count
00035b6: 41                                        ; i32.const
00035b7: 01                                        ; i32 literal
00035b8: 42                                        ; i64.const
00035b9: 02                                        ; i64 literal
00035ba: fe                                        ; prefix
00035bb: 2a                                        ; i64.atomic.rmw16_u.sub
00035bc: 01                                        ; alignment
00035bd: 03                                        ; memory offset
00035be: 1a                                        ; drop
00035bf: 0b                                        ; end
00035b4: 0b                                        ; FIXUP func body size
; function body 354
00035c0: 00                                        ; func body size (guess)
00035c1: 00                                        ; local decl count
00035c2: 41                                        ; i32.const
00035c3: 01                                        ; i32 literal
00035c4: 42                                        ; i64.const
00035c5: 02                                        ; i64 literal
00035c6: fe                                        ; prefix
00035c7: 2b                                        ; i64.atomic.rmw32_u.sub
00035c8: 02                                        ; alignment
00035c9: 03                                        ; memory offset
00035ca: 1a                                        ; drop
00035cb: 0b                                        ; end
00035c0: 0b                                        ; FIXUP func body size
; function body 355
00035cc: 00                                        ; func body size (guess)
00035cd: 00                                        ; local decl count
00035ce: 41                                        ; i32.const
00035cf: 01                                        ; i32 literal
00035d0: 41                                        ; i32.const
00035d1: 02                                        ; i32 literal
00035d2: fe                                        ; prefix
00035d3: 2c                                        ; i32.atomic.rmw.and
00035d4: 02                                        ; alignment
00035d5: 03                                        ; memory offset
00035d6: 1a                                        ; drop
00035d7: 0b                                        ; end
00035cc: 0b                                        ; FIXUP func body size
; function body 356
00035d8: 00                                        ; func body size (guess)
00035d9: 00                                        ; local decl count
00035da: 41                                        ; i32.const
00035db: 01                                        ; i32 literal
00035dc: 42                                        ; i64.const
00035dd: 02                                        ; i64 literal
00035de: fe                                        ; prefix
00035df: 2d                                        ; i64.atomic.rmw.and
00035e0: 03                                        ; alignment
00035e1: 07                                        ; memory offset
00035e2: 1a                                        ; drop
00035e3: 0b                                        ; end
00035d8: 0b                                        ; FIXUP func body size
; function body 357
00035e4: 00                                        ; func body size (guess)
00035e5: 00                                        ; local decl count
00035e6: 41                                        ; i32.const
00035e7: 01                                        ; i32 literal
00035e8: 41                                        ; i32.const
00035e9: 02                                        ; i32 literal
00035ea: fe                                        ; prefix
00035eb: 2e                                        ; i32.atomic.rmw8_u.and
00035ec: 00                                        ; alignment
00035ed: 03                                        ; memory offset
00035ee: 1a                                        ; drop
00035ef: 0b                                        ; end
00035e4: 0b                                        ; FIXUP func body size
; function body 358
00035f0: 00                                        ; func body size (guess)
00035f1: 00                                        ; local decl count
00035f2: 41                                        ; i32.const
00035f3: 01                                        ; i32 literal
00035f4: 41                                        ; i32.const
00035f5: 02                                        ; i32 literal
00035f6: fe                                        ; prefix
00035f7: 2f                                        ; i32.atomic.rmw16_u.and
00035f8: 01                                        ; alignment
00035f9: 03                                        ; memory offset
00035fa: 1a                                        ; drop
00035fb: 0b                                        ; end
00035f0: 0b                                        ; FIXUP func body size
; function body 359
00035fc: 00                                        ; func body size (guess)
00035fd: 00                                        ; local decl count
00035fe: 41                                        ; i32.const
00035ff: 01                                        ; i32 literal
0003600: 42                                        ; i64.const
0003601: 02                                        ; i64 literal
0003602: fe                                        ; prefix
0003603: 30                                        ; i64.atomic.rmw8_u.and
0003604: 00                                        ; alignment
0003605: 03                                        ; memory offset
0003606: 1a                                        ; drop
0003607: 0b                                        ; end
00035fc: 0b                                        ; FIXUP func body size
; function body 360
0003608: 00                                        ; func body size (guess)
0003609: 00                                        ; local decl count
000360a: 41                                        ; i32.const
000360b: 01                                        ; i32 literal
000360c: 42                                        ; i64.const
000360d: 02                                        ; i64 literal
000360e: fe                                        ; prefix
000360f: 31                                        ; i64.atomic.rmw16_u.and
0003610: 01                                        ; alignment
0003611: 03                                        ; memory offset
0003612: 1a                                        ; drop
0003613: 0b                                        ; end
0003608: 0b                                        ; FIXUP func body size
; function body 361
0003614: 00                                        ; func body size (guess)
0003615: 00                                        ; local decl count
0003616: 41                                        ; i32.const
0003617: 01                                        ; i32 literal
0003618: 42                                        ; i64.const
0003619: 02                                        ; i64 literal
000361a: fe                                        ; prefix
000361b: 32                                        ; i64.atomic.rmw32_u.and
000361c: 02                                        ; alignment
000361d: 03                                        ; memory offset
000361e: 1a                                        ; drop
000361f: 0b                                        ; end
0003614: 0b                                        ; FIXUP func body size
; function body 362
0003620: 00                                        ; func body size (guess)
0003621: 00                                        ; local decl count
0003622: 41                                        ; i32.const
0003623: 01                                        ; i32 literal
0003624: 41                                        ; i32.const
0003625: 02                                        ; i32 literal
0003626: fe                                        ; prefix
0003627: 33                                        ; i32.atomic.rmw.or
0003628: 02                                        ; alignment
0003629: 03                                        ; memory offset
000362a: 1a                                        ; drop
000362b: 0b                                        ; end
0003620: 0b                                        ; FIXUP func body size
; function body 363
000362c: 00                                        ; func body size (guess)
000362d: 00                                        ; local decl count
000362e: 41                                        ; i32.const
000362f: 01                                        ; i32 literal
0003630: 42                                        ; i64.const
0003631: 02                                        ; i64 literal
0003632: fe                                        ; prefix
0003633: 34                                        ; i64.atomic.rmw.or
0003634: 03                                        ; alignment
0003635: 07                                        ; memory offset
0003636: 1a                                        ; drop
0003637: 0b                                        ; end
000362c: 0b                                        ; FIXUP func body size
; function body 364
0003638: 00                                        ; func body size (guess)
0003639: 00                                        ; local decl count
000363a: 41                                        ; i32.const
000363b: 01                                        ; i32 literal
000363c: 41                                        ; i32.const
000363d: 02                                        ; i32 literal
000363e: fe                                        ; prefix
000363f: 35                                        ; i32.atomic.rmw8_u.or
0003640: 00                                        ; alignment
0003641: 03                                        ; memory offset
0003642: 1a                                        ; drop
0003643: 0b                                        ; end
0003638: 0b                                        ; FIXUP func body size
; function body 365
0003644: 00                                        ; func body size (guess)
0003645: 00                                        ; local decl count
0003646: 41                                        ; i32.const
0003647: 01                                        ; i32 literal
0003648: 41                                        ; i32.const
0003649: 02                                        ; i32 literal
000364a: fe                                        ; prefix
000364b: 36                                        ; i32.atomic.rmw16_u.or
000364c: 01                                        ; alignment
000364d: 03                                        ; memory offset
000364e: 1a                                        ; drop
000364f: 0b                                        ; end
0003644: 0b                                        ; FIXUP func body size
; function body 366
0003650: 00                                        ; func body size (guess)
0003651: 00                                        ; local decl count
0003652: 41                                        ; i32.const
0003653: 01                                        ; i32 literal
0003654: 42                                        ; i64.const
0003655: 02                                        ; i64 literal
0003656: fe                                        ; prefix
0003657: 37                                        ; i64.atomic.rmw8_u.or
0003658: 00                                        ; alignment
0003659: 03                                        ; memory offset
000365a: 1a                                        ; drop
000365b: 0b                                        ; end
0003650: 0b                                        ; FIXUP func body size
; function body 367
000365c: 00                                        ; func body size (guess)
000365d: 00                                        ; local decl count
000365e: 41                                        ; i32.const
000365f: 01                                        ; i32 literal
0003660: 42                                        ; i64.const
0003661: 02                                        ; i64 literal
0003662: fe                                        ; prefix
0003663: 38                                        ; i64.atomic.rmw16_u.or
0003664: 01                                        ; alignment
0003665: 03                                        ; memory offset
0003666: 1a                                        ; drop
0003667: 0b                                        ; end
000365c: 0b                                        ; FIXUP func body size
; function body 368
0003668: 00                                        ; func body size (guess)
0003669: 00                                        ; local decl count
000366a: 41                                        ; i32.const
000366b: 01                                        ; i32 literal
000366c: 42                                        ; i64.const
000366d: 02                                        ; i64 literal
000366e: fe                                        ; prefix
000366f: 39                                        ; i64.atomic.rmw32_u.or
0003670: 02                                        ; alignment
0003671: 03                                        ; memory offset
0003672: 1a                                        ; drop
0003673: 0b                                        ; end
0003668: 0b                                        ; FIXUP func body size
; function body 369
0003674: 00                                        ; func body size (guess)
0003675: 00                                        ; local decl count
0003676: 41                                        ; i32.const
0003677: 01                                        ; i32 literal
0003678: 41                                        ; i32.const
0003679: 02                                        ; i32 literal
000367a: fe                                        ; prefix
000367b: 3a                                        ; i32.atomic.rmw.xor
000367c: 02                                        ; alignment
000367d: 03                                        ; memory offset
000367e: 1a                                        ; drop
000367f: 0b                                        ; end
0003674: 0b                                        ; FIXUP func body size
; function body 370
0003680: 00                                        ; func body size (guess)
0003681: 00                                        ; local decl count
0003682: 41                                        ; i32.const
0003683: 01                                        ; i32 literal
0003684: 42                                        ; i64.const
0003685: 02                                        ; i64 literal
0003686: fe                                        ; prefix
0003687: 3b                                        ; i64.atomic.rmw.xor
0003688: 03                                        ; alignment
0003689: 07                                        ; memory offset
000368a: 1a                                        ; drop
000368b: 0b                                        ; end
0003680: 0b                                        ; FIXUP func body size
; function body 371
000368c: 00                                        ; func body size (guess)
000368d: 00                                        ; local decl count
000368e: 41                                        ; i32.const
000368f: 01                                        ; i32 literal
0003690: 41                                        ; i32.const
0003691: 02                                        ; i32 literal
0003692: fe                                        ; prefix
0003693: 3c                                        ; i32.atomic.rmw8_u.xor
0003694: 00                                        ; alignment
0003695: 03                                        ; memory offset
0003696: 1a                                        ; drop
0003697: 0b                                        ; end
000368c: 0b                                        ; FIXUP func body size
; function body 372
0003698: 00                                        ; func body size (guess)
0003699: 00                                        ; local decl count
000369a: 41                                        ; i32.const
000369b: 01                                        ; i32 literal
000369c: 41                                        ; i32.const
000369d: 02                                        ; i32 literal
000369e: fe                                        ; prefix
000369f: 3d                                        ; i32.atomic.rmw16_u.xor
00036a0: 01                                        ; alignment
00036a1: 03                                        ; memory offset
00036a2: 1a                                        ; drop
00036a3: 0b                                        ; end
0003698: 0b                                        ; FIXUP func body size
; function body 373
00036a4: 00                                        ; func body size (guess)
00036a5: 00                                        ; local decl count
00036a6: 41                                        ; i32.const
00036a7: 01                                        ; i32 literal
00036a8: 42                                        ; i64.const
00036a9: 02                                        ; i64 literal
00036aa: fe                                        ; prefix
00036ab: 3e                                        ; i64.atomic.rmw8_u.xor
00036ac: 00                                        ; alignment
00036ad: 03                                        ; memory offset
00036ae: 1a                                        ; drop
00036af: 0b                                        ; end
00036a4: 0b                                        ; FIXUP func body size
; function body 374
00036b0: 00                                        ; func body size (guess)
00036b1: 00                                        ; local decl count
00036b2: 41                                        ; i32.const
00036b3: 01                                        ; i32 literal
00036b4: 42                                        ; i64.const
00036b5: 02                                        ; i64 literal
00036b6: fe                                        ; prefix
00036b7: 3f                                        ; i64.atomic.rmw16_u.xor
00036b8: 01                                        ; alignment
00036b9: 03                                        ; memory offset
00036ba: 1a                                        ; drop
00036bb: 0b                                        ; end
00036b0: 0b                                        ; FIXUP func body size
; function body 375
00036bc: 00                                        ; func body size (guess)
00036bd: 00                                        ; local decl count
00036be: 41                                        ; i32.const
00036bf: 01                                        ; i32 literal
00036c0: 42                                        ; i64.const
00036c1: 02                                        ; i64 literal
00036c2: fe                                        ; prefix
00036c3: 40                                        ; i64.atomic.rmw32_u.xor
00036c4: 02                                        ; alignment
00036c5: 03                                        ; memory offset
00036c6: 1a                                        ; drop
00036c7: 0b                                        ; end
00036bc: 0b                                        ; FIXUP func body size
; function body 376
00036c8: 00                                        ; func body size (guess)
00036c9: 00                                        ; local decl count
00036ca: 41                                        ; i32.const
00036cb: 01                                        ; i32 literal
00036cc: 41                                        ; i32.const
00036cd: 02                                        ; i32 literal
00036ce: fe                                        ; prefix
00036cf: 41                                        ; i32.atomic.rmw.xchg
00036d0: 02                                        ; alignment
00036d1: 03                                        ; memory offset
00036d2: 1a                                        ; drop
00036d3: 0b                                        ; end
00036c8: 0b                                        ; FIXUP func body size
; function body 377
00036d4: 00                                        ; func body size (guess)
00036d5: 00                                        ; local decl count
00036d6: 41                                        ; i32.const
00036d7: 01                                        ; i32 literal
00036d8: 42                                        ; i64.const
00036d9: 02                                        ; i64 literal
00036da: fe                                        ; prefix
00036db: 42                                        ; i64.atomic.rmw.xchg
00036dc: 03                                        ; alignment
00036dd: 07                                        ; memory offset
00036de: 1a                                        ; drop
00036df: 0b                                        ; end
00036d4: 0b                                        ; FIXUP func body size
; function body 378
00036e0: 00                                        ; func body size (guess)
00036e1: 00                                        ; local decl count
00036e2: 41                                        ; i32.const
00036e3: 01                                        ; i32 literal
00036e4: 41                                        ; i32.const
00036e5: 02                                        ; i32 literal
00036e6: fe                                        ; prefix
00036e7: 43                                        ; i32.atomic.rmw8_u.xchg
00036e8: 00                                        ; alignment
00036e9: 03                                        ; memory offset
00036ea: 1a                                        ; drop
00036eb: 0b                                        ; end
00036e0: 0b                                        ; FIXUP func body size
; function body 379
00036ec: 00                                        ; func body size (guess)
00036ed: 00                                        ; local decl count
00036ee: 41                                        ; i32.const
00036ef: 01                                        ; i32 literal
00036f0: 41                                        ; i32.const
00036f1: 02                                        ; i32 literal
00036f2: fe                                        ; prefix
00036f3: 44                                        ; i32.atomic.rmw16_u.xchg
00036f4: 01                                        ; alignment
00036f5: 03                                        ; memory offset
00036f6: 1a                                        ; drop
00036f7: 0b                                        ; end
00036ec: 0b                                        ; FIXUP func body size
; function body 380
00036f8: 00                                        ; func body size (guess)
00036f9: 00                                        ; local decl count
00036fa: 41                                        ; i32.const
00036fb: 01                                        ; i32 literal
00036fc: 42                                        ; i64.const
00036fd: 02                                        ; i64 literal
00036fe: fe                                        ; prefix
00036ff: 45                                        ; i64.atomic.rmw8_u.xchg
0003700: 00                                        ; alignment
0003701: 03                                        ; memory offset
0003702: 1a                                        ; drop
0003703: 0b                                        ; end
00036f8: 0b                                        ; FIXUP func body size
; function body 381
0003704: 00                                        ; func body size (guess)
0003705: 00                                        ; local decl count
0003706: 41                                        ; i32.const
0003707: 01                                        ; i32 literal
0003708: 42                                        ; i64.const
0003709: 02                                        ; i64 literal
000370a: fe                                        ; prefix
000370b: 46                                        ; i64.atomic.rmw16_u.xchg
000370c: 01                                        ; alignment
000370d: 03                                        ; memory offset
000370e: 1a                                        ; drop
000370f: 0b                                        ; end
0003704: 0b                                        ; FIXUP func body size
; function body 382
0003710: 00                                        ; func body size (guess)
0003711: 00                                        ; local decl count
0003712: 41                                        ; i32.const
0003713: 01                                        ; i32 literal
0003714: 42                                        ; i64.const
0003715: 02                                        ; i64 literal
0003716: fe                                        ; prefix
0003717: 47                                        ; i64.atomic.rmw32_u.xchg
0003718: 02                                        ; alignment
0003719: 03                                        ; memory offset
000371a: 1a                                        ; drop
000371b: 0b                                        ; end
0003710: 0b                                        ; FIXUP func body size
; function body 383
000371c: 00                                        ; func body size (guess)
000371d: 00                                        ; local decl count
000371e: 41                                        ; i32.const
000371f: 01                                        ; i32 literal
0003720: 41                                        ; i32.const
0003721: 02                                        ; i32 literal
0003722: 41                                        ; i32.const
0003723: 03                                        ; i32 literal
0003724: fe                                        ; prefix
0003725: 48                                        ; i32.atomic.rmw.cmpxchg
0003726: 02                                        ; alignment
0003727: 03                                        ; memory offset
0003728: 1a                                        ; drop
0003729: 0b                                        ; end
000371c: 0d                                        ; FIXUP func body size
; function body 384
000372a: 00                                        ; func body size (guess)
000372b: 00                                        ; local decl count
000372c: 41                                        ; i32.const
000372d: 01                                        ; i32 literal
000372e: 42                                        ; i64.const
000372f: 02                                        ; i64 literal
0003730: 42                                        ; i64.const
0003731: 03                                        ; i64 literal
0003732: fe                                        ; prefix
0003733: 49                                        ; i64.atomic.rmw.cmpxchg
0003734: 03                                        ; alignment
0003735: 07                                        ; memory offset
0003736: 1a                                        ; drop
0003737: 0b                                        ; end
000372a: 0d                                        ; FIXUP func body size
; function body 385
0003738: 00                                        ; func body size (guess)
0003739: 00                                        ; local decl count
000373a: 41                                        ; i32.const
000373b: 01                                        ; i32 literal
000373c: 41                                        ; i32.const
000373d: 02                                        ; i32 literal
000373e: 41                                        ; i32.const
000373f: 03                                        ; i32 literal
0003740: fe                                        ; prefix
0003741: 4a                                        ; i32.atomic.rmw8_u.cmpxchg
0003742: 00                                        ; alignment
0003743: 03                                        ; memory offset
0003744: 1a                                        ; drop
0003745: 0b                                        ; end
0003738: 0d                                        ; FIXUP func body size
; function body 386
0003746: 00                                        ; func body size (guess)
0003747: 00                                        ; local decl count
0003748: 41                                        ; i32.const
0003749: 01                                        ; i32 literal
000374a: 41                                        ; i32.const
000374b: 02                                        ; i32 literal
000374c: 41                                        ; i32.const
000374d: 03                                        ; i32 literal
000374e: fe                                        ; prefix
000374f: 4b                                        ; i32.atomic.rmw16_u.cmpxchg
0003750: 01                                        ; alignment
0003751: 03                                        ; memory offset
0003752: 1a                                        ; drop
0003753: 0b                                        ; end
0003746: 0d                                        ; FIXUP func body size
; function body 387
0003754: 00                                        ; func body size (guess)
0003755: 00                                        ; local decl count
0003756: 41                                        ; i32.const
0003757: 01                                        ; i32 literal
0003758: 42                                        ; i64.const
0003759: 02                                        ; i64 literal
000375a: 42                                        ; i64.const
000375b: 03                                        ; i64 literal
000375c: fe                                        ; prefix
000375d: 4c                                        ; i64.atomic.rmw8_u.cmpxchg
000375e: 00                                        ; alignment
000375f: 03                                        ; memory offset
0003760: 1a                                        ; drop
0003761: 0b                                        ; end
0003754: 0d                                        ; FIXUP func body size
; function body 388
0003762: 00                                        ; func body size (guess)
0003763: 00                                        ; local decl count
0003764: 41                                        ; i32.const
0003765: 01                                        ; i32 literal
0003766: 42                                        ; i64.const
0003767: 02                                        ; i64 literal
0003768: 42                                        ; i64.const
0003769: 03                                        ; i64 literal
000376a: fe                                        ; prefix
000376b: 4d                                        ; i64.atomic.rmw16_u.cmpxchg
000376c: 01                                        ; alignment
000376d: 03                                        ; memory offset
000376e: 1a                                        ; drop
000376f: 0b                                        ; end
0003762: 0d                                        ; FIXUP func body size
; function body 389
0003770: 00                                        ; func body size (guess)
0003771: 00                                        ; local decl count
0003772: 41                                        ; i32.const
0003773: 01                                        ; i32 literal
0003774: 42                                        ; i64.const
0003775: 02                                        ; i64 literal
0003776: 42                                        ; i64.const
0003777: 03                                        ; i64 literal
0003778: fe                                        ; prefix
0003779: 4e                                        ; i64.atomic.rmw32_u.cmpxchg
000377a: 02                                        ; alignment
000377b: 03                                        ; memory offset
000377c: 1a                                        ; drop
000377d: 0b                                        ; end
0003770: 0d                                        ; FIXUP func body size
; move data: [1a26, 377e) -> [1a27, 377f)
0001a25: d83a                                      ; FIXUP section size
BeginModule(version: 1)
  BeginTypeSection(8)
    OnTypeCount(2)
    OnType(index: 0, params: [], results: [])
    OnType(index: 1, params: [i32], results: [])
  EndTypeSection
  BeginImportSection(14)
    OnImportCount(1)
    OnImport(index: 0, module: "host", field: "print")
    OnImportFunc(import_index: 0, func_index: 0, sig_index: 1)
  EndImportSection
  BeginFunctionSection(392)
    OnFunctionCount(390)
    OnFunction(index: 1, sig_index: 0)
    OnFunction(index: 2, sig_index: 0)
    OnFunction(index: 3, sig_index: 0)
    OnFunction(index: 4, sig_index: 0)
    OnFunction(index: 5, sig_index: 0)
    OnFunction(index: 6, sig_index: 0)
    OnFunction(index: 7, sig_index: 0)
    OnFunction(index: 8, sig_index: 0)
    OnFunction(index: 9, sig_index: 0)
    OnFunction(index: 10, sig_index: 0)
    OnFunction(index: 11, sig_index: 0)
    OnFunction(index: 12, sig_index: 0)
    OnFunction(index: 13, sig_index: 0)
    OnFunction(index: 14, sig_index: 0)
    OnFunction(index: 15, sig_index: 0)
    OnFunction(index: 16, sig_index: 0)
    OnFunction(index: 17, sig_index: 0)
    OnFunction(index: 18, sig_index: 0)
    OnFunction(index: 19, sig_index: 0)
    OnFunction(index: 20, sig_index: 0)
    OnFunction(index: 21, sig_index: 0)
    OnFunction(index: 22, sig_index: 0)
    OnFunction(index: 23, sig_index: 0)
    OnFunction(index: 24, sig_index: 0)
    OnFunction(index: 25, sig_index: 0)
    OnFunction(index: 26, sig_index: 0)
    OnFunction(index: 27, sig_index: 0)
    OnFunction(index: 28, sig_index: 0)
    OnFunction(index: 29, sig_index: 0)
    OnFunction(index: 30, sig_index: 0)
    OnFunction(index: 31, sig_index: 0)
    OnFunction(index: 32, sig_index: 0)
    OnFunction(index: 33, sig_index: 0)
    OnFunction(index: 34, sig_index: 0)
    OnFunction(index: 35, sig_index: 0)
    OnFunction(index: 36, sig_index: 0)
    OnFunction(index: 37, sig_index: 0)
    OnFunction(index: 38, sig_index: 0)
    OnFunction(index: 39, sig_index: 0)
    OnFunction(index: 40, sig_index: 0)
    OnFunction(index: 41, sig_index: 0)
    OnFunction(index: 42, sig_index: 0)
    OnFunction(index: 43, sig_index: 0)
    OnFunction(index: 44, sig_index: 0)
    OnFunction(index: 45, sig_index: 0)
    OnFunction(index: 46, sig_index: 0)
    OnFunction(index: 47, sig_index: 0)
    OnFunction(index: 48, sig_index: 0)
    OnFunction(index: 49, sig_index: 0)
    OnFunction(index: 50, sig_index: 0)
    OnFunction(index: 51, sig_index: 0)
    OnFunction(index: 52, sig_index: 0)
    OnFunction(index: 53, sig_index: 0)
    OnFunction(index: 54, sig_index: 0)
    OnFunction(index: 55, sig_index: 0)
    OnFunction(index: 56, sig_index: 0)
    OnFunction(index: 57, sig_index: 0)
    OnFunction(index: 58, sig_index: 0)
    OnFunction(index: 59, sig_index: 0)
    OnFunction(index: 60, sig_index: 0)
    OnFunction(index: 61, sig_index: 0)
    OnFunction(index: 62, sig_index: 0)
    OnFunction(index: 63, sig_index: 0)
    OnFunction(index: 64, sig_index: 0)
    OnFunction(index: 65, sig_index: 0)
    OnFunction(index: 66, sig_index: 0)
    OnFunction(index: 67, sig_index: 0)
    OnFunction(index: 68, sig_index: 0)
    OnFunction(index: 69, sig_index: 0)
    OnFunction(index: 70, sig_index: 0)
    OnFunction(index: 71, sig_index: 0)
    OnFunction(index: 72, sig_index: 0)
    OnFunction(index: 73, sig_index: 0)
    OnFunction(index: 74, sig_index: 0)
    OnFunction(index: 75, sig_index: 0)
    OnFunction(index: 76, sig_index: 0)
    OnFunction(index: 77, sig_index: 0)
    OnFunction(index: 78, sig_index: 0)
    OnFunction(index: 79, sig_index: 0)
    OnFunction(index: 80, sig_index: 0)
    OnFunction(index: 81, sig_index: 0)
    OnFunction(index: 82, sig_index: 0)
    OnFunction(index: 83, sig_index: 0)
    OnFunction(index: 84, sig_index: 0)
    OnFunction(index: 85, sig_index: 0)
    OnFunction(index: 86, sig_index: 0)
    OnFunction(index: 87, sig_index: 0)
    OnFunction(index: 88, sig_index: 0)
    OnFunction(index: 89, sig_index: 0)
    OnFunction(index: 90, sig_index: 0)
    OnFunction(index: 91, sig_index: 0)
    OnFunction(index: 92, sig_index: 0)
    OnFunction(index: 93, sig_index: 0)
    OnFunction(index: 94, sig_index: 0)
    OnFunction(index: 95, sig_index: 0)
    OnFunction(index: 96, sig_index: 0)
    OnFunction(index: 97, sig_index: 0)
    OnFunction(index: 98, sig_index: 0)
    OnFunction(index: 99, sig_index: 0)
    OnFunction(index: 100, sig_index: 0)
    OnFunction(index: 101, sig_index: 0)
    OnFunction(index: 102, sig_index: 0)
    OnFunction(index: 103, sig_index: 0)
    OnFunction(index: 104, sig_index: 0)
    OnFunction(index: 105, sig_index: 0)
    OnFunction(index: 106, sig_index: 0)
    OnFunction(index: 107, sig_index: 0)
    OnFunction(index: 108, sig_index: 0)
    OnFunction(index: 109, sig_index: 0)
    OnFunction(index: 110, sig_index: 0)
    OnFunction(index: 111, sig_index: 0)
    OnFunction(index: 112, sig_index: 0)
    OnFunction(index: 113, sig_index: 0)
    OnFunction(index: 114, sig_index: 0)
    OnFunction(index: 115, sig_index: 0)
    OnFunction(index: 116, sig_index: 0)
    OnFunction(index: 117, sig_index: 0)
    OnFunction(index: 118, sig_index: 0)
    OnFunction(index: 119, sig_index: 0)
    OnFunction(index: 120, sig_index: 0)
    OnFunction(index: 121, sig_index: 0)
    OnFunction(index: 122, sig_index: 0)
    OnFunction(index: 123, sig_index: 0)
    OnFunction(index: 124, sig_index: 0)
    OnFunction(index: 125, sig_index: 0)
    OnFunction(index: 126, sig_index: 0)
    OnFunction(index: 127, sig_index: 0)
    OnFunction(index: 128, sig_index: 0)
    OnFunction(index: 129, sig_index: 0)
    OnFunction(index: 130, sig_index: 0)
    OnFunction(index: 131, sig_index: 0)
    OnFunction(index: 132, sig_index: 0)
    OnFunction(index: 133, sig_index: 0)
    OnFunction(index: 134, sig_index: 0)
    OnFunction(index: 135, sig_index: 0)
    OnFunction(index: 136, sig_index: 0)
    OnFunction(index: 137, sig_index: 0)
    OnFunction(index: 138, sig_index: 0)
    OnFunction(index: 139, sig_index: 0)
    OnFunction(index: 140, sig_index: 0)
    OnFunction(index: 141, sig_index: 0)
    OnFunction(index: 142, sig_index: 0)
    OnFunction(index: 143, sig_index: 0)
    OnFunction(index: 144, sig_index: 0)
    OnFunction(index: 145, sig_index: 0)
    OnFunction(index: 146, sig_index: 0)
    OnFunction(index: 147, sig_index: 0)
    OnFunction(index: 148, sig_index: 0)
    OnFunction(index: 149, sig_index: 0)
    OnFunction(index: 150, sig_index: 0)
    OnFunction(index: 151, sig_index: 0)
    OnFunction(index: 152, sig_index: 0)
    OnFunction(index: 153, sig_index: 0)
    OnFunction(index: 154, sig_index: 0)
    OnFunction(index: 155, sig_index: 0)
    OnFunction(index: 156, sig_index: 0)
    OnFunction(index: 157, sig_index: 0)
    OnFunction(index: 158, sig_index: 0)
    OnFunction(index: 159, sig_index: 0)
    OnFunction(index: 160, sig_index: 0)
    OnFunction(index: 161, sig_index: 0)
    OnFunction(index: 162, sig_index: 0)
    OnFunction(index: 163, sig_index: 0)
    OnFunction(index: 164, sig_index: 0)
    OnFunction(index: 165, sig_index: 0)
    OnFunction(index: 166, sig_index: 0)
    OnFunction(index: 167, sig_index: 0)
    OnFunction(index: 168, sig_index: 0)
    OnFunction(index: 169, sig_index: 0)
    OnFunction(index: 170, sig_index: 0)
    OnFunction(index: 171, sig_index: 0)
    OnFunction(index: 172, sig_index: 0)
    OnFunction(index: 173, sig_index: 0)
    OnFunction(index: 174, sig_index: 0)
    OnFunction(index: 175, sig_index: 0)
    OnFunction(index: 176, sig_index: 0)
    OnFunction(index: 177, sig_index: 0)
    OnFunction(index: 178, sig_index: 0)
    OnFunction(index: 179, sig_index: 0)
    OnFunction(index: 180, sig_index: 0)
    OnFunction(index: 181, sig_index: 0)
    OnFunction(index: 182, sig_index: 0)
    OnFunction(index: 183, sig_index: 0)
    OnFunction(index: 184, sig_index: 0)
    OnFunction(index: 185, sig_index: 0)
    OnFunction(index: 186, sig_index: 0)
    OnFunction(index: 187, sig_index: 0)
    OnFunction(index: 188, sig_index: 0)
    OnFunction(index: 189, sig_index: 0)
    OnFunction(index: 190, sig_index: 0)
    OnFunction(index: 191, sig_index: 0)
    OnFunction(index: 192, sig_index: 0)
    OnFunction(index: 193, sig_index: 0)
    OnFunction(index: 194, sig_index: 0)
    OnFunction(index: 195, sig_index: 0)
    OnFunction(index: 196, sig_index: 0)
    OnFunction(index: 197, sig_index: 0)
    OnFunction(index: 198, sig_index: 0)
    OnFunction(index: 199, sig_index: 0)
    OnFunction(index: 200, sig_index: 0)
    OnFunction(index: 201, sig_index: 0)
    OnFunction(index: 202, sig_index: 0)
    OnFunction(index: 203, sig_index: 0)
    OnFunction(index: 204, sig_index: 0)
    OnFunction(index: 205, sig_index: 0)
    OnFunction(index: 206, sig_index: 0)
    OnFunction(index: 207, sig_index: 0)
    OnFunction(index: 208, sig_index: 0)
    OnFunction(index: 209, sig_index: 0)
    OnFunction(index: 210, sig_index: 0)
    OnFunction(index: 211, sig_index: 0)
    OnFunction(index: 212, sig_index: 0)
    OnFunction(index: 213, sig_index: 0)
    OnFunction(index: 214, sig_index: 0)
    OnFunction(index: 215, sig_index: 0)
    OnFunction(index: 216, sig_index: 0)
    OnFunction(index: 217, sig_index: 0)
    OnFunction(index: 218, sig_index: 0)
    OnFunction(index: 219, sig_index: 0)
    OnFunction(index: 220, sig_index: 0)
    OnFunction(index: 221, sig_index: 0)
    OnFunction(index: 222, sig_index: 0)
    OnFunction(index: 223, sig_index: 0)
    OnFunction(index: 224, sig_index: 0)
    OnFunction(index: 225, sig_index: 0)
    OnFunction(index: 226, sig_index: 0)
    OnFunction(index: 227, sig_index: 0)
    OnFunction(index: 228, sig_index: 0)
    OnFunction(index: 229, sig_index: 0)
    OnFunction(index: 230, sig_index: 0)
    OnFunction(index: 231, sig_index: 0)
    OnFunction(index: 232, sig_index: 0)
    OnFunction(index: 233, sig_index: 0)
    OnFunction(index: 234, sig_index: 0)
    OnFunction(index: 235, sig_index: 0)
    OnFunction(index: 236, sig_index: 0)
    OnFunction(index: 237, sig_index: 0)
    OnFunction(index: 238, sig_index: 0)
    OnFunction(index: 239, sig_index: 0)
    OnFunction(index: 240, sig_index: 0)
    OnFunction(index: 241, sig_index: 0)
    OnFunction(index: 242, sig_index: 0)
    OnFunction(index: 243, sig_index: 0)
    OnFunction(index: 244, sig_index: 0)
    OnFunction(index: 245, sig_index: 0)
    OnFunction(index: 246, sig_index: 0)
    OnFunction(index: 247, sig_index: 0)
    OnFunction(index: 248, sig_index: 0)
    OnFunction(index: 249, sig_index: 0)
    OnFunction(index: 250, sig_index: 0)
    OnFunction(index: 251, sig_index: 0)
    OnFunction(index: 252, sig_index: 0)
    OnFunction(index: 253, sig_index: 0)
    OnFunction(index: 254, sig_index: 0)
    OnFunction(index: 255, sig_index: 0)
    OnFunction(index: 256, sig_index: 0)
    OnFunction(index: 257, sig_index: 0)
    OnFunction(index: 258, sig_index: 0)
    OnFunction(index: 259, sig_index: 0)
    OnFunction(index: 260, sig_index: 0)
    OnFunction(index: 261, sig_index: 0)
    OnFunction(index: 262, sig_index: 0)
    OnFunction(index: 263, sig_index: 0)
    OnFunction(index: 264, sig_index: 0)
    OnFunction(index: 265, sig_index: 0)
    OnFunction(index: 266, sig_index: 0)
    OnFunction(index: 267, sig_index: 0)
    OnFunction(index: 268, sig_index: 0)
    OnFunction(index: 269, sig_index: 0)
    OnFunction(index: 270, sig_index: 0)
    OnFunction(index: 271, sig_index: 0)
    OnFunction(index: 272, sig_index: 0)
    OnFunction(index: 273, sig_index: 0)
    OnFunction(index: 274, sig_index: 0)
    OnFunction(index: 275, sig_index: 0)
    OnFunction(index: 276, sig_index: 0)
    OnFunction(index: 277, sig_index: 0)
    OnFunction(index: 278, sig_index: 0)
    OnFunction(index: 279, sig_index: 0)
    OnFunction(index: 280, sig_index: 0)
    OnFunction(index: 281, sig_index: 0)
    OnFunction(index: 282, sig_index: 0)
    OnFunction(index: 283, sig_index: 0)
    OnFunction(index: 284, sig_index: 0)
    OnFunction(index: 285, sig_index: 0)
    OnFunction(index: 286, sig_index: 0)
    OnFunction(index: 287, sig_index: 0)
    OnFunction(index: 288, sig_index: 0)
    OnFunction(index: 289, sig_index: 0)
    OnFunction(index: 290, sig_index: 0)
    OnFunction(index: 291, sig_index: 0)
    OnFunction(index: 292, sig_index: 0)
    OnFunction(index: 293, sig_index: 0)
    OnFunction(index: 294, sig_index: 0)
    OnFunction(index: 295, sig_index: 0)
    OnFunction(index: 296, sig_index: 0)
    OnFunction(index: 297, sig_index: 0)
    OnFunction(index: 298, sig_index: 0)
    OnFunction(index: 299, sig_index: 0)
    OnFunction(index: 300, sig_index: 0)
    OnFunction(index: 301, sig_index: 0)
    OnFunction(index: 302, sig_index: 0)
    OnFunction(index: 303, sig_index: 0)
    OnFunction(index: 304, sig_index: 0)
    OnFunction(index: 305, sig_index: 0)
    OnFunction(index: 306, sig_index: 0)
    OnFunction(index: 307, sig_index: 0)
    OnFunction(index: 308, sig_index: 0)
    OnFunction(index: 309, sig_index: 0)
    OnFunction(index: 310, sig_index: 0)
    OnFunction(index: 311, sig_index: 0)
    OnFunction(index: 312, sig_index: 0)
    OnFunction(index: 313, sig_index: 0)
    OnFunction(index: 314, sig_index: 0)
    OnFunction(index: 315, sig_index: 0)
    OnFunction(index: 316, sig_index: 0)
    OnFunction(index: 317, sig_index: 0)
    OnFunction(index: 318, sig_index: 0)
    OnFunction(index: 319, sig_index: 0)
    OnFunction(index: 320, sig_index: 0)
    OnFunction(index: 321, sig_index: 0)
    OnFunction(index: 322, sig_index: 0)
    OnFunction(index: 323, sig_index: 0)
    OnFunction(index: 324, sig_index: 0)
    OnFunction(index: 325, sig_index: 0)
    OnFunction(index: 326, sig_index: 0)
    OnFunction(index: 327, sig_index: 0)
    OnFunction(index: 328, sig_index: 0)
    OnFunction(index: 329, sig_index: 0)
    OnFunction(index: 330, sig_index: 0)
    OnFunction(index: 331, sig_index: 0)
    OnFunction(index: 332, sig_index: 0)
    OnFunction(index: 333, sig_index: 0)
    OnFunction(index: 334, sig_index: 0)
    OnFunction(index: 335, sig_index: 0)
    OnFunction(index: 336, sig_index: 0)
    OnFunction(index: 337, sig_index: 0)
    OnFunction(index: 338, sig_index: 0)
    OnFunction(index: 339, sig_index: 0)
    OnFunction(index: 340, sig_index: 0)
    OnFunction(index: 341, sig_index: 0)
    OnFunction(index: 342, sig_index: 0)
    OnFunction(index: 343, sig_index: 0)
    OnFunction(index: 344, sig_index: 0)
    OnFunction(index: 345, sig_index: 0)
    OnFunction(index: 346, sig_index: 0)
    OnFunction(index: 347, sig_index: 0)
    OnFunction(index: 348, sig_index: 0)
    OnFunction(index: 349, sig_index: 0)
    OnFunction(index: 350, sig_index: 0)
    OnFunction(index: 351, sig_index: 0)
    OnFunction(index: 352, sig_index: 0)
    OnFunction(index: 353, sig_index: 0)
    OnFunction(index: 354, sig_index: 0)
    OnFunction(index: 355, sig_index: 0)
    OnFunction(index: 356, sig_index: 0)
    OnFunction(index: 357, sig_index: 0)
    OnFunction(index: 358, sig_index: 0)
    OnFunction(index: 359, sig_index: 0)
    OnFunction(index: 360, sig_index: 0)
    OnFunction(index: 361, sig_index: 0)
    OnFunction(index: 362, sig_index: 0)
    OnFunction(index: 363, sig_index: 0)
    OnFunction(index: 364, sig_index: 0)
    OnFunction(index: 365, sig_index: 0)
    OnFunction(index: 366, sig_index: 0)
    OnFunction(index: 367, sig_index: 0)
    OnFunction(index: 368, sig_index: 0)
    OnFunction(index: 369, sig_index: 0)
    OnFunction(index: 370, sig_index: 0)
    OnFunction(index: 371, sig_index: 0)
    OnFunction(index: 372, sig_index: 0)
    OnFunction(index: 373, sig_index: 0)
    OnFunction(index: 374, sig_index: 0)
    OnFunction(index: 375, sig_index: 0)
    OnFunction(index: 376, sig_index: 0)
    OnFunction(index: 377, sig_index: 0)
    OnFunction(index: 378, sig_index: 0)
    OnFunction(index: 379, sig_index: 0)
    OnFunction(index: 380, sig_index: 0)
    OnFunction(index: 381, sig_index: 0)
    OnFunction(index: 382, sig_index: 0)
    OnFunction(index: 383, sig_index: 0)
    OnFunction(index: 384, sig_index: 0)
    OnFunction(index: 385, sig_index: 0)
    OnFunction(index: 386, sig_index: 0)
    OnFunction(index: 387, sig_index: 0)
    OnFunction(index: 388, sig_index: 0)
    OnFunction(index: 389, sig_index: 0)
    OnFunction(index: 390, sig_index: 0)
  EndFunctionSection
  BeginTableSection(5)
    OnTableCount(1)
    OnTable(index: 0, elem_type: anyfunc, initial: 2, max: 2)
  EndTableSection
  BeginMemorySection(4)
    OnMemoryCount(1)
    OnMemory(index: 0, initial: 1, max: 1)
  EndMemorySection
  BeginGlobalSection(6)
    OnGlobalCount(1)
    BeginGlobal(index: 0, type: i32, mutable: true)
    BeginGlobalInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndGlobalInitExpr(0)
    EndGlobal(0)
  EndGlobalSection
  BeginExportSection(6229)
    OnExportCount(389)
    OnExport(index: 0, kind: func, item_index: 2, name: "unreachable")
    OnExport(index: 1, kind: func, item_index: 3, name: "br")
    OnExport(index: 2, kind: func, item_index: 4, name: "br_table")
    OnExport(index: 3, kind: func, item_index: 5, name: "return")
    OnExport(index: 4, kind: func, item_index: 6, name: "call")
    OnExport(index: 5, kind: func, item_index: 7, name: "call_indirect")
    OnExport(index: 6, kind: func, item_index: 8, name: "drop")
    OnExport(index: 7, kind: func, item_index: 9, name: "select")
    OnExport(index: 8, kind: func, item_index: 10, name: "get_local")
    OnExport(index: 9, kind: func, item_index: 11, name: "set_local")
    OnExport(index: 10, kind: func, item_index: 12, name: "tee_local")
    OnExport(index: 11, kind: func, item_index: 13, name: "get_global")
    OnExport(index: 12, kind: func, item_index: 14, name: "set_global")
    OnExport(index: 13, kind: func, item_index: 15, name: "i32.load")
    OnExport(index: 14, kind: func, item_index: 16, name: "i64.load")
    OnExport(index: 15, kind: func, item_index: 17, name: "f32.load")
    OnExport(index: 16, kind: func, item_index: 18, name: "f64.load")
    OnExport(index: 17, kind: func, item_index: 19, name: "i32.load8_s")
    OnExport(index: 18, kind: func, item_index: 20, name: "i32.load8_u")
    OnExport(index: 19, kind: func, item_index: 21, name: "i32.load16_s")
    OnExport(index: 20, kind: func, item_index: 22, name: "i32.load16_u")
    OnExport(index: 21, kind: func, item_index: 23, name: "i64.load8_s")
    OnExport(index: 22, kind: func, item_index: 24, name: "i64.load8_u")
    OnExport(index: 23, kind: func, item_index: 25, name: "i64.load16_s")
    OnExport(index: 24, kind: func, item_index: 26, name: "i64.load16_u")
    OnExport(index: 25, kind: func, item_index: 27, name: "i64.load32_s")
    OnExport(index: 26, kind: func, item_index: 28, name: "i64.load32_u")
    OnExport(index: 27, kind: func, item_index: 29, name: "i32.store")
    OnExport(index: 28, kind: func, item_index: 30, name: "i64.store")
    OnExport(index: 29, kind: func, item_index: 31, name: "f32.store")
    OnExport(index: 30, kind: func, item_index: 32, name: "f64.store")
    OnExport(index: 31, kind: func, item_index: 33, name: "i32.store8")
    OnExport(index: 32, kind: func, item_index: 34, name: "i32.store16")
    OnExport(index: 33, kind: func, item_index: 35, name: "i64.store8")
    OnExport(index: 34, kind: func, item_index: 36, name: "i64.store16")
    OnExport(index: 35, kind: func, item_index: 37, name: "i64.store32")
    OnExport(index: 36, kind: func, item_index: 38, name: "current_memory")
    OnExport(index: 37, kind: func, item_index: 39, name: "grow_memory")
    OnExport(index: 38, kind: func, item_index: 40, name: "i32.const")
    OnExport(index: 39, kind: func, item_index: 41, name: "i64.const")
    OnExport(index: 40, kind: func, item_index: 42, name: "f32.const")
    OnExport(index: 41, kind: func, item_index: 43, name: "f64.const")
    OnExport(index: 42, kind: func, item_index: 44, name: "i32.eqz")
    OnExport(index: 43, kind: func, item_index: 45, name: "i32.eq")
    OnExport(index: 44, kind: func, item_index: 46, name: "i32.ne")
    OnExport(index: 45, kind: func, item_index: 47, name: "i32.lt_s")
    OnExport(index: 46, kind: func, item_index: 48, name: "i32.lt_u")
    OnExport(index: 47, kind: func, item_index: 49, name: "i32.gt_s")
    OnExport(index: 48, kind: func, item_index: 50, name: "i32.gt_u")
    OnExport(index: 49, kind: func, item_index: 51, name: "i32.le_s")
    OnExport(index: 50, kind: func, item_index: 52, name: "i32.le_u")
    OnExport(index: 51, kind: func, item_index: 53, name: "i32.ge_s")
    OnExport(index: 52, kind: func, item_index: 54, name: "i32.ge_u")
    OnExport(index: 53, kind: func, item_index: 55, name: "i64.eqz")
    OnExport(index: 54, kind: func, item_index: 56, name: "i64.eq")
    OnExport(index: 55, kind: func, item_index: 57, name: "i64.ne")
    OnExport(index: 56, kind: func, item_index: 58, name: "i64.lt_s")
    OnExport(index: 57, kind: func, item_index: 59, name: "i64.lt_u")
    OnExport(index: 58, kind: func, item_index: 60, name: "i64.gt_s")
    OnExport(index: 59, kind: func, item_index: 61, name: "i64.gt_u")
    OnExport(index: 60, kind: func, item_index: 62, name: "i64.le_s")
    OnExport(index: 61, kind: func, item_index: 63, name: "i64.le_u")
    OnExport(index: 62, kind: func, item_index: 64, name: "i64.ge_s")
    OnExport(index: 63, kind: func, item_index: 65, name: "i64.ge_u")
    OnExport(index: 64, kind: func, item_index: 66, name: "f32.eq")
    OnExport(index: 65, kind: func, item_index: 67, name: "f32.ne")
    OnExport(index: 66, kind: func, item_index: 68, name: "f32.lt")
    OnExport(index: 67, kind: func, item_index: 69, name: "f32.gt")
    OnExport(index: 68, kind: func, item_index: 70, name: "f32.le")
    OnExport(index: 69, kind: func, item_index: 71, name: "f32.ge")
    OnExport(index: 70, kind: func, item_index: 72, name: "f64.eq")
    OnExport(index: 71, kind: func, item_index: 73, name: "f64.ne")
    OnExport(index: 72, kind: func, item_index: 74, name: "f64.lt")
    OnExport(index: 73, kind: func, item_index: 75, name: "f64.gt")
    OnExport(index: 74, kind: func, item_index: 76, name: "f64.le")
    OnExport(index: 75, kind: func, item_index: 77, name: "f64.ge")
    OnExport(index: 76, kind: func, item_index: 78, name: "i32.clz")
    OnExport(index: 77, kind: func, item_index: 79, name: "i32.ctz")
    OnExport(index: 78, kind: func, item_index: 80, name: "i32.popcnt")
    OnExport(index: 79, kind: func, item_index: 81, name: "i32.add")
    OnExport(index: 80, kind: func, item_index: 82, name: "i32.sub")
    OnExport(index: 81, kind: func, item_index: 83, name: "i32.mul")
    OnExport(index: 82, kind: func, item_index: 84, name: "i32.div_s")
    OnExport(index: 83, kind: func, item_index: 85, name: "i32.div_u")
    OnExport(index: 84, kind: func, item_index: 86, name: "i32.rem_s")
    OnExport(index: 85, kind: func, item_index: 87, name: "i32.rem_u")
    OnExport(index: 86, kind: func, item_index: 88, name: "i32.and")
    OnExport(index: 87, kind: func, item_index: 89, name: "i32.or")
    OnExport(index: 88, kind: func, item_index: 90, name: "i32.xor")
    OnExport(index: 89, kind: func, item_index: 91, name: "i32.shl")
    OnExport(index: 90, kind: func, item_index: 92, name: "i32.shr_s")
    OnExport(index: 91, kind: func, item_index: 93, name: "i32.shr_u")
    OnExport(index: 92, kind: func, item_index: 94, name: "i32.rotl")
    OnExport(index: 93, kind: func, item_index: 95, name: "i32.rotr")
    OnExport(index: 94, kind: func, item_index: 96, name: "i64.clz")
    OnExport(index: 95, kind: func, item_index: 97, name: "i64.ctz")
    OnExport(index: 96, kind: func, item_index: 98, name: "i64.popcnt")
    OnExport(index: 97, kind: func, item_index: 99, name: "i64.add")
    OnExport(index: 98, kind: func, item_index: 100, name: "i64.sub")
    OnExport(index: 99, kind: func, item_index: 101, name: "i64.mul")
    OnExport(index: 100, kind: func, item_index: 102, name: "i64.div_s")
    OnExport(index: 101, kind: func, item_index: 103, name: "i64.div_u")
    OnExport(index: 102, kind: func, item_index: 104, name: "i64.rem_s")
    OnExport(index: 103, kind: func, item_index: 105, name: "i64.rem_u")
    OnExport(index: 104, kind: func, item_index: 106, name: "i64.and")
    OnExport(index: 105, kind: func, item_index: 107, name: "i64.or")
    OnExport(index: 106, kind: func, item_index: 108, name: "i64.xor")
    OnExport(index: 107, kind: func, item_index: 109, name: "i64.shl")
    OnExport(index: 108, kind: func, item_index: 110, name: "i64.shr_s")
    OnExport(index: 109, kind: func, item_index: 111, name: "i64.shr_u")
    OnExport(index: 110, kind: func, item_index: 112, name: "i64.rotl")
    OnExport(index: 111, kind: func, item_index: 113, name: "i64.rotr")
    OnExport(index: 112, kind: func, item_index: 114, name: "f32.abs")
    OnExport(index: 113, kind: func, item_index: 115, name: "f32.neg")
    OnExport(index: 114, kind: func, item_index: 116, name: "f32.ceil")
    OnExport(index: 115, kind: func, item_index: 117, name: "f32.floor")
    OnExport(index: 116, kind: func, item_index: 118, name: "f32.trunc")
    OnExport(index: 117, kind: func, item_index: 119, name: "f32.nearest")
    OnExport(index: 118, kind: func, item_index: 120, name: "f32.sqrt")
    OnExport(index: 119, kind: func, item_index: 121, name: "f32.add")
    OnExport(index: 120, kind: func, item_index: 122, name: "f32.sub")
    OnExport(index: 121, kind: func, item_index: 123, name: "f32.mul")
    OnExport(index: 122, kind: func, item_index: 124, name: "f32.div")
    OnExport(index: 123, kind: func, item_index: 125, name: "f32.min")
    OnExport(index: 124, kind: func, item_index: 126, name: "f32.max")
    OnExport(index: 125, kind: func, item_index: 127, name: "f32.copysign")
    OnExport(index: 126, kind: func, item_index: 128, name: "f64.abs")
    OnExport(index: 127, kind: func, item_index: 129, name: "f64.neg")
    OnExport(index: 128, kind: func, item_index: 130, name: "f64.ceil")
    OnExport(index: 129, kind: func, item_index: 131, name: "f64.floor")
    OnExport(index: 130, kind: func, item_index: 132, name: "f64.trunc")
    OnExport(index: 131, kind: func, item_index: 133, name: "f64.nearest")
    OnExport(index: 132, kind: func, item_index: 134, name: "f64.sqrt")
    OnExport(index: 133, kind: func, item_index: 135, name: "f64.add")
    OnExport(index: 134, kind: func, item_index: 136, name: "f64.sub")
    OnExport(index: 135, kind: func, item_index: 137, name: "f64.mul")
    OnExport(index: 136, kind: func, item_index: 138, name: "f64.div")
    OnExport(index: 137, kind: func, item_index: 139, name: "f64.min")
    OnExport(index: 138, kind: func, item_index: 140, name: "f64.max")
    OnExport(index: 139, kind: func, item_index: 141, name: "f64.copysign")
    OnExport(index: 140, kind: func, item_index: 142, name: "i32.wrap/i64")
    OnExport(index: 141, kind: func, item_index: 143, name: "i32.trunc_s/f32")
    OnExport(index: 142, kind: func, item_index: 144, name: "i32.trunc_u/f32")
    OnExport(index: 143, kind: func, item_index: 145, name: "i32.trunc_s/f64")
    OnExport(index: 144, kind: func, item_index: 146, name: "i32.trunc_u/f64")
    OnExport(index: 145, kind: func, item_index: 147, name: "i64.extend_s/i32")
    OnExport(index: 146, kind: func, item_index: 148, name: "i64.extend_u/i32")
    OnExport(index: 147, kind: func, item_index: 149, name: "i64.trunc_s/f32")
    OnExport(index: 148, kind: func, item_index: 150, name: "i64.trunc_u/f32")
    OnExport(index: 149, kind: func, item_index: 151, name: "i64.trunc_s/f64")
    OnExport(index: 150, kind: func, item_index: 152, name: "i64.trunc_u/f64")
    OnExport(index: 151, kind: func, item_index: 153, name: "f32.convert_s/i32")
    OnExport(index: 152, kind: func, item_index: 154, name: "f32.convert_u/i32")
    OnExport(index: 153, kind: func, item_index: 155, name: "f32.convert_s/i64")
    OnExport(index: 154, kind: func, item_index: 156, name: "f32.convert_u/i64")
    OnExport(index: 155, kind: func, item_index: 157, name: "f32.demote/f64")
    OnExport(index: 156, kind: func, item_index: 158, name: "f64.convert_s/i32")
    OnExport(index: 157, kind: func, item_index: 159, name: "f64.convert_u/i32")
    OnExport(index: 158, kind: func, item_index: 160, name: "f64.convert_s/i64")
    OnExport(index: 159, kind: func, item_index: 161, name: "f64.convert_u/i64")
    OnExport(index: 160, kind: func, item_index: 162, name: "f64.promote/f32")
    OnExport(index: 161, kind: func, item_index: 163, name: "i32.reinterpret/f32")
    OnExport(index: 162, kind: func, item_index: 164, name: "f32.reinterpret/i32")
    OnExport(index: 163, kind: func, item_index: 165, name: "i64.reinterpret/f64")
    OnExport(index: 164, kind: func, item_index: 166, name: "f64.reinterpret/i64")
    OnExport(index: 165, kind: func, item_index: 167, name: "i32.extend8_s")
    OnExport(index: 166, kind: func, item_index: 168, name: "i32.extend16_s")
    OnExport(index: 167, kind: func, item_index: 169, name: "i64.extend8_s")
    OnExport(index: 168, kind: func, item_index: 170, name: "i64.extend16_s")
    OnExport(index: 169, kind: func, item_index: 171, name: "i64.extend32_s")
    OnExport(index: 170, kind: func, item_index: 172, name: "alloca")
    OnExport(index: 171, kind: func, item_index: 173, name: "br_unless")
    OnExport(index: 172, kind: func, item_index: 174, name: "call_host")
    OnExport(index: 173, kind: func, item_index: 175, name: "data")
    OnExport(index: 174, kind: func, item_index: 176, name: "drop_keep")
    OnExport(index: 175, kind: func, item_index: 177, name: "i32.trunc_s:sat/f32")
    OnExport(index: 176, kind: func, item_index: 178, name: "i32.trunc_u:sat/f32")
    OnExport(index: 177, kind: func, item_index: 179, name: "i32.trunc_s:sat/f64")
    OnExport(index: 178, kind: func, item_index: 180, name: "i32.trunc_u:sat/f64")
    OnExport(index: 179, kind: func, item_index: 181, name: "i64.trunc_s:sat/f32")
    OnExport(index: 180, kind: func, item_index: 182, name: "i64.trunc_u:sat/f32")
    OnExport(index: 181, kind: func, item_index: 183, name: "i64.trunc_s:sat/f64")
    OnExport(index: 182, kind: func, item_index: 184, name: "i64.trunc_u:sat/f64")
    OnExport(index: 183, kind: func, item_index: 185, name: "v128.const")
    OnExport(index: 184, kind: func, item_index: 186, name: "v128.load")
    OnExport(index: 185, kind: func, item_index: 187, name: "v128.store")
    OnExport(index: 186, kind: func, item_index: 188, name: "i8x16.splat")
    OnExport(index: 187, kind: func, item_index: 189, name: "i16x8.splat")
    OnExport(index: 188, kind: func, item_index: 190, name: "i32x4.splat")
    OnExport(index: 189, kind: func, item_index: 191, name: "i64x2.splat")
    OnExport(index: 190, kind: func, item_index: 192, name: "f32x4.splat")
    OnExport(index: 191, kind: func, item_index: 193, name: "f64x2.splat")
    OnExport(index: 192, kind: func, item_index: 194, name: "i8x16.extract_lane_s")
    OnExport(index: 193, kind: func, item_index: 195, name: "i8x16.extract_lane_u")
    OnExport(index: 194, kind: func, item_index: 196, name: "i16x8.extract_lane_s")
    OnExport(index: 195, kind: func, item_index: 197, name: "i16x8.extract_lane_u")
    OnExport(index: 196, kind: func, item_index: 198, name: "i32x4.extract_lane")
    OnExport(index: 197, kind: func, item_index: 199, name: "i64x2.extract_lane")
    OnExport(index: 198, kind: func, item_index: 200, name: "f32x4.extract_lane")
    OnExport(index: 199, kind: func, item_index: 201, name: "f64x2.extract_lane")
    OnExport(index: 200, kind: func, item_index: 202, name: "i8x16.replace_lane")
    OnExport(index: 201, kind: func, item_index: 203, name: "i16x8.replace_lane")
    OnExport(index: 202, kind: func, item_index: 204, name: "i32x4.replace_lane")
    OnExport(index: 203, kind: func, item_index: 205, name: "i64x2.replace_lane")
    OnExport(index: 204, kind: func, item_index: 206, name: "f32x4.replace_lane")
    OnExport(index: 205, kind: func, item_index: 207, name: "f64x2.replace_lane")
    OnExport(index: 206, kind: func, item_index: 208, name: "v8x16.shuffle")
    OnExport(index: 207, kind: func, item_index: 209, name: "i8x16.add")
    OnExport(index: 208, kind: func, item_index: 210, name: "i16x8.add")
    OnExport(index: 209, kind: func, item_index: 211, name: "i32x4.add")
    OnExport(index: 210, kind: func, item_index: 212, name: "i64x2.add")
    OnExport(index: 211, kind: func, item_index: 213, name: "i8x16.sub")
    OnExport(index: 212, kind: func, item_index: 214, name: "i16x8.sub")
    OnExport(index: 213, kind: func, item_index: 215, name: "i32x4.sub")
    OnExport(index: 214, kind: func, item_index: 216, name: "i64x2.sub")
    OnExport(index: 215, kind: func, item_index: 217, name: "i8x16.mul")
    OnExport(index: 216, kind: func, item_index: 218, name: "i16x8.mul")
    OnExport(index: 217, kind: func, item_index: 219, name: "i32x4.mul")
    OnExport(index: 218, kind: func, item_index: 220, name: "i8x16.neg")
    OnExport(index: 219, kind: func, item_index: 221, name: "i16x8.neg")
    OnExport(index: 220, kind: func, item_index: 222, name: "i32x4.neg")
    OnExport(index: 221, kind: func, item_index: 223, name: "i64x2.neg")
    OnExport(index: 222, kind: func, item_index: 224, name: "i8x16.add_saturate_s")
    OnExport(index: 223, kind: func, item_index: 225, name: "i8x16.add_saturate_u")
    OnExport(index: 224, kind: func, item_index: 226, name: "i16x8.add_saturate_s")
    OnExport(index: 225, kind: func, item_index: 227, name: "i16x8.add_saturate_u")
    OnExport(index: 226, kind: func, item_index: 228, name: "i8x16.sub_saturate_s")
    OnExport(index: 227, kind: func, item_index: 229, name: "i8x16.sub_saturate_u")
    OnExport(index: 228, kind: func, item_index: 230, name: "i16x8.sub_saturate_s")
    OnExport(index: 229, kind: func, item_index: 231, name: "i16x8.sub_saturate_u")
    OnExport(index: 230, kind: func, item_index: 232, name: "i8x16.shl")
    OnExport(index: 231, kind: func, item_index: 233, name: "i16x8.shl")
    OnExport(index: 232, kind: func, item_index: 234, name: "i32x4.shl")
    OnExport(index: 233, kind: func, item_index: 235, name: "i64x2.shl")
    OnExport(index: 234, kind: func, item_index: 236, name: "i8x16.shr_s")
    OnExport(index: 235, kind: func, item_index: 237, name: "i8x16.shr_u")
    OnExport(index: 236, kind: func, item_index: 238, name: "i16x8.shr_s")
    OnExport(index: 237, kind: func, item_index: 239, name: "i16x8.shr_u")
    OnExport(index: 238, kind: func, item_index: 240, name: "i32x4.shr_s")
    OnExport(index: 239, kind: func, item_index: 241, name: "i32x4.shr_u")
    OnExport(index: 240, kind: func, item_index: 242, name: "i64x2.shr_s")
    OnExport(index: 241, kind: func, item_index: 243, name: "i64x2.shr_u")
    OnExport(index: 242, kind: func, item_index: 244, name: "v128.and")
    OnExport(index: 243, kind: func, item_index: 245, name: "v128.or")
    OnExport(index: 244, kind: func, item_index: 246, name: "v128.xor")
    OnExport(index: 245, kind: func, item_index: 247, name: "v128.not")
    OnExport(index: 246, kind: func, item_index: 248, name: "v128.bitselect")
    OnExport(index: 247, kind: func, item_index: 249, name: "i8x16.any_true")
    OnExport(index: 248, kind: func, item_index: 250, name: "i16x8.any_true")
    OnExport(index: 249, kind: func, item_index: 251, name: "i32x4.any_true")
    OnExport(index: 250, kind: func, item_index: 252, name: "i64x2.any_true")
    OnExport(index: 251, kind: func, item_index: 253, name: "i8x16.all_true")
    OnExport(index: 252, kind: func, item_index: 254, name: "i16x8.all_true")
    OnExport(index: 253, kind: func, item_index: 255, name: "i32x4.all_true")
    OnExport(index: 254, kind: func, item_index: 256, name: "i64x2.all_true")
    OnExport(index: 255, kind: func, item_index: 257, name: "i8x16.eq")
    OnExport(index: 256, kind: func, item_index: 258, name: "i16x8.eq")
    OnExport(index: 257, kind: func, item_index: 259, name: "i32x4.eq")
    OnExport(index: 258, kind: func, item_index: 260, name: "f32x4.eq")
    OnExport(index: 259, kind: func, item_index: 261, name: "f64x2.eq")
    OnExport(index: 260, kind: func, item_index: 262, name: "i8x16.ne")
    OnExport(index: 261, kind: func, item_index: 263, name: "i16x8.ne")
    OnExport(index: 262, kind: func, item_index: 264, name: "i32x4.ne")
    OnExport(index: 263, kind: func, item_index: 265, name: "f32x4.ne")
    OnExport(index: 264, kind: func, item_index: 266, name: "f64x2.ne")
    OnExport(index: 265, kind: func, item_index: 267, name: "i8x16.lt_s")
    OnExport(index: 266, kind: func, item_index: 268, name: "i8x16.lt_u")
    OnExport(index: 267, kind: func, item_index: 269, name: "i16x8.lt_s")
    OnExport(index: 268, kind: func, item_index: 270, name: "i16x8.lt_u")
    OnExport(index: 269, kind: func, item_index: 271, name: "i32x4.lt_s")
    OnExport(index: 270, kind: func, item_index: 272, name: "i32x4.lt_u")
    OnExport(index: 271, kind: func, item_index: 273, name: "f32x4.lt")
    OnExport(index: 272, kind: func, item_index: 274, name: "f64x2.lt")
    OnExport(index: 273, kind: func, item_index: 275, name: "i8x16.le_s")
    OnExport(index: 274, kind: func, item_index: 276, name: "i8x16.le_u")
    OnExport(index: 275, kind: func, item_index: 277, name: "i16x8.le_s")
    OnExport(index: 276, kind: func, item_index: 278, name: "i16x8.le_u")
    OnExport(index: 277, kind: func, item_index: 279, name: "i32x4.le_s")
    OnExport(index: 278, kind: func, item_index: 280, name: "i32x4.le_u")
    OnExport(index: 279, kind: func, item_index: 281, name: "f32x4.le")
    OnExport(index: 280, kind: func, item_index: 282, name: "f64x2.le")
    OnExport(index: 281, kind: func, item_index: 283, name: "i8x16.gt_s")
    OnExport(index: 282, kind: func, item_index: 284, name: "i8x16.gt_u")
    OnExport(index: 283, kind: func, item_index: 285, name: "i16x8.gt_s")
    OnExport(index: 284, kind: func, item_index: 286, name: "i16x8.gt_u")
    OnExport(index: 285, kind: func, item_index: 287, name: "i32x4.gt_s")
    OnExport(index: 286, kind: func, item_index: 288, name: "i32x4.gt_u")
    OnExport(index: 287, kind: func, item_index: 289, name: "f32x4.gt")
    OnExport(index: 288, kind: func, item_index: 290, name: "f64x2.gt")
    OnExport(index: 289, kind: func, item_index: 291, name: "i8x16.ge_s")
    OnExport(index: 290, kind: func, item_index: 292, name: "i8x16.ge_u")
    OnExport(index: 291, kind: func, item_index: 293, name: "i16x8.ge_s")
    OnExport(index: 292, kind: func, item_index: 294, name: "i16x8.ge_u")
    OnExport(index: 293, kind: func, item_index: 295, name: "i32x4.ge_s")
    OnExport(index: 294, kind: func, item_index: 296, name: "i32x4.ge_u")
    OnExport(index: 295, kind: func, item_index: 297, name: "f32x4.ge")
    OnExport(index: 296, kind: func, item_index: 298, name: "f64x2.ge")
    OnExport(index: 297, kind: func, item_index: 299, name: "f32x4.neg")
    OnExport(index: 298, kind: func, item_index: 300, name: "f64x2.neg")
    OnExport(index: 299, kind: func, item_index: 301, name: "f32x4.abs")
    OnExport(index: 300, kind: func, item_index: 302, name: "f64x2.abs")
    OnExport(index: 301, kind: func, item_index: 303, name: "f32x4.min")
    OnExport(index: 302, kind: func, item_index: 304, name: "f64x2.min")
    OnExport(index: 303, kind: func, item_index: 305, name: "f32x4.max")
    OnExport(index: 304, kind: func, item_index: 306, name: "f64x2.max")
    OnExport(index: 305, kind: func, item_index: 307, name: "f32x4.add")
    OnExport(index: 306, kind: func, item_index: 308, name: "f64x2.add")
    OnExport(index: 307, kind: func, item_index: 309, name: "f32x4.sub")
    OnExport(index: 308, kind: func, item_index: 310, name: "f64x2.sub")
    OnExport(index: 309, kind: func, item_index: 311, name: "f32x4.div")
    OnExport(index: 310, kind: func, item_index: 312, name: "f64x2.div")
    OnExport(index: 311, kind: func, item_index: 313, name: "f32x4.mul")
    OnExport(index: 312, kind: func, item_index: 314, name: "f64x2.mul")
    OnExport(index: 313, kind: func, item_index: 315, name: "f32x4.sqrt")
    OnExport(index: 314, kind: func, item_index: 316, name: "f64x2.sqrt")
    OnExport(index: 315, kind: func, item_index: 317, name: "f32x4.convert_s/i32x4")
    OnExport(index: 316, kind: func, item_index: 318, name: "f32x4.convert_u/i32x4")
    OnExport(index: 317, kind: func, item_index: 319, name: "f64x2.convert_s/i64x2")
    OnExport(index: 318, kind: func, item_index: 320, name: "f64x2.convert_u/i64x2")
    OnExport(index: 319, kind: func, item_index: 321, name: "i32x4.trunc_s/f32x4:sat")
    OnExport(index: 320, kind: func, item_index: 322, name: "i32x4.trunc_u/f32x4:sat")
    OnExport(index: 321, kind: func, item_index: 323, name: "i64x2.trunc_s/f64x2:sat")
    OnExport(index: 322, kind: func, item_index: 324, name: "i64x2.trunc_u/f64x2:sat")
    OnExport(index: 323, kind: func, item_index: 325, name: "atomic.wake")
    OnExport(index: 324, kind: func, item_index: 326, name: "i32.atomic.wait")
    OnExport(index: 325, kind: func, item_index: 327, name: "i64.atomic.wait")
    OnExport(index: 326, kind: func, item_index: 328, name: "i32.atomic.load")
    OnExport(index: 327, kind: func, item_index: 329, name: "i64.atomic.load")
    OnExport(index: 328, kind: func, item_index: 330, name: "i32.atomic.load8_u")
    OnExport(index: 329, kind: func, item_index: 331, name: "i32.atomic.load16_u")
    OnExport(index: 330, kind: func, item_index: 332, name: "i64.atomic.load8_u")
    OnExport(index: 331, kind: func, item_index: 333, name: "i64.atomic.load16_u")
    OnExport(index: 332, kind: func, item_index: 334, name: "i64.atomic.load32_u")
    OnExport(index: 333, kind: func, item_index: 335, name: "i32.atomic.store")
    OnExport(index: 334, kind: func, item_index: 336, name: "i64.atomic.store")
    OnExport(index: 335, kind: func, item_index: 337, name: "i32.atomic.store8")
    OnExport(index: 336, kind: func, item_index: 338, name: "i32.atomic.store16")
    OnExport(index: 337, kind: func, item_index: 339, name: "i64.atomic.store8")
    OnExport(index: 338, kind: func, item_index: 340, name: "i64.atomic.store16")
    OnExport(index: 339, kind: func, item_index: 341, name: "i64.atomic.store32")
    OnExport(index: 340, kind: func, item_index: 342, name: "i32.atomic.rmw.add")
    OnExport(index: 341, kind: func, item_index: 343, name: "i64.atomic.rmw.add")
    OnExport(index: 342, kind: func, item_index: 344, name: "i32.atomic.rmw8_u.add")
    OnExport(index: 343, kind: func, item_index: 345, name: "i32.atomic.rmw16_u.add")
    OnExport(index: 344, kind: func, item_index: 346, name: "i64.atomic.rmw8_u.add")
    OnExport(index: 345, kind: func, item_index: 347, name: "i64.atomic.rmw16_u.add")
    OnExport(index: 346, kind: func, item_index: 348, name: "i64.atomic.rmw32_u.add")
    OnExport(index: 347, kind: func, item_index: 349, name: "i32.atomic.rmw.sub")
    OnExport(index: 348, kind: func, item_index: 350, name: "i64.atomic.rmw.sub")
    OnExport(index: 349, kind: func, item_index: 351, name: "i32.atomic.rmw8_u.sub")
    OnExport(index: 350, kind: func, item_index: 352, name: "i32.atomic.rmw16_u.sub")
    OnExport(index: 351, kind: func, item_index: 353, name: "i64.atomic.rmw8_u.sub")
    OnExport(index: 352, kind: func, item_index: 354, name: "i64.atomic.rmw16_u.sub")
    OnExport(index: 353, kind: func, item_index: 355, name: "i64.atomic.rmw32_u.sub")
    OnExport(index: 354, kind: func, item_index: 356, name: "i32.atomic.rmw.and")
    OnExport(index: 355, kind: func, item_index: 357, name: "i64.atomic.rmw.and")
    OnExport(index: 356, kind: func, item_index: 358, name: "i32.atomic.rmw8_u.and")
    OnExport(index: 357, kind: func, item_index: 359, name: "i32.atomic.rmw16_u.and")
    OnExport(index: 358, kind: func, item_index: 360, name: "i64.atomic.rmw8_u.and")
    OnExport(index: 359, kind: func, item_index: 361, name: "i64.atomic.rmw16_u.and")
    OnExport(index: 360, kind: func, item_index: 362, name: "i64.atomic.rmw32_u.and")
    OnExport(index: 361, kind: func, item_index: 363, name: "i32.atomic.rmw.or")
    OnExport(index: 362, kind: func, item_index: 364, name: "i64.atomic.rmw.or")
    OnExport(index: 363, kind: func, item_index: 365, name: "i32.atomic.rmw8_u.or")
    OnExport(index: 364, kind: func, item_index: 366, name: "i32.atomic.rmw16_u.or")
    OnExport(index: 365, kind: func, item_index: 367, name: "i64.atomic.rmw8_u.or")
    OnExport(index: 366, kind: func, item_index: 368, name: "i64.atomic.rmw16_u.or")
    OnExport(index: 367, kind: func, item_index: 369, name: "i64.atomic.rmw32_u.or")
    OnExport(index: 368, kind: func, item_index: 370, name: "i32.atomic.rmw.xor")
    OnExport(index: 369, kind: func, item_index: 371, name: "i64.atomic.rmw.xor")
    OnExport(index: 370, kind: func, item_index: 372, name: "i32.atomic.rmw8_u.xor")
    OnExport(index: 371, kind: func, item_index: 373, name: "i32.atomic.rmw16_u.xor")
    OnExport(index: 372, kind: func, item_index: 374, name: "i64.atomic.rmw8_u.xor")
    OnExport(index: 373, kind: func, item_index: 375, name: "i64.atomic.rmw16_u.xor")
    OnExport(index: 374, kind: func, item_index: 376, name: "i64.atomic.rmw32_u.xor")
    OnExport(index: 375, kind: func, item_index: 377, name: "i32.atomic.rmw.xchg")
    OnExport(index: 376, kind: func, item_index: 378, name: "i64.atomic.rmw.xchg")
    OnExport(index: 377, kind: func, item_index: 379, name: "i32.atomic.rmw8_u.xchg")
    OnExport(index: 378, kind: func, item_index: 380, name: "i32.atomic.rmw16_u.xchg")
    OnExport(index: 379, kind: func, item_index: 381, name: "i64.atomic.rmw8_u.xchg")
    OnExport(index: 380, kind: func, item_index: 382, name: "i64.atomic.rmw16_u.xchg")
    OnExport(index: 381, kind: func, item_index: 383, name: "i64.atomic.rmw32_u.xchg")
    OnExport(index: 382, kind: func, item_index: 384, name: "i32.atomic.rmw.cmpxchg")
    OnExport(index: 383, kind: func, item_index: 385, name: "i64.atomic.rmw.cmpxchg")
    OnExport(index: 384, kind: func, item_index: 386, name: "i32.atomic.rmw8_u.cmpxchg")
    OnExport(index: 385, kind: func, item_index: 387, name: "i32.atomic.rmw16_u.cmpxchg")
    OnExport(index: 386, kind: func, item_index: 388, name: "i64.atomic.rmw8_u.cmpxchg")
    OnExport(index: 387, kind: func, item_index: 389, name: "i64.atomic.rmw16_u.cmpxchg")
    OnExport(index: 388, kind: func, item_index: 390, name: "i64.atomic.rmw32_u.cmpxchg")
  EndExportSection
  BeginElemSection(8)
    OnElemSegmentCount(1)
    BeginElemSegment(index: 0, table_index: 0)
    BeginElemSegmentInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndElemSegmentInitExpr(0)
    OnElemSegmentFunctionIndexCount(index: 0, count: 2)
    OnElemSegmentFunctionIndex(index: 0, func_index: 1)
    OnElemSegmentFunctionIndex(index: 0, func_index: 1)
    EndElemSegment(0)
  EndElemSection
  BeginCodeSection(7512)
    OnFunctionBodyCount(390)
    BeginFunctionBody(1)
    OnLocalDeclCount(0)
    EndFunctionBody(1)
    BeginFunctionBody(2)
    OnLocalDeclCount(0)
    OnUnreachableExpr
    EndFunctionBody(2)
    BeginFunctionBody(3)
    OnLocalDeclCount(0)
    OnBrExpr(depth: 0)
    EndFunctionBody(3)
    BeginFunctionBody(4)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(4)
    BeginFunctionBody(5)
    OnLocalDeclCount(0)
    OnReturnExpr
    EndFunctionBody(5)
    BeginFunctionBody(6)
    OnLocalDeclCount(0)
    OnCallExpr(func_index: 1)
    EndFunctionBody(6)
    BeginFunctionBody(7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallIndirectExpr(sig_index: 0)
    EndFunctionBody(7)
    BeginFunctionBody(8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(8)
    BeginFunctionBody(9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnSelectExpr
    OnDropExpr
    EndFunctionBody(9)
    BeginFunctionBody(10)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnGetLocalExpr(index: 0)
    OnDropExpr
    EndFunctionBody(10)
    BeginFunctionBody(11)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnSetLocalExpr(index: 0)
    EndFunctionBody(11)
    BeginFunctionBody(12)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnTeeLocalExpr(index: 0)
    OnDropExpr
    EndFunctionBody(12)
    BeginFunctionBody(13)
    OnLocalDeclCount(0)
    OnGetGlobalExpr(index: 0)
    OnDropExpr
    EndFunctionBody(13)
    BeginFunctionBody(14)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnSetGlobalExpr(index: 0)
    EndFunctionBody(14)
    BeginFunctionBody(15)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load" (40), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(15)
    BeginFunctionBody(16)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load" (41), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(16)
    BeginFunctionBody(17)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f32.load" (42), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(17)
    BeginFunctionBody(18)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f64.load" (43), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(18)
    BeginFunctionBody(19)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_s" (44), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(19)
    BeginFunctionBody(20)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_u" (45), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(20)
    BeginFunctionBody(21)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_s" (46), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(21)
    BeginFunctionBody(22)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_u" (47), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(22)
    BeginFunctionBody(23)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_s" (48), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(23)
    BeginFunctionBody(24)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_u" (49), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(24)
    BeginFunctionBody(25)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_s" (50), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(25)
    BeginFunctionBody(26)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_u" (51), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(26)
    BeginFunctionBody(27)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_s" (52), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(27)
    BeginFunctionBody(28)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_u" (53), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(28)
    BeginFunctionBody(29)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store" (54), align log2: 2, offset: 2)
    EndFunctionBody(29)
    BeginFunctionBody(30)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store" (55), align log2: 3, offset: 2)
    EndFunctionBody(30)
    BeginFunctionBody(31)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF32ConstExpr(2 (0x0440000000))
    OnStoreExpr(opcode: "f32.store" (56), align log2: 2, offset: 2)
    EndFunctionBody(31)
    BeginFunctionBody(32)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnStoreExpr(opcode: "f64.store" (57), align log2: 3, offset: 2)
    EndFunctionBody(32)
    BeginFunctionBody(33)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store8" (58), align log2: 0, offset: 2)
    EndFunctionBody(33)
    BeginFunctionBody(34)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store16" (59), align log2: 1, offset: 2)
    EndFunctionBody(34)
    BeginFunctionBody(35)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store8" (60), align log2: 0, offset: 2)
    EndFunctionBody(35)
    BeginFunctionBody(36)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store16" (61), align log2: 1, offset: 2)
    EndFunctionBody(36)
    BeginFunctionBody(37)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store32" (62), align log2: 2, offset: 2)
    EndFunctionBody(37)
    BeginFunctionBody(38)
    OnLocalDeclCount(0)
    OnMemorySizeExpr
    OnDropExpr
    EndFunctionBody(38)
    BeginFunctionBody(39)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnMemoryGrowExpr
    OnDropExpr
    EndFunctionBody(39)
    BeginFunctionBody(40)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(40)
    BeginFunctionBody(41)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(41)
    BeginFunctionBody(42)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnDropExpr
    EndFunctionBody(42)
    BeginFunctionBody(43)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnDropExpr
    EndFunctionBody(43)
    BeginFunctionBody(44)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i32.eqz" (69))
    OnDropExpr
    EndFunctionBody(44)
    BeginFunctionBody(45)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.eq" (70))
    OnDropExpr
    EndFunctionBody(45)
    BeginFunctionBody(46)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ne" (71))
    OnDropExpr
    EndFunctionBody(46)
    BeginFunctionBody(47)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_s" (72))
    OnDropExpr
    EndFunctionBody(47)
    BeginFunctionBody(48)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_u" (73))
    OnDropExpr
    EndFunctionBody(48)
    BeginFunctionBody(49)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_s" (74))
    OnDropExpr
    EndFunctionBody(49)
    BeginFunctionBody(50)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_u" (75))
    OnDropExpr
    EndFunctionBody(50)
    BeginFunctionBody(51)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_s" (76))
    OnDropExpr
    EndFunctionBody(51)
    BeginFunctionBody(52)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_u" (77))
    OnDropExpr
    EndFunctionBody(52)
    BeginFunctionBody(53)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_s" (78))
    OnDropExpr
    EndFunctionBody(53)
    BeginFunctionBody(54)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_u" (79))
    OnDropExpr
    EndFunctionBody(54)
    BeginFunctionBody(55)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i64.eqz" (80))
    OnDropExpr
    EndFunctionBody(55)
    BeginFunctionBody(56)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.eq" (81))
    OnDropExpr
    EndFunctionBody(56)
    BeginFunctionBody(57)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ne" (82))
    OnDropExpr
    EndFunctionBody(57)
    BeginFunctionBody(58)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_s" (83))
    OnDropExpr
    EndFunctionBody(58)
    BeginFunctionBody(59)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_u" (84))
    OnDropExpr
    EndFunctionBody(59)
    BeginFunctionBody(60)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_s" (85))
    OnDropExpr
    EndFunctionBody(60)
    BeginFunctionBody(61)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_u" (86))
    OnDropExpr
    EndFunctionBody(61)
    BeginFunctionBody(62)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_s" (87))
    OnDropExpr
    EndFunctionBody(62)
    BeginFunctionBody(63)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_u" (88))
    OnDropExpr
    EndFunctionBody(63)
    BeginFunctionBody(64)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_s" (89))
    OnDropExpr
    EndFunctionBody(64)
    BeginFunctionBody(65)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_u" (90))
    OnDropExpr
    EndFunctionBody(65)
    BeginFunctionBody(66)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.eq" (91))
    OnDropExpr
    EndFunctionBody(66)
    BeginFunctionBody(67)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ne" (92))
    OnDropExpr
    EndFunctionBody(67)
    BeginFunctionBody(68)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.lt" (93))
    OnDropExpr
    EndFunctionBody(68)
    BeginFunctionBody(69)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.gt" (94))
    OnDropExpr
    EndFunctionBody(69)
    BeginFunctionBody(70)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.le" (95))
    OnDropExpr
    EndFunctionBody(70)
    BeginFunctionBody(71)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ge" (96))
    OnDropExpr
    EndFunctionBody(71)
    BeginFunctionBody(72)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.eq" (97))
    OnDropExpr
    EndFunctionBody(72)
    BeginFunctionBody(73)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ne" (98))
    OnDropExpr
    EndFunctionBody(73)
    BeginFunctionBody(74)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.lt" (99))
    OnDropExpr
    EndFunctionBody(74)
    BeginFunctionBody(75)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.gt" (100))
    OnDropExpr
    EndFunctionBody(75)
    BeginFunctionBody(76)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.le" (101))
    OnDropExpr
    EndFunctionBody(76)
    BeginFunctionBody(77)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ge" (102))
    OnDropExpr
    EndFunctionBody(77)
    BeginFunctionBody(78)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.clz" (103))
    OnDropExpr
    EndFunctionBody(78)
    BeginFunctionBody(79)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.ctz" (104))
    OnDropExpr
    EndFunctionBody(79)
    BeginFunctionBody(80)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.popcnt" (105))
    OnDropExpr
    EndFunctionBody(80)
    BeginFunctionBody(81)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.add" (106))
    OnDropExpr
    EndFunctionBody(81)
    BeginFunctionBody(82)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.sub" (107))
    OnDropExpr
    EndFunctionBody(82)
    BeginFunctionBody(83)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.mul" (108))
    OnDropExpr
    EndFunctionBody(83)
    BeginFunctionBody(84)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_s" (109))
    OnDropExpr
    EndFunctionBody(84)
    BeginFunctionBody(85)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_u" (110))
    OnDropExpr
    EndFunctionBody(85)
    BeginFunctionBody(86)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_s" (111))
    OnDropExpr
    EndFunctionBody(86)
    BeginFunctionBody(87)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_u" (112))
    OnDropExpr
    EndFunctionBody(87)
    BeginFunctionBody(88)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.and" (113))
    OnDropExpr
    EndFunctionBody(88)
    BeginFunctionBody(89)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.or" (114))
    OnDropExpr
    EndFunctionBody(89)
    BeginFunctionBody(90)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.xor" (115))
    OnDropExpr
    EndFunctionBody(90)
    BeginFunctionBody(91)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shl" (116))
    OnDropExpr
    EndFunctionBody(91)
    BeginFunctionBody(92)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_s" (117))
    OnDropExpr
    EndFunctionBody(92)
    BeginFunctionBody(93)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_u" (118))
    OnDropExpr
    EndFunctionBody(93)
    BeginFunctionBody(94)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotl" (119))
    OnDropExpr
    EndFunctionBody(94)
    BeginFunctionBody(95)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotr" (120))
    OnDropExpr
    EndFunctionBody(95)
    BeginFunctionBody(96)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.clz" (121))
    OnDropExpr
    EndFunctionBody(96)
    BeginFunctionBody(97)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.ctz" (122))
    OnDropExpr
    EndFunctionBody(97)
    BeginFunctionBody(98)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.popcnt" (123))
    OnDropExpr
    EndFunctionBody(98)
    BeginFunctionBody(99)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.add" (124))
    OnDropExpr
    EndFunctionBody(99)
    BeginFunctionBody(100)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.sub" (125))
    OnDropExpr
    EndFunctionBody(100)
    BeginFunctionBody(101)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.mul" (126))
    OnDropExpr
    EndFunctionBody(101)
    BeginFunctionBody(102)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_s" (127))
    OnDropExpr
    EndFunctionBody(102)
    BeginFunctionBody(103)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_u" (128))
    OnDropExpr
    EndFunctionBody(103)
    BeginFunctionBody(104)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_s" (129))
    OnDropExpr
    EndFunctionBody(104)
    BeginFunctionBody(105)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_u" (130))
    OnDropExpr
    EndFunctionBody(105)
    BeginFunctionBody(106)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.and" (131))
    OnDropExpr
    EndFunctionBody(106)
    BeginFunctionBody(107)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.or" (132))
    OnDropExpr
    EndFunctionBody(107)
    BeginFunctionBody(108)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.xor" (133))
    OnDropExpr
    EndFunctionBody(108)
    BeginFunctionBody(109)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shl" (134))
    OnDropExpr
    EndFunctionBody(109)
    BeginFunctionBody(110)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_s" (135))
    OnDropExpr
    EndFunctionBody(110)
    BeginFunctionBody(111)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_u" (136))
    OnDropExpr
    EndFunctionBody(111)
    BeginFunctionBody(112)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotl" (137))
    OnDropExpr
    EndFunctionBody(112)
    BeginFunctionBody(113)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotr" (138))
    OnDropExpr
    EndFunctionBody(113)
    BeginFunctionBody(114)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.abs" (139))
    OnDropExpr
    EndFunctionBody(114)
    BeginFunctionBody(115)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.neg" (140))
    OnDropExpr
    EndFunctionBody(115)
    BeginFunctionBody(116)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.ceil" (141))
    OnDropExpr
    EndFunctionBody(116)
    BeginFunctionBody(117)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.floor" (142))
    OnDropExpr
    EndFunctionBody(117)
    BeginFunctionBody(118)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.trunc" (143))
    OnDropExpr
    EndFunctionBody(118)
    BeginFunctionBody(119)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.nearest" (144))
    OnDropExpr
    EndFunctionBody(119)
    BeginFunctionBody(120)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.sqrt" (145))
    OnDropExpr
    EndFunctionBody(120)
    BeginFunctionBody(121)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.add" (146))
    OnDropExpr
    EndFunctionBody(121)
    BeginFunctionBody(122)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.sub" (147))
    OnDropExpr
    EndFunctionBody(122)
    BeginFunctionBody(123)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.mul" (148))
    OnDropExpr
    EndFunctionBody(123)
    BeginFunctionBody(124)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.div" (149))
    OnDropExpr
    EndFunctionBody(124)
    BeginFunctionBody(125)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.min" (150))
    OnDropExpr
    EndFunctionBody(125)
    BeginFunctionBody(126)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.max" (151))
    OnDropExpr
    EndFunctionBody(126)
    BeginFunctionBody(127)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.copysign" (152))
    OnDropExpr
    EndFunctionBody(127)
    BeginFunctionBody(128)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.abs" (153))
    OnDropExpr
    EndFunctionBody(128)
    BeginFunctionBody(129)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.neg" (154))
    OnDropExpr
    EndFunctionBody(129)
    BeginFunctionBody(130)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.ceil" (155))
    OnDropExpr
    EndFunctionBody(130)
    BeginFunctionBody(131)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.floor" (156))
    OnDropExpr
    EndFunctionBody(131)
    BeginFunctionBody(132)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.trunc" (157))
    OnDropExpr
    EndFunctionBody(132)
    BeginFunctionBody(133)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.nearest" (158))
    OnDropExpr
    EndFunctionBody(133)
    BeginFunctionBody(134)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.sqrt" (159))
    OnDropExpr
    EndFunctionBody(134)
    BeginFunctionBody(135)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.add" (160))
    OnDropExpr
    EndFunctionBody(135)
    BeginFunctionBody(136)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.sub" (161))
    OnDropExpr
    EndFunctionBody(136)
    BeginFunctionBody(137)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.mul" (162))
    OnDropExpr
    EndFunctionBody(137)
    BeginFunctionBody(138)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.div" (163))
    OnDropExpr
    EndFunctionBody(138)
    BeginFunctionBody(139)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.min" (164))
    OnDropExpr
    EndFunctionBody(139)
    BeginFunctionBody(140)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.max" (165))
    OnDropExpr
    EndFunctionBody(140)
    BeginFunctionBody(141)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.copysign" (166))
    OnDropExpr
    EndFunctionBody(141)
    BeginFunctionBody(142)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i32.wrap/i64" (167))
    OnDropExpr
    EndFunctionBody(142)
    BeginFunctionBody(143)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_s/f32" (168))
    OnDropExpr
    EndFunctionBody(143)
    BeginFunctionBody(144)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_u/f32" (169))
    OnDropExpr
    EndFunctionBody(144)
    BeginFunctionBody(145)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_s/f64" (170))
    OnDropExpr
    EndFunctionBody(145)
    BeginFunctionBody(146)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_u/f64" (171))
    OnDropExpr
    EndFunctionBody(146)
    BeginFunctionBody(147)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_s/i32" (172))
    OnDropExpr
    EndFunctionBody(147)
    BeginFunctionBody(148)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_u/i32" (173))
    OnDropExpr
    EndFunctionBody(148)
    BeginFunctionBody(149)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_s/f32" (174))
    OnDropExpr
    EndFunctionBody(149)
    BeginFunctionBody(150)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_u/f32" (175))
    OnDropExpr
    EndFunctionBody(150)
    BeginFunctionBody(151)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_s/f64" (176))
    OnDropExpr
    EndFunctionBody(151)
    BeginFunctionBody(152)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_u/f64" (177))
    OnDropExpr
    EndFunctionBody(152)
    BeginFunctionBody(153)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_s/i32" (178))
    OnDropExpr
    EndFunctionBody(153)
    BeginFunctionBody(154)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_u/i32" (179))
    OnDropExpr
    EndFunctionBody(154)
    BeginFunctionBody(155)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_s/i64" (180))
    OnDropExpr
    EndFunctionBody(155)
    BeginFunctionBody(156)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_u/i64" (181))
    OnDropExpr
    EndFunctionBody(156)
    BeginFunctionBody(157)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("f32.demote/f64" (182))
    OnDropExpr
    EndFunctionBody(157)
    BeginFunctionBody(158)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_s/i32" (183))
    OnDropExpr
    EndFunctionBody(158)
    BeginFunctionBody(159)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_u/i32" (184))
    OnDropExpr
    EndFunctionBody(159)
    BeginFunctionBody(160)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_s/i64" (185))
    OnDropExpr
    EndFunctionBody(160)
    BeginFunctionBody(161)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_u/i64" (186))
    OnDropExpr
    EndFunctionBody(161)
    BeginFunctionBody(162)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("f64.promote/f32" (187))
    OnDropExpr
    EndFunctionBody(162)
    BeginFunctionBody(163)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.reinterpret/i32" (190))
    OnDropExpr
    EndFunctionBody(163)
    BeginFunctionBody(164)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.reinterpret/f32" (188))
    OnDropExpr
    EndFunctionBody(164)
    BeginFunctionBody(165)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.reinterpret/i64" (191))
    OnDropExpr
    EndFunctionBody(165)
    BeginFunctionBody(166)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.reinterpret/f64" (189))
    OnDropExpr
    EndFunctionBody(166)
    BeginFunctionBody(167)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend8_s" (192))
    OnDropExpr
    EndFunctionBody(167)
    BeginFunctionBody(168)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend16_s" (193))
    OnDropExpr
    EndFunctionBody(168)
    BeginFunctionBody(169)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend8_s" (194))
    OnDropExpr
    EndFunctionBody(169)
    BeginFunctionBody(170)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend16_s" (195))
    OnDropExpr
    EndFunctionBody(170)
    BeginFunctionBody(171)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend32_s" (196))
    OnDropExpr
    EndFunctionBody(171)
    BeginFunctionBody(172)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    EndFunctionBody(172)
    BeginFunctionBody(173)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrIfExpr(depth: 0)
    EndFunctionBody(173)
    BeginFunctionBody(174)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallExpr(func_index: 0)
    EndFunctionBody(174)
    BeginFunctionBody(175)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(175)
    BeginFunctionBody(176)
    OnLocalDeclCount(0)
    OnBlockExpr(sig: [i32])
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBrExpr(depth: 0)
    OnEndExpr
    OnDropExpr
    EndFunctionBody(176)
    BeginFunctionBody(177)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_s:sat/f32" (0))
    OnDropExpr
    EndFunctionBody(177)
    BeginFunctionBody(178)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_u:sat/f32" (1))
    OnDropExpr
    EndFunctionBody(178)
    BeginFunctionBody(179)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_s:sat/f64" (2))
    OnDropExpr
    EndFunctionBody(179)
    BeginFunctionBody(180)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_u:sat/f64" (3))
    OnDropExpr
    EndFunctionBody(180)
    BeginFunctionBody(181)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_s:sat/f32" (4))
    OnDropExpr
    EndFunctionBody(181)
    BeginFunctionBody(182)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_u:sat/f32" (5))
    OnDropExpr
    EndFunctionBody(182)
    BeginFunctionBody(183)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_s:sat/f64" (6))
    OnDropExpr
    EndFunctionBody(183)
    BeginFunctionBody(184)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_u:sat/f64" (7))
    OnDropExpr
    EndFunctionBody(184)
    BeginFunctionBody(185)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnDropExpr
    EndFunctionBody(185)
    BeginFunctionBody(186)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "v128.load" (1), align log2: 4, offset: 3)
    OnDropExpr
    EndFunctionBody(186)
    BeginFunctionBody(187)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnStoreExpr(opcode: "v128.store" (2), align log2: 4, offset: 3)
    EndFunctionBody(187)
    BeginFunctionBody(188)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i8x16.splat" (3))
    OnDropExpr
    EndFunctionBody(188)
    BeginFunctionBody(189)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i16x8.splat" (4))
    OnDropExpr
    EndFunctionBody(189)
    BeginFunctionBody(190)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32x4.splat" (5))
    OnDropExpr
    EndFunctionBody(190)
    BeginFunctionBody(191)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64x2.splat" (6))
    OnDropExpr
    EndFunctionBody(191)
    BeginFunctionBody(192)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32x4.splat" (7))
    OnDropExpr
    EndFunctionBody(192)
    BeginFunctionBody(193)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64x2.splat" (8))
    OnDropExpr
    EndFunctionBody(193)
    BeginFunctionBody(194)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(194)
    BeginFunctionBody(195)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(195)
    BeginFunctionBody(196)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(196)
    BeginFunctionBody(197)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(197)
    BeginFunctionBody(198)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(198)
    BeginFunctionBody(199)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(199)
    BeginFunctionBody(200)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(200)
    BeginFunctionBody(201)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(201)
    BeginFunctionBody(202)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(202)
    BeginFunctionBody(203)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(203)
    BeginFunctionBody(204)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(204)
    BeginFunctionBody(205)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI64ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(205)
    BeginFunctionBody(206)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF32ConstExpr(0 (0x040))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(206)
    BeginFunctionBody(207)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF64ConstExpr(0 (0x080))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(207)
    BeginFunctionBody(208)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnSimdShuffleOpExpr (lane: 0x00000001 00000001 00000001 00000001)
    OnDropExpr
    EndFunctionBody(208)
    BeginFunctionBody(209)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add" (24))
    OnDropExpr
    EndFunctionBody(209)
    BeginFunctionBody(210)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add" (25))
    OnDropExpr
    EndFunctionBody(210)
    BeginFunctionBody(211)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.add" (26))
    OnDropExpr
    EndFunctionBody(211)
    BeginFunctionBody(212)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.add" (27))
    OnDropExpr
    EndFunctionBody(212)
    BeginFunctionBody(213)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub" (28))
    OnDropExpr
    EndFunctionBody(213)
    BeginFunctionBody(214)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub" (29))
    OnDropExpr
    EndFunctionBody(214)
    BeginFunctionBody(215)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.sub" (30))
    OnDropExpr
    EndFunctionBody(215)
    BeginFunctionBody(216)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.sub" (31))
    OnDropExpr
    EndFunctionBody(216)
    BeginFunctionBody(217)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.mul" (32))
    OnDropExpr
    EndFunctionBody(217)
    BeginFunctionBody(218)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.mul" (33))
    OnDropExpr
    EndFunctionBody(218)
    BeginFunctionBody(219)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.mul" (34))
    OnDropExpr
    EndFunctionBody(219)
    BeginFunctionBody(220)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.neg" (35))
    OnDropExpr
    EndFunctionBody(220)
    BeginFunctionBody(221)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.neg" (36))
    OnDropExpr
    EndFunctionBody(221)
    BeginFunctionBody(222)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.neg" (37))
    OnDropExpr
    EndFunctionBody(222)
    BeginFunctionBody(223)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.neg" (38))
    OnDropExpr
    EndFunctionBody(223)
    BeginFunctionBody(224)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_s" (39))
    OnDropExpr
    EndFunctionBody(224)
    BeginFunctionBody(225)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_u" (40))
    OnDropExpr
    EndFunctionBody(225)
    BeginFunctionBody(226)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_s" (41))
    OnDropExpr
    EndFunctionBody(226)
    BeginFunctionBody(227)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_u" (42))
    OnDropExpr
    EndFunctionBody(227)
    BeginFunctionBody(228)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_s" (43))
    OnDropExpr
    EndFunctionBody(228)
    BeginFunctionBody(229)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_u" (44))
    OnDropExpr
    EndFunctionBody(229)
    BeginFunctionBody(230)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_s" (45))
    OnDropExpr
    EndFunctionBody(230)
    BeginFunctionBody(231)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_u" (46))
    OnDropExpr
    EndFunctionBody(231)
    BeginFunctionBody(232)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shl" (47))
    OnDropExpr
    EndFunctionBody(232)
    BeginFunctionBody(233)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shl" (48))
    OnDropExpr
    EndFunctionBody(233)
    BeginFunctionBody(234)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shl" (49))
    OnDropExpr
    EndFunctionBody(234)
    BeginFunctionBody(235)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shl" (50))
    OnDropExpr
    EndFunctionBody(235)
    BeginFunctionBody(236)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_s" (51))
    OnDropExpr
    EndFunctionBody(236)
    BeginFunctionBody(237)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_u" (52))
    OnDropExpr
    EndFunctionBody(237)
    BeginFunctionBody(238)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_s" (53))
    OnDropExpr
    EndFunctionBody(238)
    BeginFunctionBody(239)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_u" (54))
    OnDropExpr
    EndFunctionBody(239)
    BeginFunctionBody(240)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_s" (55))
    OnDropExpr
    EndFunctionBody(240)
    BeginFunctionBody(241)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_u" (56))
    OnDropExpr
    EndFunctionBody(241)
    BeginFunctionBody(242)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_s" (57))
    OnDropExpr
    EndFunctionBody(242)
    BeginFunctionBody(243)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_u" (58))
    OnDropExpr
    EndFunctionBody(243)
    BeginFunctionBody(244)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.and" (59))
    OnDropExpr
    EndFunctionBody(244)
    BeginFunctionBody(245)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.or" (60))
    OnDropExpr
    EndFunctionBody(245)
    BeginFunctionBody(246)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.xor" (61))
    OnDropExpr
    EndFunctionBody(246)
    BeginFunctionBody(247)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("v128.not" (62))
    OnDropExpr
    EndFunctionBody(247)
    BeginFunctionBody(248)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnV128ConstExpr(0x00000003 0x00000003 0x00000003 0x00000003)
    OnTernaryExpr("v128.bitselect" (63))
    OnDropExpr
    EndFunctionBody(248)
    BeginFunctionBody(249)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.any_true" (64))
    OnDropExpr
    EndFunctionBody(249)
    BeginFunctionBody(250)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.any_true" (65))
    OnDropExpr
    EndFunctionBody(250)
    BeginFunctionBody(251)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.any_true" (66))
    OnDropExpr
    EndFunctionBody(251)
    BeginFunctionBody(252)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.any_true" (67))
    OnDropExpr
    EndFunctionBody(252)
    BeginFunctionBody(253)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.all_true" (68))
    OnDropExpr
    EndFunctionBody(253)
    BeginFunctionBody(254)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.all_true" (69))
    OnDropExpr
    EndFunctionBody(254)
    BeginFunctionBody(255)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.all_true" (70))
    OnDropExpr
    EndFunctionBody(255)
    BeginFunctionBody(256)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.all_true" (71))
    OnDropExpr
    EndFunctionBody(256)
    BeginFunctionBody(257)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.eq" (72))
    OnDropExpr
    EndFunctionBody(257)
    BeginFunctionBody(258)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.eq" (73))
    OnDropExpr
    EndFunctionBody(258)
    BeginFunctionBody(259)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.eq" (74))
    OnDropExpr
    EndFunctionBody(259)
    BeginFunctionBody(260)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.eq" (75))
    OnDropExpr
    EndFunctionBody(260)
    BeginFunctionBody(261)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.eq" (76))
    OnDropExpr
    EndFunctionBody(261)
    BeginFunctionBody(262)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ne" (77))
    OnDropExpr
    EndFunctionBody(262)
    BeginFunctionBody(263)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ne" (78))
    OnDropExpr
    EndFunctionBody(263)
    BeginFunctionBody(264)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ne" (79))
    OnDropExpr
    EndFunctionBody(264)
    BeginFunctionBody(265)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ne" (80))
    OnDropExpr
    EndFunctionBody(265)
    BeginFunctionBody(266)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ne" (81))
    OnDropExpr
    EndFunctionBody(266)
    BeginFunctionBody(267)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_s" (82))
    OnDropExpr
    EndFunctionBody(267)
    BeginFunctionBody(268)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_u" (83))
    OnDropExpr
    EndFunctionBody(268)
    BeginFunctionBody(269)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_s" (84))
    OnDropExpr
    EndFunctionBody(269)
    BeginFunctionBody(270)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_u" (85))
    OnDropExpr
    EndFunctionBody(270)
    BeginFunctionBody(271)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_s" (86))
    OnDropExpr
    EndFunctionBody(271)
    BeginFunctionBody(272)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_u" (87))
    OnDropExpr
    EndFunctionBody(272)
    BeginFunctionBody(273)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.lt" (88))
    OnDropExpr
    EndFunctionBody(273)
    BeginFunctionBody(274)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.lt" (89))
    OnDropExpr
    EndFunctionBody(274)
    BeginFunctionBody(275)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_s" (90))
    OnDropExpr
    EndFunctionBody(275)
    BeginFunctionBody(276)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_u" (91))
    OnDropExpr
    EndFunctionBody(276)
    BeginFunctionBody(277)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_s" (92))
    OnDropExpr
    EndFunctionBody(277)
    BeginFunctionBody(278)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_u" (93))
    OnDropExpr
    EndFunctionBody(278)
    BeginFunctionBody(279)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_s" (94))
    OnDropExpr
    EndFunctionBody(279)
    BeginFunctionBody(280)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_u" (95))
    OnDropExpr
    EndFunctionBody(280)
    BeginFunctionBody(281)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.le" (96))
    OnDropExpr
    EndFunctionBody(281)
    BeginFunctionBody(282)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.le" (97))
    OnDropExpr
    EndFunctionBody(282)
    BeginFunctionBody(283)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_s" (98))
    OnDropExpr
    EndFunctionBody(283)
    BeginFunctionBody(284)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_u" (99))
    OnDropExpr
    EndFunctionBody(284)
    BeginFunctionBody(285)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_s" (100))
    OnDropExpr
    EndFunctionBody(285)
    BeginFunctionBody(286)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_u" (101))
    OnDropExpr
    EndFunctionBody(286)
    BeginFunctionBody(287)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_s" (102))
    OnDropExpr
    EndFunctionBody(287)
    BeginFunctionBody(288)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_u" (103))
    OnDropExpr
    EndFunctionBody(288)
    BeginFunctionBody(289)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.gt" (104))
    OnDropExpr
    EndFunctionBody(289)
    BeginFunctionBody(290)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.gt" (105))
    OnDropExpr
    EndFunctionBody(290)
    BeginFunctionBody(291)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_s" (106))
    OnDropExpr
    EndFunctionBody(291)
    BeginFunctionBody(292)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_u" (107))
    OnDropExpr
    EndFunctionBody(292)
    BeginFunctionBody(293)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_s" (108))
    OnDropExpr
    EndFunctionBody(293)
    BeginFunctionBody(294)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_u" (109))
    OnDropExpr
    EndFunctionBody(294)
    BeginFunctionBody(295)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_s" (110))
    OnDropExpr
    EndFunctionBody(295)
    BeginFunctionBody(296)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_u" (111))
    OnDropExpr
    EndFunctionBody(296)
    BeginFunctionBody(297)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ge" (112))
    OnDropExpr
    EndFunctionBody(297)
    BeginFunctionBody(298)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ge" (113))
    OnDropExpr
    EndFunctionBody(298)
    BeginFunctionBody(299)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.neg" (114))
    OnDropExpr
    EndFunctionBody(299)
    BeginFunctionBody(300)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.neg" (115))
    OnDropExpr
    EndFunctionBody(300)
    BeginFunctionBody(301)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.abs" (116))
    OnDropExpr
    EndFunctionBody(301)
    BeginFunctionBody(302)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.abs" (117))
    OnDropExpr
    EndFunctionBody(302)
    BeginFunctionBody(303)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.min" (118))
    OnDropExpr
    EndFunctionBody(303)
    BeginFunctionBody(304)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.min" (119))
    OnDropExpr
    EndFunctionBody(304)
    BeginFunctionBody(305)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.max" (120))
    OnDropExpr
    EndFunctionBody(305)
    BeginFunctionBody(306)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.max" (121))
    OnDropExpr
    EndFunctionBody(306)
    BeginFunctionBody(307)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.add" (122))
    OnDropExpr
    EndFunctionBody(307)
    BeginFunctionBody(308)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.add" (123))
    OnDropExpr
    EndFunctionBody(308)
    BeginFunctionBody(309)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.sub" (124))
    OnDropExpr
    EndFunctionBody(309)
    BeginFunctionBody(310)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.sub" (125))
    OnDropExpr
    EndFunctionBody(310)
    BeginFunctionBody(311)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.div" (126))
    OnDropExpr
    EndFunctionBody(311)
    BeginFunctionBody(312)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.div" (127))
    OnDropExpr
    EndFunctionBody(312)
    BeginFunctionBody(313)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.mul" (128))
    OnDropExpr
    EndFunctionBody(313)
    BeginFunctionBody(314)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.mul" (129))
    OnDropExpr
    EndFunctionBody(314)
    BeginFunctionBody(315)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.sqrt" (130))
    OnDropExpr
    EndFunctionBody(315)
    BeginFunctionBody(316)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.sqrt" (131))
    OnDropExpr
    EndFunctionBody(316)
    BeginFunctionBody(317)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_s/i32x4" (132))
    OnDropExpr
    EndFunctionBody(317)
    BeginFunctionBody(318)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_u/i32x4" (133))
    OnDropExpr
    EndFunctionBody(318)
    BeginFunctionBody(319)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_s/i64x2" (134))
    OnDropExpr
    EndFunctionBody(319)
    BeginFunctionBody(320)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_u/i64x2" (135))
    OnDropExpr
    EndFunctionBody(320)
    BeginFunctionBody(321)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_s/f32x4:sat" (136))
    OnDropExpr
    EndFunctionBody(321)
    BeginFunctionBody(322)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_u/f32x4:sat" (137))
    OnDropExpr
    EndFunctionBody(322)
    BeginFunctionBody(323)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_s/f64x2:sat" (138))
    OnDropExpr
    EndFunctionBody(323)
    BeginFunctionBody(324)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_u/f64x2:sat" (139))
    OnDropExpr
    EndFunctionBody(324)
    BeginFunctionBody(325)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicWakeExpr(opcode: "atomic.wake" (0), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(325)
    BeginFunctionBody(326)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i32.atomic.wait" (1), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(326)
    BeginFunctionBody(327)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i64.atomic.wait" (2), align log2: 3, offset: 3)
    OnDropExpr
    EndFunctionBody(327)
    BeginFunctionBody(328)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load" (16), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(328)
    BeginFunctionBody(329)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load" (17), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(329)
    BeginFunctionBody(330)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load8_u" (18), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(330)
    BeginFunctionBody(331)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load16_u" (19), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(331)
    BeginFunctionBody(332)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load8_u" (20), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(332)
    BeginFunctionBody(333)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load16_u" (21), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(333)
    BeginFunctionBody(334)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load32_u" (22), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(334)
    BeginFunctionBody(335)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store" (23), align log2: 2, offset: 3)
    EndFunctionBody(335)
    BeginFunctionBody(336)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store" (24), align log2: 3, offset: 7)
    EndFunctionBody(336)
    BeginFunctionBody(337)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store8" (25), align log2: 0, offset: 3)
    EndFunctionBody(337)
    BeginFunctionBody(338)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store16" (26), align log2: 1, offset: 3)
    EndFunctionBody(338)
    BeginFunctionBody(339)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store8" (27), align log2: 0, offset: 3)
    EndFunctionBody(339)
    BeginFunctionBody(340)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store16" (28), align log2: 1, offset: 3)
    EndFunctionBody(340)
    BeginFunctionBody(341)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store32" (29), align log2: 2, offset: 3)
    EndFunctionBody(341)
    BeginFunctionBody(342)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.add" (30), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(342)
    BeginFunctionBody(343)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.add" (31), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(343)
    BeginFunctionBody(344)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.add" (32), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(344)
    BeginFunctionBody(345)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.add" (33), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(345)
    BeginFunctionBody(346)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.add" (34), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(346)
    BeginFunctionBody(347)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.add" (35), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(347)
    BeginFunctionBody(348)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.add" (36), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(348)
    BeginFunctionBody(349)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.sub" (37), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(349)
    BeginFunctionBody(350)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.sub" (38), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(350)
    BeginFunctionBody(351)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.sub" (39), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(351)
    BeginFunctionBody(352)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.sub" (40), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(352)
    BeginFunctionBody(353)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.sub" (41), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(353)
    BeginFunctionBody(354)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.sub" (42), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(354)
    BeginFunctionBody(355)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.sub" (43), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(355)
    BeginFunctionBody(356)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.and" (44), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(356)
    BeginFunctionBody(357)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.and" (45), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(357)
    BeginFunctionBody(358)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.and" (46), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(358)
    BeginFunctionBody(359)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.and" (47), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(359)
    BeginFunctionBody(360)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.and" (48), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(360)
    BeginFunctionBody(361)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.and" (49), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(361)
    BeginFunctionBody(362)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.and" (50), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(362)
    BeginFunctionBody(363)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.or" (51), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(363)
    BeginFunctionBody(364)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.or" (52), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(364)
    BeginFunctionBody(365)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.or" (53), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(365)
    BeginFunctionBody(366)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.or" (54), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(366)
    BeginFunctionBody(367)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.or" (55), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(367)
    BeginFunctionBody(368)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.or" (56), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(368)
    BeginFunctionBody(369)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.or" (57), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(369)
    BeginFunctionBody(370)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xor" (58), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(370)
    BeginFunctionBody(371)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xor" (59), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(371)
    BeginFunctionBody(372)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.xor" (60), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(372)
    BeginFunctionBody(373)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.xor" (61), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(373)
    BeginFunctionBody(374)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.xor" (62), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(374)
    BeginFunctionBody(375)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.xor" (63), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(375)
    BeginFunctionBody(376)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.xor" (64), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(376)
    BeginFunctionBody(377)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xchg" (65), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(377)
    BeginFunctionBody(378)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xchg" (66), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(378)
    BeginFunctionBody(379)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8_u.xchg" (67), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(379)
    BeginFunctionBody(380)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16_u.xchg" (68), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(380)
    BeginFunctionBody(381)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8_u.xchg" (69), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(381)
    BeginFunctionBody(382)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16_u.xchg" (70), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(382)
    BeginFunctionBody(383)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32_u.xchg" (71), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(383)
    BeginFunctionBody(384)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw.cmpxchg" (72), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(384)
    BeginFunctionBody(385)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw.cmpxchg" (73), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(385)
    BeginFunctionBody(386)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw8_u.cmpxchg" (74), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(386)
    BeginFunctionBody(387)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw16_u.cmpxchg" (75), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(387)
    BeginFunctionBody(388)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw8_u.cmpxchg" (76), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(388)
    BeginFunctionBody(389)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw16_u.cmpxchg" (77), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(389)
    BeginFunctionBody(390)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw32_u.cmpxchg" (78), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(390)
  EndCodeSection
EndModule
   0| return
   1| unreachable
   2| return
   3| br @8
   8| return
   9| i32.const $1
  14| br_table %[-1], $#0, table:$28
  23| data $9
  28|   entry 0: offset: 37 drop: 0 keep: 0
  37| return
  38| return
  39| return
  40| call @0
  45| return
  46| i32.const $1
  51| call_indirect $0:0, %[-1]
  60| return
  61| i32.const $1
  66| drop
  67| return
  68| i32.const $1
  73| i32.const $2
  78| i32.const $3
  83| select %[-3], %[-2], %[-1]
  84| drop
  85| return
  86| alloca $1
  91| get_local $1
  96| drop
  97| drop
  98| return
  99| alloca $1
 104| i32.const $1
 109| set_local $1, %[-1]
 114| drop
 115| return
 116| alloca $1
 121| i32.const $1
 126| tee_local $2, %[-1]
 131| drop
 132| drop
 133| return
 134| get_global $0
 139| drop
 140| return
 141| i32.const $1
 146| set_global $0, %[-1]
 151| return
 152| i32.const $1
 157| i32.load $0:%[-1]+$2
 166| drop
 167| return
 168| i32.const $1
 173| i64.load $0:%[-1]+$2
 182| drop
 183| return
 184| i32.const $1
 189| f32.load $0:%[-1]+$2
 198| drop
 199| return
 200| i32.const $1
 205| f64.load $0:%[-1]+$2
 214| drop
 215| return
 216| i32.const $1
 221| i32.load8_s $0:%[-1]+$2
 230| drop
 231| return
 232| i32.const $1
 237| i32.load8_u $0:%[-1]+$2
 246| drop
 247| return
 248| i32.const $1
 253| i32.load16_s $0:%[-1]+$2
 262| drop
 263| return
 264| i32.const $1
 269| i32.load16_u $0:%[-1]+$2
 278| drop
 279| return
 280| i32.const $1
 285| i64.load8_s $0:%[-1]+$2
 294| drop
 295| return
 296| i32.const $1
 301| i64.load8_u $0:%[-1]+$2
 310| drop
 311| return
 312| i32.const $1
 317| i64.load16_s $0:%[-1]+$2
 326| drop
 327| return
 328| i32.const $1
 333| i64.load16_u $0:%[-1]+$2
 342| drop
 343| return
 344| i32.const $1
 349| i64.load32_s $0:%[-1]+$2
 358| drop
 359| return
 360| i32.const $1
 365| i64.load32_u $0:%[-1]+$2
 374| drop
 375| return
 376| i32.const $1
 381| i32.const $2
 386| i32.store $0:%[-2]+$2, %[-1]
 395| return
 396| i32.const $1
 401| i64.const $2
 410| i64.store $0:%[-2]+$2, %[-1]
 419| return
 420| i32.const $1
 425| f32.const $2
 430| f32.store $0:%[-2]+$2, %[-1]
 439| return
 440| i32.const $1
 445| f64.const $2
 454| f64.store $0:%[-2]+$2, %[-1]
 463| return
 464| i32.const $1
 469| i32.const $2
 474| i32.store8 $0:%[-2]+$2, %[-1]
 483| return
 484| i32.const $1
 489| i32.const $2
 494| i32.store16 $0:%[-2]+$2, %[-1]
 503| return
 504| i32.const $1
 509| i64.const $2
 518| i64.store8 $0:%[-2]+$2, %[-1]
 527| return
 528| i32.const $1
 533| i64.const $2
 542| i64.store16 $0:%[-2]+$2, %[-1]
 551| return
 552| i32.const $1
 557| i64.const $2
 566| i64.store32 $0:%[-2]+$2, %[-1]
 575| return
 576| memory.size $0
 581| drop
 582| return
 583| i32.const $1
 588| memory.grow $0:%[-1]
 593| drop
 594| return
 595| i32.const $1
 600| drop
 601| return
 602| i64.const $1
 611| drop
 612| return
 613| f32.const $1
 618| drop
 619| return
 620| f64.const $1
 629| drop
 630| return
 631| i32.const $1
 636| i32.eqz %[-1]
 637| drop
 638| return
 639| i32.const $1
 644| i32.const $2
 649| i32.eq %[-2], %[-1]
 650| drop
 651| return
 652| i32.const $1
 657| i32.const $2
 662| i32.ne %[-2], %[-1]
 663| drop
 664| return
 665| i32.const $1
 670| i32.const $2
 675| i32.lt_s %[-2], %[-1]
 676| drop
 677| return
 678| i32.const $1
 683| i32.const $2
 688| i32.lt_u %[-2], %[-1]
 689| drop
 690| return
 691| i32.const $1
 696| i32.const $2
 701| i32.gt_s %[-2], %[-1]
 702| drop
 703| return
 704| i32.const $1
 709| i32.const $2
 714| i32.gt_u %[-2], %[-1]
 715| drop
 716| return
 717| i32.const $1
 722| i32.const $2
 727| i32.le_s %[-2], %[-1]
 728| drop
 729| return
 730| i32.const $1
 735| i32.const $2
 740| i32.le_u %[-2], %[-1]
 741| drop
 742| return
 743| i32.const $1
 748| i32.const $2
 753| i32.ge_s %[-2], %[-1]
 754| drop
 755| return
 756| i32.const $1
 761| i32.const $2
 766| i32.ge_u %[-2], %[-1]
 767| drop
 768| return
 769| i64.const $1
 778| i64.eqz %[-1]
 779| drop
 780| return
 781| i64.const $1
 790| i64.const $2
 799| i64.eq %[-2], %[-1]
 800| drop
 801| return
 802| i64.const $1
 811| i64.const $2
 820| i64.ne %[-2], %[-1]
 821| drop
 822| return
 823| i64.const $1
 832| i64.const $2
 841| i64.lt_s %[-2], %[-1]
 842| drop
 843| return
 844| i64.const $1
 853| i64.const $2
 862| i64.lt_u %[-2], %[-1]
 863| drop
 864| return
 865| i64.const $1
 874| i64.const $2
 883| i64.gt_s %[-2], %[-1]
 884| drop
 885| return
 886| i64.const $1
 895| i64.const $2
 904| i64.gt_u %[-2], %[-1]
 905| drop
 906| return
 907| i64.const $1
 916| i64.const $2
 925| i64.le_s %[-2], %[-1]
 926| drop
 927| return
 928| i64.const $1
 937| i64.const $2
 946| i64.le_u %[-2], %[-1]
 947| drop
 948| return
 949| i64.const $1
 958| i64.const $2
 967| i64.ge_s %[-2], %[-1]
 968| drop
 969| return
 970| i64.const $1
 979| i64.const $2
 988| i64.ge_u %[-2], %[-1]
 989| drop
 990| return
 991| f32.const $1
 996| f32.const $2
1001| f32.eq %[-2], %[-1]
1002| drop
1003| return
1004| f32.const $1
1009| f32.const $2
1014| f32.ne %[-2], %[-1]
1015| drop
1016| return
1017| f32.const $1
1022| f32.const $2
1027| f32.lt %[-2], %[-1]
1028| drop
1029| return
1030| f32.const $1
1035| f32.const $2
1040| f32.gt %[-2], %[-1]
1041| drop
1042| return
1043| f32.const $1
1048| f32.const $2
1053| f32.le %[-2], %[-1]
1054| drop
1055| return
1056| f32.const $1
1061| f32.const $2
1066| f32.ge %[-2], %[-1]
1067| drop
1068| return
1069| f64.const $1
1078| f64.const $2
1087| f64.eq %[-2], %[-1]
1088| drop
1089| return
1090| f64.const $1
1099| f64.const $2
1108| f64.ne %[-2], %[-1]
1109| drop
1110| return
1111| f64.const $1
1120| f64.const $2
1129| f64.lt %[-2], %[-1]
1130| drop
1131| return
1132| f64.const $1
1141| f64.const $2
1150| f64.gt %[-2], %[-1]
1151| drop
1152| return
1153| f64.const $1
1162| f64.const $2
1171| f64.le %[-2], %[-1]
1172| drop
1173| return
1174| f64.const $1
1183| f64.const $2
1192| f64.ge %[-2], %[-1]
1193| drop
1194| return
1195| i32.const $1
1200| i32.clz %[-1]
1201| drop
1202| return
1203| i32.const $1
1208| i32.ctz %[-1]
1209| drop
1210| return
1211| i32.const $1
1216| i32.popcnt %[-1]
1217| drop
1218| return
1219| i32.const $1
1224| i32.const $2
1229| i32.add %[-2], %[-1]
1230| drop
1231| return
1232| i32.const $1
1237| i32.const $2
1242| i32.sub %[-2], %[-1]
1243| drop
1244| return
1245| i32.const $1
1250| i32.const $2
1255| i32.mul %[-2], %[-1]
1256| drop
1257| return
1258| i32.const $1
1263| i32.const $2
1268| i32.div_s %[-2], %[-1]
1269| drop
1270| return
1271| i32.const $1
1276| i32.const $2
1281| i32.div_u %[-2], %[-1]
1282| drop
1283| return
1284| i32.const $1
1289| i32.const $2
1294| i32.rem_s %[-2], %[-1]
1295| drop
1296| return
1297| i32.const $1
1302| i32.const $2
1307| i32.rem_u %[-2], %[-1]
1308| drop
1309| return
1310| i32.const $1
1315| i32.const $2
1320| i32.and %[-2], %[-1]
1321| drop
1322| return
1323| i32.const $1
1328| i32.const $2
1333| i32.or %[-2], %[-1]
1334| drop
1335| return
1336| i32.const $1
1341| i32.const $2
1346| i32.xor %[-2], %[-1]
1347| drop
1348| return
1349| i32.const $1
1354| i32.const $2
1359| i32.shl %[-2], %[-1]
1360| drop
1361| return
1362| i32.const $1
1367| i32.const $2
1372| i32.shr_s %[-2], %[-1]
1373| drop
1374| return
1375| i32.const $1
1380| i32.const $2
1385| i32.shr_u %[-2], %[-1]
1386| drop
1387| return
1388| i32.const $1
1393| i32.const $2
1398| i32.rotl %[-2], %[-1]
1399| drop
1400| return
1401| i32.const $1
1406| i32.const $2
1411| i32.rotr %[-2], %[-1]
1412| drop
1413| return
1414| i64.const $1
1423| i64.clz %[-1]
1424| drop
1425| return
1426| i64.const $1
1435| i64.ctz %[-1]
1436| drop
1437| return
1438| i64.const $1
1447| i64.popcnt %[-1]
1448| drop
1449| return
1450| i64.const $1
1459| i64.const $2
1468| i64.add %[-2], %[-1]
1469| drop
1470| return
1471| i64.const $1
1480| i64.const $2
1489| i64.sub %[-2], %[-1]
1490| drop
1491| return
1492| i64.const $1
1501| i64.const $2
1510| i64.mul %[-2], %[-1]
1511| drop
1512| return
1513| i64.const $1
1522| i64.const $2
1531| i64.div_s %[-2], %[-1]
1532| drop
1533| return
1534| i64.const $1
1543| i64.const $2
1552| i64.div_u %[-2], %[-1]
1553| drop
1554| return
1555| i64.const $1
1564| i64.const $2
1573| i64.rem_s %[-2], %[-1]
1574| drop
1575| return
1576| i64.const $1
1585| i64.const $2
1594| i64.rem_u %[-2], %[-1]
1595| drop
1596| return
1597| i64.const $1
1606| i64.const $2
1615| i64.and %[-2], %[-1]
1616| drop
1617| return
1618| i64.const $1
1627| i64.const $2
1636| i64.or %[-2], %[-1]
1637| drop
1638| return
1639| i64.const $1
1648| i64.const $2
1657| i64.xor %[-2], %[-1]
1658| drop
1659| return
1660| i64.const $1
1669| i64.const $2
1678| i64.shl %[-2], %[-1]
1679| drop
1680| return
1681| i64.const $1
1690| i64.const $2
1699| i64.shr_s %[-2], %[-1]
1700| drop
1701| return
1702| i64.const $1
1711| i64.const $2
1720| i64.shr_u %[-2], %[-1]
1721| drop
1722| return
1723| i64.const $1
1732| i64.const $2
1741| i64.rotl %[-2], %[-1]
1742| drop
1743| return
1744| i64.const $1
1753| i64.const $2
1762| i64.rotr %[-2], %[-1]
1763| drop
1764| return
1765| f32.const $1
1770| f32.abs %[-1]
1771| drop
1772| return
1773| f32.const $1
1778| f32.neg %[-1]
1779| drop
1780| return
1781| f32.const $1
1786| f32.ceil %[-1]
1787| drop
1788| return
1789| f32.const $1
1794| f32.floor %[-1]
1795| drop
1796| return
1797| f32.const $1
1802| f32.trunc %[-1]
1803| drop
1804| return
1805| f32.const $1
1810| f32.nearest %[-1]
1811| drop
1812| return
1813| f32.const $1
1818| f32.sqrt %[-1]
1819| drop
1820| return
1821| f32.const $1
1826| f32.const $2
1831| f32.add %[-2], %[-1]
1832| drop
1833| return
1834| f32.const $1
1839| f32.const $2
1844| f32.sub %[-2], %[-1]
1845| drop
1846| return
1847| f32.const $1
1852| f32.const $2
1857| f32.mul %[-2], %[-1]
1858| drop
1859| return
1860| f32.const $1
1865| f32.const $2
1870| f32.div %[-2], %[-1]
1871| drop
1872| return
1873| f32.const $1
1878| f32.const $2
1883| f32.min %[-2], %[-1]
1884| drop
1885| return
1886| f32.const $1
1891| f32.const $2
1896| f32.max %[-2], %[-1]
1897| drop
1898| return
1899| f32.const $1
1904| f32.const $2
1909| f32.copysign %[-2], %[-1]
1910| drop
1911| return
1912| f64.const $1
1921| f64.abs %[-1]
1922| drop
1923| return
1924| f64.const $1
1933| f64.neg %[-1]
1934| drop
1935| return
1936| f64.const $1
1945| f64.ceil %[-1]
1946| drop
1947| return
1948| f64.const $1
1957| f64.floor %[-1]
1958| drop
1959| return
1960| f64.const $1
1969| f64.trunc %[-1]
1970| drop
1971| return
1972| f64.const $1
1981| f64.nearest %[-1]
1982| drop
1983| return
1984| f64.const $1
1993| f64.sqrt %[-1]
1994| drop
1995| return
1996| f64.const $1
2005| f64.const $2
2014| f64.add %[-2], %[-1]
2015| drop
2016| return
2017| f64.const $1
2026| f64.const $2
2035| f64.sub %[-2], %[-1]
2036| drop
2037| return
2038| f64.const $1
2047| f64.const $2
2056| f64.mul %[-2], %[-1]
2057| drop
2058| return
2059| f64.const $1
2068| f64.const $2
2077| f64.div %[-2], %[-1]
2078| drop
2079| return
2080| f64.const $1
2089| f64.const $2
2098| f64.min %[-2], %[-1]
2099| drop
2100| return
2101| f64.const $1
2110| f64.const $2
2119| f64.max %[-2], %[-1]
2120| drop
2121| return
2122| f64.const $1
2131| f64.const $2
2140| f64.copysign %[-2], %[-1]
2141| drop
2142| return
2143| i64.const $1
2152| i32.wrap/i64 %[-1]
2153| drop
2154| return
2155| f32.const $1
2160| i32.trunc_s/f32 %[-1]
2161| drop
2162| return
2163| f32.const $1
2168| i32.trunc_u/f32 %[-1]
2169| drop
2170| return
2171| f64.const $1
2180| i32.trunc_s/f64 %[-1]
2181| drop
2182| return
2183| f64.const $1
2192| i32.trunc_u/f64 %[-1]
2193| drop
2194| return
2195| i32.const $1
2200| i64.extend_s/i32 %[-1]
2201| drop
2202| return
2203| i32.const $1
2208| i64.extend_u/i32 %[-1]
2209| drop
2210| return
2211| f32.const $1
2216| i64.trunc_s/f32 %[-1]
2217| drop
2218| return
2219| f32.const $1
2224| i64.trunc_u/f32 %[-1]
2225| drop
2226| return
2227| f64.const $1
2236| i64.trunc_s/f64 %[-1]
2237| drop
2238| return
2239| f64.const $1
2248| i64.trunc_u/f64 %[-1]
2249| drop
2250| return
2251| i32.const $1
2256| f32.convert_s/i32 %[-1]
2257| drop
2258| return
2259| i32.const $1
2264| f32.convert_u/i32 %[-1]
2265| drop
2266| return
2267| i64.const $1
2276| f32.convert_s/i64 %[-1]
2277| drop
2278| return
2279| i64.const $1
2288| f32.convert_u/i64 %[-1]
2289| drop
2290| return
2291| f64.const $1
2300| f32.demote/f64 %[-1]
2301| drop
2302| return
2303| i32.const $1
2308| f64.convert_s/i32 %[-1]
2309| drop
2310| return
2311| i32.const $1
2316| f64.convert_u/i32 %[-1]
2317| drop
2318| return
2319| i64.const $1
2328| f64.convert_s/i64 %[-1]
2329| drop
2330| return
2331| i64.const $1
2340| f64.convert_u/i64 %[-1]
2341| drop
2342| return
2343| f32.const $1
2348| f64.promote/f32 %[-1]
2349| drop
2350| return
2351| i32.const $1
2356| f32.reinterpret/i32 %[-1]
2357| drop
2358| return
2359| f32.const $1
2364| i32.reinterpret/f32 %[-1]
2365| drop
2366| return
2367| i64.const $1
2376| f64.reinterpret/i64 %[-1]
2377| drop
2378| return
2379| f64.const $1
2388| i64.reinterpret/f64 %[-1]
2389| drop
2390| return
2391| i32.const $1
2396| i32.extend8_s %[-1]
2397| drop
2398| return
2399| i32.const $1
2404| i32.extend16_s %[-1]
2405| drop
2406| return
2407| i64.const $1
2416| i64.extend8_s %[-1]
2417| drop
2418| return
2419| i64.const $1
2428| i64.extend16_s %[-1]
2429| drop
2430| return
2431| i64.const $1
2440| i64.extend32_s %[-1]
2441| drop
2442| return
2443| alloca $1
2448| drop
2449| return
2450| i32.const $1
2455| br_unless @2465, %[-1]
2460| br @2465
2465| return
2466| i32.const $1
2471| call_host $0
2476| return
2477| i32.const $1
2482| br_table %[-1], $#0, table:$2496
2491| data $9
2496|   entry 0: offset: 2505 drop: 0 keep: 0
2505| return
2506| i32.const $1
2511| i32.const $2
2516| drop_keep $1 $1
2522| br @2527
2527| drop
2528| return
2529| f32.const $1
2534| i32.trunc_s:sat/f32 %[-1]
2536| drop
2537| return
2538| f32.const $1
2543| i32.trunc_u:sat/f32 %[-1]
2545| drop
2546| return
2547| f64.const $1
2556| i32.trunc_s:sat/f64 %[-1]
2558| drop
2559| return
2560| f64.const $1
2569| i32.trunc_u:sat/f64 %[-1]
2571| drop
2572| return
2573| f32.const $1
2578| i64.trunc_s:sat/f32 %[-1]
2580| drop
2581| return
2582| f32.const $1
2587| i64.trunc_u:sat/f32 %[-1]
2589| drop
2590| return
2591| f64.const $1
2600| i64.trunc_s:sat/f64 %[-1]
2602| drop
2603| return
2604| f64.const $1
2613| i64.trunc_u:sat/f64 %[-1]
2615| drop
2616| return
2617| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2635| drop
2636| return
2637| i32.const $1
2642| v128.load $0:%[-1]+$3
2652| drop
2653| return
2654| i32.const $1
2659| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2677| v128.store $0:%[-2]+$3, %[-1]
2687| return
2688| i32.const $1
2693| i8x16.splat %[-1]
2695| drop
2696| return
2697| i32.const $1
2702| i16x8.splat %[-1]
2704| drop
2705| return
2706| i32.const $1
2711| i32x4.splat %[-1]
2713| drop
2714| return
2715| i64.const $1
2724| i64x2.splat %[-1]
2726| drop
2727| return
2728| f32.const $1
2733| f32x4.splat %[-1]
2735| drop
2736| return
2737| f64.const $1
2746| f64x2.splat %[-1]
2748| drop
2749| return
2750| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2768| i8x16.extract_lane_s %[-1] : (Lane imm: 15)
2771| drop
2772| return
2773| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2791| i8x16.extract_lane_u %[-1] : (Lane imm: 15)
2794| drop
2795| return
2796| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2814| i16x8.extract_lane_s %[-1] : (Lane imm: 7)
2817| drop
2818| return
2819| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2837| i16x8.extract_lane_u %[-1] : (Lane imm: 7)
2840| drop
2841| return
2842| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2860| i32x4.extract_lane %[-1] : (Lane imm: 3)
2863| drop
2864| return
2865| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2883| i64x2.extract_lane %[-1] : (Lane imm: 1)
2886| drop
2887| return
2888| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2906| f32x4.extract_lane %[-1] : (Lane imm: 3)
2909| drop
2910| return
2911| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2929| f64x2.extract_lane %[-1] : (Lane imm: 1)
2932| drop
2933| return
2934| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2952| i32.const $0
2957| i8x16.replace_lane %[-1], %[-2] : (Lane imm: 15)
2960| drop
2961| return
2962| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
2980| i32.const $0
2985| i16x8.replace_lane %[-1], %[-2] : (Lane imm: 7)
2988| drop
2989| return
2990| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3008| i32.const $0
3013| i32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
3016| drop
3017| return
3018| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3036| i64.const $0
3045| i64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
3048| drop
3049| return
3050| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3068| f32.const $0
3073| f32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
3076| drop
3077| return
3078| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3096| f64.const $0
3105| f64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
3108| drop
3109| return
3110| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3128| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3146| v8x16.shuffle %[-2], %[-1] : (Lane imm: $0x00000001 0x00000001 0x00000001 0x00000001 )
3164| drop
3165| return
3166| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3184| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3202| i8x16.add %[-2], %[-1]
3204| drop
3205| return
3206| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3224| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3242| i16x8.add %[-2], %[-1]
3244| drop
3245| return
3246| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3264| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3282| i32x4.add %[-2], %[-1]
3284| drop
3285| return
3286| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3304| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3322| i64x2.add %[-2], %[-1]
3324| drop
3325| return
3326| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3344| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3362| i8x16.sub %[-2], %[-1]
3364| drop
3365| return
3366| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3384| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3402| i16x8.sub %[-2], %[-1]
3404| drop
3405| return
3406| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3424| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3442| i32x4.sub %[-2], %[-1]
3444| drop
3445| return
3446| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3464| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3482| i64x2.sub %[-2], %[-1]
3484| drop
3485| return
3486| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3504| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3522| i8x16.mul %[-2], %[-1]
3524| drop
3525| return
3526| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3544| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3562| i16x8.mul %[-2], %[-1]
3564| drop
3565| return
3566| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3584| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3602| i32x4.mul %[-2], %[-1]
3604| drop
3605| return
3606| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3624| i8x16.neg %[-1]
3626| drop
3627| return
3628| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3646| i16x8.neg %[-1]
3648| drop
3649| return
3650| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3668| i32x4.neg %[-1]
3670| drop
3671| return
3672| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3690| i64x2.neg %[-1]
3692| drop
3693| return
3694| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3712| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3730| i8x16.add_saturate_s %[-2], %[-1]
3732| drop
3733| return
3734| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3752| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3770| i8x16.add_saturate_u %[-2], %[-1]
3772| drop
3773| return
3774| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3792| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3810| i16x8.add_saturate_s %[-2], %[-1]
3812| drop
3813| return
3814| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3832| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3850| i16x8.add_saturate_u %[-2], %[-1]
3852| drop
3853| return
3854| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3872| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3890| i8x16.sub_saturate_s %[-2], %[-1]
3892| drop
3893| return
3894| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3912| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3930| i8x16.sub_saturate_u %[-2], %[-1]
3932| drop
3933| return
3934| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3952| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
3970| i16x8.sub_saturate_s %[-2], %[-1]
3972| drop
3973| return
3974| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
3992| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4010| i16x8.sub_saturate_u %[-2], %[-1]
4012| drop
4013| return
4014| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4032| i32.const $0
4037| i8x16.shl %[-2], %[-1]
4039| drop
4040| return
4041| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4059| i32.const $0
4064| i16x8.shl %[-2], %[-1]
4066| drop
4067| return
4068| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4086| i32.const $0
4091| i32x4.shl %[-2], %[-1]
4093| drop
4094| return
4095| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4113| i32.const $0
4118| i64x2.shl %[-2], %[-1]
4120| drop
4121| return
4122| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4140| i32.const $0
4145| i8x16.shr_s %[-2], %[-1]
4147| drop
4148| return
4149| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4167| i32.const $0
4172| i8x16.shr_u %[-2], %[-1]
4174| drop
4175| return
4176| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4194| i32.const $0
4199| i16x8.shr_s %[-2], %[-1]
4201| drop
4202| return
4203| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4221| i32.const $0
4226| i16x8.shr_u %[-2], %[-1]
4228| drop
4229| return
4230| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4248| i32.const $0
4253| i32x4.shr_s %[-2], %[-1]
4255| drop
4256| return
4257| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4275| i32.const $0
4280| i32x4.shr_u %[-2], %[-1]
4282| drop
4283| return
4284| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4302| i32.const $0
4307| i64x2.shr_s %[-2], %[-1]
4309| drop
4310| return
4311| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4329| i32.const $0
4334| i64x2.shr_u %[-2], %[-1]
4336| drop
4337| return
4338| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4356| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4374| v128.and %[-2], %[-1]
4376| drop
4377| return
4378| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4396| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4414| v128.or %[-2], %[-1]
4416| drop
4417| return
4418| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4436| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4454| v128.xor %[-2], %[-1]
4456| drop
4457| return
4458| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4476| v128.not %[-1]
4478| drop
4479| return
4480| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4498| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4516| v128.const $0x00000003 0x00000003 0x00000003 0x00000003
4534| v128.bitselect %[-3], %[-2], %[-1]
4536| drop
4537| return
4538| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4556| i8x16.any_true %[-1]
4558| drop
4559| return
4560| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4578| i16x8.any_true %[-1]
4580| drop
4581| return
4582| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4600| i32x4.any_true %[-1]
4602| drop
4603| return
4604| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4622| i64x2.any_true %[-1]
4624| drop
4625| return
4626| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4644| i8x16.all_true %[-1]
4646| drop
4647| return
4648| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4666| i16x8.all_true %[-1]
4668| drop
4669| return
4670| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4688| i32x4.all_true %[-1]
4690| drop
4691| return
4692| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4710| i64x2.all_true %[-1]
4712| drop
4713| return
4714| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4732| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4750| i8x16.eq %[-2], %[-1]
4752| drop
4753| return
4754| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4772| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4790| i16x8.eq %[-2], %[-1]
4792| drop
4793| return
4794| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4812| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4830| i32x4.eq %[-2], %[-1]
4832| drop
4833| return
4834| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4852| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4870| f32x4.eq %[-2], %[-1]
4872| drop
4873| return
4874| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4892| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4910| f64x2.eq %[-2], %[-1]
4912| drop
4913| return
4914| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4932| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4950| i8x16.ne %[-2], %[-1]
4952| drop
4953| return
4954| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
4972| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
4990| i16x8.ne %[-2], %[-1]
4992| drop
4993| return
4994| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5012| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5030| i32x4.ne %[-2], %[-1]
5032| drop
5033| return
5034| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5052| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5070| f32x4.ne %[-2], %[-1]
5072| drop
5073| return
5074| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5092| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5110| f64x2.ne %[-2], %[-1]
5112| drop
5113| return
5114| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5132| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5150| i8x16.lt_s %[-2], %[-1]
5152| drop
5153| return
5154| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5172| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5190| i8x16.lt_u %[-2], %[-1]
5192| drop
5193| return
5194| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5212| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5230| i16x8.lt_s %[-2], %[-1]
5232| drop
5233| return
5234| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5252| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5270| i16x8.lt_u %[-2], %[-1]
5272| drop
5273| return
5274| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5292| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5310| i32x4.lt_s %[-2], %[-1]
5312| drop
5313| return
5314| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5332| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5350| i32x4.lt_u %[-2], %[-1]
5352| drop
5353| return
5354| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5372| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5390| f32x4.lt %[-2], %[-1]
5392| drop
5393| return
5394| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5412| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5430| f64x2.lt %[-2], %[-1]
5432| drop
5433| return
5434| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5452| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5470| i8x16.le_s %[-2], %[-1]
5472| drop
5473| return
5474| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5492| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5510| i8x16.le_u %[-2], %[-1]
5512| drop
5513| return
5514| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5532| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5550| i16x8.le_s %[-2], %[-1]
5552| drop
5553| return
5554| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5572| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5590| i16x8.le_u %[-2], %[-1]
5592| drop
5593| return
5594| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5612| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5630| i32x4.le_s %[-2], %[-1]
5632| drop
5633| return
5634| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5652| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5670| i32x4.le_u %[-2], %[-1]
5672| drop
5673| return
5674| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5692| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5710| f32x4.le %[-2], %[-1]
5712| drop
5713| return
5714| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5732| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5750| f64x2.le %[-2], %[-1]
5752| drop
5753| return
5754| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5772| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5790| i8x16.gt_s %[-2], %[-1]
5792| drop
5793| return
5794| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5812| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5830| i8x16.gt_u %[-2], %[-1]
5832| drop
5833| return
5834| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5852| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5870| i16x8.gt_s %[-2], %[-1]
5872| drop
5873| return
5874| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5892| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5910| i16x8.gt_u %[-2], %[-1]
5912| drop
5913| return
5914| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5932| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5950| i32x4.gt_s %[-2], %[-1]
5952| drop
5953| return
5954| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
5972| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
5990| i32x4.gt_u %[-2], %[-1]
5992| drop
5993| return
5994| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6012| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6030| f32x4.gt %[-2], %[-1]
6032| drop
6033| return
6034| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6052| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6070| f64x2.gt %[-2], %[-1]
6072| drop
6073| return
6074| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6092| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6110| i8x16.ge_s %[-2], %[-1]
6112| drop
6113| return
6114| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6132| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6150| i8x16.ge_u %[-2], %[-1]
6152| drop
6153| return
6154| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6172| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6190| i16x8.ge_s %[-2], %[-1]
6192| drop
6193| return
6194| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6212| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6230| i16x8.ge_u %[-2], %[-1]
6232| drop
6233| return
6234| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6252| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6270| i32x4.ge_s %[-2], %[-1]
6272| drop
6273| return
6274| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6292| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6310| i32x4.ge_u %[-2], %[-1]
6312| drop
6313| return
6314| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6332| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6350| f32x4.ge %[-2], %[-1]
6352| drop
6353| return
6354| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6372| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6390| f64x2.ge %[-2], %[-1]
6392| drop
6393| return
6394| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6412| f32x4.neg %[-1]
6414| drop
6415| return
6416| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6434| f64x2.neg %[-1]
6436| drop
6437| return
6438| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6456| f32x4.abs %[-1]
6458| drop
6459| return
6460| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6478| f64x2.abs %[-1]
6480| drop
6481| return
6482| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6500| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6518| f32x4.min %[-2], %[-1]
6520| drop
6521| return
6522| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6540| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6558| f64x2.min %[-2], %[-1]
6560| drop
6561| return
6562| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6580| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6598| f32x4.max %[-2], %[-1]
6600| drop
6601| return
6602| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6620| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6638| f64x2.max %[-2], %[-1]
6640| drop
6641| return
6642| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6660| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6678| f32x4.add %[-2], %[-1]
6680| drop
6681| return
6682| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6700| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6718| f64x2.add %[-2], %[-1]
6720| drop
6721| return
6722| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6740| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6758| f32x4.sub %[-2], %[-1]
6760| drop
6761| return
6762| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6780| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6798| f64x2.sub %[-2], %[-1]
6800| drop
6801| return
6802| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6820| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6838| f32x4.div %[-2], %[-1]
6840| drop
6841| return
6842| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6860| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6878| f64x2.div %[-2], %[-1]
6880| drop
6881| return
6882| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6900| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6918| f32x4.mul %[-2], %[-1]
6920| drop
6921| return
6922| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6940| v128.const $0x00000002 0x00000002 0x00000002 0x00000002
6958| f64x2.mul %[-2], %[-1]
6960| drop
6961| return
6962| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
6980| f32x4.sqrt %[-1]
6982| drop
6983| return
6984| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7002| f64x2.sqrt %[-1]
7004| drop
7005| return
7006| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7024| f32x4.convert_s/i32x4 %[-1]
7026| drop
7027| return
7028| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7046| f32x4.convert_u/i32x4 %[-1]
7048| drop
7049| return
7050| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7068| f64x2.convert_s/i64x2 %[-1]
7070| drop
7071| return
7072| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7090| f64x2.convert_u/i64x2 %[-1]
7092| drop
7093| return
7094| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7112| i32x4.trunc_s/f32x4:sat %[-1]
7114| drop
7115| return
7116| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7134| i32x4.trunc_u/f32x4:sat %[-1]
7136| drop
7137| return
7138| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7156| i64x2.trunc_s/f64x2:sat %[-1]
7158| drop
7159| return
7160| v128.const $0x00000001 0x00000001 0x00000001 0x00000001
7178| i64x2.trunc_u/f64x2:sat %[-1]
7180| drop
7181| return
7182| i32.const $1
7187| i32.const $2
7192| atomic.wake $0:%[-2]+$3, %[-1]
7202| drop
7203| return
7204| i32.const $1
7209| i32.const $2
7214| i64.const $3
7223| i32.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
7233| drop
7234| return
7235| i32.const $1
7240| i64.const $2
7249| i64.const $3
7258| i64.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
7268| drop
7269| return
7270| i32.const $1
7275| i32.atomic.load $0:%[-1]+$3
7285| drop
7286| return
7287| i32.const $1
7292| i64.atomic.load $0:%[-1]+$7
7302| drop
7303| return
7304| i32.const $1
7309| i32.atomic.load8_u $0:%[-1]+$3
7319| drop
7320| return
7321| i32.const $1
7326| i32.atomic.load16_u $0:%[-1]+$3
7336| drop
7337| return
7338| i32.const $1
7343| i64.atomic.load8_u $0:%[-1]+$3
7353| drop
7354| return
7355| i32.const $1
7360| i64.atomic.load16_u $0:%[-1]+$3
7370| drop
7371| return
7372| i32.const $1
7377| i64.atomic.load32_u $0:%[-1]+$3
7387| drop
7388| return
7389| i32.const $1
7394| i32.const $2
7399| i32.atomic.store $0:%[-2]+$3, %[-1]
7409| return
7410| i32.const $1
7415| i64.const $2
7424| i64.atomic.store $0:%[-2]+$7, %[-1]
7434| return
7435| i32.const $1
7440| i32.const $2
7445| i32.atomic.store8 $0:%[-2]+$3, %[-1]
7455| return
7456| i32.const $1
7461| i32.const $2
7466| i32.atomic.store16 $0:%[-2]+$3, %[-1]
7476| return
7477| i32.const $1
7482| i64.const $2
7491| i64.atomic.store8 $0:%[-2]+$3, %[-1]
7501| return
7502| i32.const $1
7507| i64.const $2
7516| i64.atomic.store16 $0:%[-2]+$3, %[-1]
7526| return
7527| i32.const $1
7532| i64.const $2
7541| i64.atomic.store32 $0:%[-2]+$3, %[-1]
7551| return
7552| i32.const $1
7557| i32.const $2
7562| i32.atomic.rmw.add $0:%[-2]+$3, %[-1]
7572| drop
7573| return
7574| i32.const $1
7579| i64.const $2
7588| i64.atomic.rmw.add $0:%[-2]+$7, %[-1]
7598| drop
7599| return
7600| i32.const $1
7605| i32.const $2
7610| i32.atomic.rmw8_u.add $0:%[-2]+$3, %[-1]
7620| drop
7621| return
7622| i32.const $1
7627| i32.const $2
7632| i32.atomic.rmw16_u.add $0:%[-2]+$3, %[-1]
7642| drop
7643| return
7644| i32.const $1
7649| i64.const $2
7658| i64.atomic.rmw8_u.add $0:%[-2]+$3, %[-1]
7668| drop
7669| return
7670| i32.const $1
7675| i64.const $2
7684| i64.atomic.rmw16_u.add $0:%[-2]+$3, %[-1]
7694| drop
7695| return
7696| i32.const $1
7701| i64.const $2
7710| i64.atomic.rmw32_u.add $0:%[-2]+$3, %[-1]
7720| drop
7721| return
7722| i32.const $1
7727| i32.const $2
7732| i32.atomic.rmw.sub $0:%[-2]+$3, %[-1]
7742| drop
7743| return
7744| i32.const $1
7749| i64.const $2
7758| i64.atomic.rmw.sub $0:%[-2]+$7, %[-1]
7768| drop
7769| return
7770| i32.const $1
7775| i32.const $2
7780| i32.atomic.rmw8_u.sub $0:%[-2]+$3, %[-1]
7790| drop
7791| return
7792| i32.const $1
7797| i32.const $2
7802| i32.atomic.rmw16_u.sub $0:%[-2]+$3, %[-1]
7812| drop
7813| return
7814| i32.const $1
7819| i64.const $2
7828| i64.atomic.rmw8_u.sub $0:%[-2]+$3, %[-1]
7838| drop
7839| return
7840| i32.const $1
7845| i64.const $2
7854| i64.atomic.rmw16_u.sub $0:%[-2]+$3, %[-1]
7864| drop
7865| return
7866| i32.const $1
7871| i64.const $2
7880| i64.atomic.rmw32_u.sub $0:%[-2]+$3, %[-1]
7890| drop
7891| return
7892| i32.const $1
7897| i32.const $2
7902| i32.atomic.rmw.and $0:%[-2]+$3, %[-1]
7912| drop
7913| return
7914| i32.const $1
7919| i64.const $2
7928| i64.atomic.rmw.and $0:%[-2]+$7, %[-1]
7938| drop
7939| return
7940| i32.const $1
7945| i32.const $2
7950| i32.atomic.rmw8_u.and $0:%[-2]+$3, %[-1]
7960| drop
7961| return
7962| i32.const $1
7967| i32.const $2
7972| i32.atomic.rmw16_u.and $0:%[-2]+$3, %[-1]
7982| drop
7983| return
7984| i32.const $1
7989| i64.const $2
7998| i64.atomic.rmw8_u.and $0:%[-2]+$3, %[-1]
8008| drop
8009| return
8010| i32.const $1
8015| i64.const $2
8024| i64.atomic.rmw16_u.and $0:%[-2]+$3, %[-1]
8034| drop
8035| return
8036| i32.const $1
8041| i64.const $2
8050| i64.atomic.rmw32_u.and $0:%[-2]+$3, %[-1]
8060| drop
8061| return
8062| i32.const $1
8067| i32.const $2
8072| i32.atomic.rmw.or $0:%[-2]+$3, %[-1]
8082| drop
8083| return
8084| i32.const $1
8089| i64.const $2
8098| i64.atomic.rmw.or $0:%[-2]+$7, %[-1]
8108| drop
8109| return
8110| i32.const $1
8115| i32.const $2
8120| i32.atomic.rmw8_u.or $0:%[-2]+$3, %[-1]
8130| drop
8131| return
8132| i32.const $1
8137| i32.const $2
8142| i32.atomic.rmw16_u.or $0:%[-2]+$3, %[-1]
8152| drop
8153| return
8154| i32.const $1
8159| i64.const $2
8168| i64.atomic.rmw8_u.or $0:%[-2]+$3, %[-1]
8178| drop
8179| return
8180| i32.const $1
8185| i64.const $2
8194| i64.atomic.rmw16_u.or $0:%[-2]+$3, %[-1]
8204| drop
8205| return
8206| i32.const $1
8211| i64.const $2
8220| i64.atomic.rmw32_u.or $0:%[-2]+$3, %[-1]
8230| drop
8231| return
8232| i32.const $1
8237| i32.const $2
8242| i32.atomic.rmw.xor $0:%[-2]+$3, %[-1]
8252| drop
8253| return
8254| i32.const $1
8259| i64.const $2
8268| i64.atomic.rmw.xor $0:%[-2]+$7, %[-1]
8278| drop
8279| return
8280| i32.const $1
8285| i32.const $2
8290| i32.atomic.rmw8_u.xor $0:%[-2]+$3, %[-1]
8300| drop
8301| return
8302| i32.const $1
8307| i32.const $2
8312| i32.atomic.rmw16_u.xor $0:%[-2]+$3, %[-1]
8322| drop
8323| return
8324| i32.const $1
8329| i64.const $2
8338| i64.atomic.rmw8_u.xor $0:%[-2]+$3, %[-1]
8348| drop
8349| return
8350| i32.const $1
8355| i64.const $2
8364| i64.atomic.rmw16_u.xor $0:%[-2]+$3, %[-1]
8374| drop
8375| return
8376| i32.const $1
8381| i64.const $2
8390| i64.atomic.rmw32_u.xor $0:%[-2]+$3, %[-1]
8400| drop
8401| return
8402| i32.const $1
8407| i32.const $2
8412| i32.atomic.rmw.xchg $0:%[-2]+$3, %[-1]
8422| drop
8423| return
8424| i32.const $1
8429| i64.const $2
8438| i64.atomic.rmw.xchg $0:%[-2]+$7, %[-1]
8448| drop
8449| return
8450| i32.const $1
8455| i32.const $2
8460| i32.atomic.rmw8_u.xchg $0:%[-2]+$3, %[-1]
8470| drop
8471| return
8472| i32.const $1
8477| i32.const $2
8482| i32.atomic.rmw16_u.xchg $0:%[-2]+$3, %[-1]
8492| drop
8493| return
8494| i32.const $1
8499| i64.const $2
8508| i64.atomic.rmw8_u.xchg $0:%[-2]+$3, %[-1]
8518| drop
8519| return
8520| i32.const $1
8525| i64.const $2
8534| i64.atomic.rmw16_u.xchg $0:%[-2]+$3, %[-1]
8544| drop
8545| return
8546| i32.const $1
8551| i64.const $2
8560| i64.atomic.rmw32_u.xchg $0:%[-2]+$3, %[-1]
8570| drop
8571| return
8572| i32.const $1
8577| i32.const $2
8582| i32.const $3
8587| i32.atomic.rmw.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8597| drop
8598| return
8599| i32.const $1
8604| i64.const $2
8613| i64.const $3
8622| i64.atomic.rmw.cmpxchg $0:%[-3]+$7, %[-2], %[-1]
8632| drop
8633| return
8634| i32.const $1
8639| i32.const $2
8644| i32.const $3
8649| i32.atomic.rmw8_u.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8659| drop
8660| return
8661| i32.const $1
8666| i32.const $2
8671| i32.const $3
8676| i32.atomic.rmw16_u.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8686| drop
8687| return
8688| i32.const $1
8693| i64.const $2
8702| i64.const $3
8711| i64.atomic.rmw8_u.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8721| drop
8722| return
8723| i32.const $1
8728| i64.const $2
8737| i64.const $3
8746| i64.atomic.rmw16_u.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8756| drop
8757| return
8758| i32.const $1
8763| i64.const $2
8772| i64.const $3
8781| i64.atomic.rmw32_u.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
8791| drop
8792| return
unreachable() => error: unreachable executed
br() =>
br_table() =>
return() =>
call() =>
call_indirect() =>
drop() =>
select() =>
get_local() =>
set_local() =>
tee_local() =>
get_global() =>
set_global() =>
i32.load() =>
i64.load() =>
f32.load() =>
f64.load() =>
i32.load8_s() =>
i32.load8_u() =>
i32.load16_s() =>
i32.load16_u() =>
i64.load8_s() =>
i64.load8_u() =>
i64.load16_s() =>
i64.load16_u() =>
i64.load32_s() =>
i64.load32_u() =>
i32.store() =>
i64.store() =>
f32.store() =>
f64.store() =>
i32.store8() =>
i32.store16() =>
i64.store8() =>
i64.store16() =>
i64.store32() =>
current_memory() =>
grow_memory() =>
i32.const() =>
i64.const() =>
f32.const() =>
f64.const() =>
i32.eqz() =>
i32.eq() =>
i32.ne() =>
i32.lt_s() =>
i32.lt_u() =>
i32.gt_s() =>
i32.gt_u() =>
i32.le_s() =>
i32.le_u() =>
i32.ge_s() =>
i32.ge_u() =>
i64.eqz() =>
i64.eq() =>
i64.ne() =>
i64.lt_s() =>
i64.lt_u() =>
i64.gt_s() =>
i64.gt_u() =>
i64.le_s() =>
i64.le_u() =>
i64.ge_s() =>
i64.ge_u() =>
f32.eq() =>
f32.ne() =>
f32.lt() =>
f32.gt() =>
f32.le() =>
f32.ge() =>
f64.eq() =>
f64.ne() =>
f64.lt() =>
f64.gt() =>
f64.le() =>
f64.ge() =>
i32.clz() =>
i32.ctz() =>
i32.popcnt() =>
i32.add() =>
i32.sub() =>
i32.mul() =>
i32.div_s() =>
i32.div_u() =>
i32.rem_s() =>
i32.rem_u() =>
i32.and() =>
i32.or() =>
i32.xor() =>
i32.shl() =>
i32.shr_s() =>
i32.shr_u() =>
i32.rotl() =>
i32.rotr() =>
i64.clz() =>
i64.ctz() =>
i64.popcnt() =>
i64.add() =>
i64.sub() =>
i64.mul() =>
i64.div_s() =>
i64.div_u() =>
i64.rem_s() =>
i64.rem_u() =>
i64.and() =>
i64.or() =>
i64.xor() =>
i64.shl() =>
i64.shr_s() =>
i64.shr_u() =>
i64.rotl() =>
i64.rotr() =>
f32.abs() =>
f32.neg() =>
f32.ceil() =>
f32.floor() =>
f32.trunc() =>
f32.nearest() =>
f32.sqrt() =>
f32.add() =>
f32.sub() =>
f32.mul() =>
f32.div() =>
f32.min() =>
f32.max() =>
f32.copysign() =>
f64.abs() =>
f64.neg() =>
f64.ceil() =>
f64.floor() =>
f64.trunc() =>
f64.nearest() =>
f64.sqrt() =>
f64.add() =>
f64.sub() =>
f64.mul() =>
f64.div() =>
f64.min() =>
f64.max() =>
f64.copysign() =>
i32.wrap/i64() =>
i32.trunc_s/f32() =>
i32.trunc_u/f32() =>
i32.trunc_s/f64() =>
i32.trunc_u/f64() =>
i64.extend_s/i32() =>
i64.extend_u/i32() =>
i64.trunc_s/f32() =>
i64.trunc_u/f32() =>
i64.trunc_s/f64() =>
i64.trunc_u/f64() =>
f32.convert_s/i32() =>
f32.convert_u/i32() =>
f32.convert_s/i64() =>
f32.convert_u/i64() =>
f32.demote/f64() =>
f64.convert_s/i32() =>
f64.convert_u/i32() =>
f64.convert_s/i64() =>
f64.convert_u/i64() =>
f64.promote/f32() =>
i32.reinterpret/f32() =>
f32.reinterpret/i32() =>
i64.reinterpret/f64() =>
f64.reinterpret/i64() =>
i32.extend8_s() =>
i32.extend16_s() =>
i64.extend8_s() =>
i64.extend16_s() =>
i64.extend32_s() =>
alloca() =>
br_unless() =>
called host host.print(i32:1) =>
call_host() =>
data() =>
drop_keep() =>
i32.trunc_s:sat/f32() =>
i32.trunc_u:sat/f32() =>
i32.trunc_s:sat/f64() =>
i32.trunc_u:sat/f64() =>
i64.trunc_s:sat/f32() =>
i64.trunc_u:sat/f32() =>
i64.trunc_s:sat/f64() =>
i64.trunc_u:sat/f64() =>
v128.const() =>
v128.load() =>
v128.store() =>
i8x16.splat() =>
i16x8.splat() =>
i32x4.splat() =>
i64x2.splat() =>
f32x4.splat() =>
f64x2.splat() =>
i8x16.extract_lane_s() =>
i8x16.extract_lane_u() =>
i16x8.extract_lane_s() =>
i16x8.extract_lane_u() =>
i32x4.extract_lane() =>
i64x2.extract_lane() =>
f32x4.extract_lane() =>
f64x2.extract_lane() =>
i8x16.replace_lane() =>
i16x8.replace_lane() =>
i32x4.replace_lane() =>
i64x2.replace_lane() =>
f32x4.replace_lane() =>
f64x2.replace_lane() =>
v8x16.shuffle() =>
i8x16.add() =>
i16x8.add() =>
i32x4.add() =>
i64x2.add() =>
i8x16.sub() =>
i16x8.sub() =>
i32x4.sub() =>
i64x2.sub() =>
i8x16.mul() =>
i16x8.mul() =>
i32x4.mul() =>
i8x16.neg() =>
i16x8.neg() =>
i32x4.neg() =>
i64x2.neg() =>
i8x16.add_saturate_s() =>
i8x16.add_saturate_u() =>
i16x8.add_saturate_s() =>
i16x8.add_saturate_u() =>
i8x16.sub_saturate_s() =>
i8x16.sub_saturate_u() =>
i16x8.sub_saturate_s() =>
i16x8.sub_saturate_u() =>
i8x16.shl() =>
i16x8.shl() =>
i32x4.shl() =>
i64x2.shl() =>
i8x16.shr_s() =>
i8x16.shr_u() =>
i16x8.shr_s() =>
i16x8.shr_u() =>
i32x4.shr_s() =>
i32x4.shr_u() =>
i64x2.shr_s() =>
i64x2.shr_u() =>
v128.and() =>
v128.or() =>
v128.xor() =>
v128.not() =>
v128.bitselect() =>
i8x16.any_true() =>
i16x8.any_true() =>
i32x4.any_true() =>
i64x2.any_true() =>
i8x16.all_true() =>
i16x8.all_true() =>
i32x4.all_true() =>
i64x2.all_true() =>
i8x16.eq() =>
i16x8.eq() =>
i32x4.eq() =>
f32x4.eq() =>
f64x2.eq() =>
i8x16.ne() =>
i16x8.ne() =>
i32x4.ne() =>
f32x4.ne() =>
f64x2.ne() =>
i8x16.lt_s() =>
i8x16.lt_u() =>
i16x8.lt_s() =>
i16x8.lt_u() =>
i32x4.lt_s() =>
i32x4.lt_u() =>
f32x4.lt() =>
f64x2.lt() =>
i8x16.le_s() =>
i8x16.le_u() =>
i16x8.le_s() =>
i16x8.le_u() =>
i32x4.le_s() =>
i32x4.le_u() =>
f32x4.le() =>
f64x2.le() =>
i8x16.gt_s() =>
i8x16.gt_u() =>
i16x8.gt_s() =>
i16x8.gt_u() =>
i32x4.gt_s() =>
i32x4.gt_u() =>
f32x4.gt() =>
f64x2.gt() =>
i8x16.ge_s() =>
i8x16.ge_u() =>
i16x8.ge_s() =>
i16x8.ge_u() =>
i32x4.ge_s() =>
i32x4.ge_u() =>
f32x4.ge() =>
f64x2.ge() =>
f32x4.neg() =>
f64x2.neg() =>
f32x4.abs() =>
f64x2.abs() =>
f32x4.min() =>
f64x2.min() =>
f32x4.max() =>
f64x2.max() =>
f32x4.add() =>
f64x2.add() =>
f32x4.sub() =>
f64x2.sub() =>
f32x4.div() =>
f64x2.div() =>
f32x4.mul() =>
f64x2.mul() =>
f32x4.sqrt() =>
f64x2.sqrt() =>
f32x4.convert_s/i32x4() =>
f32x4.convert_u/i32x4() =>
f64x2.convert_s/i64x2() =>
f64x2.convert_u/i64x2() =>
i32x4.trunc_s/f32x4:sat() =>
i32x4.trunc_u/f32x4:sat() =>
i64x2.trunc_s/f64x2:sat() =>
i64x2.trunc_u/f64x2:sat() =>
atomic.wake() => error: unreachable executed
i32.atomic.wait() => error: unreachable executed
i64.atomic.wait() => error: unreachable executed
i32.atomic.load() =>
i64.atomic.load() =>
i32.atomic.load8_u() =>
i32.atomic.load16_u() =>
i64.atomic.load8_u() =>
i64.atomic.load16_u() =>
i64.atomic.load32_u() =>
i32.atomic.store() =>
i64.atomic.store() =>
i32.atomic.store8() =>
i32.atomic.store16() =>
i64.atomic.store8() =>
i64.atomic.store16() =>
i64.atomic.store32() =>
i32.atomic.rmw.add() =>
i64.atomic.rmw.add() =>
i32.atomic.rmw8_u.add() =>
i32.atomic.rmw16_u.add() =>
i64.atomic.rmw8_u.add() =>
i64.atomic.rmw16_u.add() =>
i64.atomic.rmw32_u.add() =>
i32.atomic.rmw.sub() =>
i64.atomic.rmw.sub() =>
i32.atomic.rmw8_u.sub() =>
i32.atomic.rmw16_u.sub() =>
i64.atomic.rmw8_u.sub() =>
i64.atomic.rmw16_u.sub() =>
i64.atomic.rmw32_u.sub() =>
i32.atomic.rmw.and() =>
i64.atomic.rmw.and() =>
i32.atomic.rmw8_u.and() =>
i32.atomic.rmw16_u.and() =>
i64.atomic.rmw8_u.and() =>
i64.atomic.rmw16_u.and() =>
i64.atomic.rmw32_u.and() =>
i32.atomic.rmw.or() =>
i64.atomic.rmw.or() =>
i32.atomic.rmw8_u.or() =>
i32.atomic.rmw16_u.or() =>
i64.atomic.rmw8_u.or() =>
i64.atomic.rmw16_u.or() =>
i64.atomic.rmw32_u.or() =>
i32.atomic.rmw.xor() =>
i64.atomic.rmw.xor() =>
i32.atomic.rmw8_u.xor() =>
i32.atomic.rmw16_u.xor() =>
i64.atomic.rmw8_u.xor() =>
i64.atomic.rmw16_u.xor() =>
i64.atomic.rmw32_u.xor() =>
i32.atomic.rmw.xchg() =>
i64.atomic.rmw.xchg() =>
i32.atomic.rmw8_u.xchg() =>
i32.atomic.rmw16_u.xchg() =>
i64.atomic.rmw8_u.xchg() =>
i64.atomic.rmw16_u.xchg() =>
i64.atomic.rmw32_u.xchg() =>
i32.atomic.rmw.cmpxchg() =>
i64.atomic.rmw.cmpxchg() =>
i32.atomic.rmw8_u.cmpxchg() =>
i32.atomic.rmw16_u.cmpxchg() =>
i64.atomic.rmw8_u.cmpxchg() =>
i64.atomic.rmw16_u.cmpxchg() =>
i64.atomic.rmw32_u.cmpxchg() =>
;;; STDOUT ;;)
