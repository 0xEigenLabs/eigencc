;;; RUN: %(wasm-interp)s
;;; ARGS: --help
(;; STDOUT ;;;
usage: wasm-interp [options] filename

  read a file in the wasm binary format, and run in it a stack-based
  interpreter.

examples:
  # parse binary file test.wasm, and type-check it
  $ wasm-interp test.wasm

  # parse test.wasm and run all its exported functions
  $ wasm-interp test.wasm --run-all-exports

  # parse test.wasm, run the exported functions and trace the output
  $ wasm-interp test.wasm --run-all-exports --trace

  # parse test.wasm and run all its exported functions, setting the
  # value stack size to 100 elements
  $ wasm-interp test.wasm -V 100 --run-all-exports

options:
  -v, --verbose                               Use multiple times for more info
  -h, --help                                  Print this help message
      --enable-exceptions                     Experimental exception handling
      --enable-mutable-globals                Import/export mutable globals
      --enable-saturating-float-to-int        Saturating float-to-int operators
      --enable-sign-extension                 Sign-extension operators
      --enable-simd                           SIMD support
      --enable-threads                        Threading support
  -V, --value-stack-size=SIZE                 Size in elements of the value stack
  -C, --call-stack-size=SIZE                  Size in elements of the call stack
  -t, --trace                                 Trace execution
      --run-all-exports                       Run all the exported functions, in order. Useful for testing
      --host-print                            Include an importable function named "host.print" for printing to stdout
;;; STDOUT ;;)
