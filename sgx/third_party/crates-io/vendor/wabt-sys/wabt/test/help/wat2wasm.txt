;;; RUN: %(wat2wasm)s
;;; ARGS: --help
(;; STDOUT ;;;
usage: wat2wasm [options] filename

  read a file in the wasm text format, check it for errors, and
  convert it to the wasm binary format.

examples:
  # parse and typecheck test.wat
  $ wat2wasm test.wat

  # parse test.wat and write to binary file test.wasm
  $ wat2wasm test.wat -o test.wasm

  # parse spec-test.wast, and write verbose output to stdout (including
  # the meaning of every byte)
  $ wat2wasm spec-test.wast -v

options:
  -v, --verbose                               Use multiple times for more info
  -h, --help                                  Print this help message
      --debug-parser                          Turn on debugging the parser of wat files
  -d, --dump-module                           Print a hexdump of the module to stdout
      --enable-exceptions                     Experimental exception handling
      --enable-mutable-globals                Import/export mutable globals
      --enable-saturating-float-to-int        Saturating float-to-int operators
      --enable-sign-extension                 Sign-extension operators
      --enable-simd                           SIMD support
      --enable-threads                        Threading support
  -o, --output=FILE                           output wasm binary file
  -r, --relocatable                           Create a relocatable wasm binary (suitable for linking with e.g. lld)
      --no-canonicalize-leb128s               Write all LEB128 sizes as 5-bytes instead of their minimal size
      --debug-names                           Write debug names to the generated binary file
      --no-check                              Don't check for invalid modules
;;; STDOUT ;;)
